import { request, BaseResponse } from '@/framework/utils/request';

export function updateAccountInfo(data: any) {
  return request<BaseResponse<any>>({
    url: 'account/update',
    method: 'post',
    data,
  });
}

export function updatePassword(data: any) {
  return request({
    url: '/user/password',
    method: 'post',
    data,
  });
}

export function getInfo() {
  return request<API.AuthorizationInfo>({
    url: '/authorize/me',
    method: 'get',
  });
}

export function permmenu() {
  return request<API.PermMenu>({
    url: '/authorize/permmenu',
    method: 'get',
  });
}

export function logout() {
  return request({
    url: '/authorize/logout',
    method: 'get',
  });
}
declare namespace API {
  type Menu = {
    createTime: Date;
    updateTime: Date;
    id: number;
    parentId: number;
    name: string;
    router: string;
    perms: string;
    type: number;
    icon: string;
    orderNum: number;
    viewPath: string;
    keepalive: boolean;
    isShow: boolean;
  };

  type PermMenu = {
    menus: Menu[];
    perms: string[];
  };

  type ServiceUrlInfo = {
    funcId: string;
    url: string;
    urlDesc: string;
  }

  type Func = {
    id: number;
    serviceId: string,
    parentId: number;
    name: string;
    memo: string;
    state: number;
    type: number;
    urls: ServiceUrlInfo[];
    children: FuncInfo[];
  };

  type FuncInfo = TreeResult<Func>;



  type OrganizationInfo = {
    name: string,
    id: string,
    path: string,
    parentId: string,
  }

  type RoleInfo = {
    id: string,
    name: string
  }

  type TenantInfo = {

  }

  type AdminUserInfo = {
    createTime: Date;
    updateTime: Date;
    id: string;
    departmentId: number;
    name: string;
    username: string;
    password: string;
    psalt: string;
    nickName: string;
    headImg: string;
    loginIp: string;
    email: string;
    phone: string;
    remark: string;
    status: number;
    roles: number[];
    departmentName: string;
  };

  type AuthorizationInfo = {
    user: AdminUserInfo
    funcs: FuncInfo[],
    organization: OrganizationInfo,
    roles: RoleInfo[],
    tenant: TenantInfo
  }
}
import { request, BaseResponse } from '@/framework/utils/request';

/**
 * @description 获取王者荣耀英雄列表
 */
export function getWzryHeroList(query: API.PageParams) {
  return request<BaseResponse<API.TableListResult>>(
    {
      url: '/demos/wzry/hero_list',
      method: 'get',
      params: query,
    },
    {
      isMock: true,
      isGetDataDirectly: false,
    },
  );
}

/**
 * @description 获取英雄联盟英雄列表
 */
export function getLolHeroList(query: API.PageParams) {
  return request<BaseResponse<API.TableListResult>>(
    {
      url: '/demos/lol/hero_list',
      method: 'get',
      params: query,
    },
    {
      isMock: true,
      isGetDataDirectly: false,
    },
  );
}

/**
 * @description 获取英雄联盟英雄列表
 */
export function getLolHeroInfo(query: { id: number | string }) {
  return request<BaseResponse>(
    {
      url: '/demos/lol/hero_info',
      method: 'get',
      params: query,
    },
    {
      isMock: true,
      isGetDataDirectly: false,
    },
  );
}
import { request } from '@/framework/utils/request';
import { DictNameType } from './types'
/**
 * @description 获取所有dict
 */
export const getAllDict = () => {
  return request({
    url: '/dict/',
    method: 'get',
  })
}

/**
 * @description 获取某种dict
 */
export const getDictByType = (dictName: DictNameType) => {
  return request({
    url: '/dict/' + dictName,
    method: 'get',
  })
}
type CustomDictType = 'sex' | 'UserStatus' | 'AllDict' | 'CityNatureStatus' | 'FilterSubmitState' | 'ExtraDeviceStatus'
export type AllRemoteDictType =
  | 'LabActivityVirusType' | 'LabActivityBacteriaType' | 'LabActivityFungusType' | 'LabActivityOtherType'
  | 'NatureOfTheUnit' | 'ColumnsType' | 'BioSecurityLevel' | 'InformationReleaseType'
  | 'FacilityCharacteristics' | 'Academic' | 'RoleId' | 'JobTitle' | 'Whether' | 'DeviceType' | 'AuditStatus'
  | 'VirusType' | 'BacterialActinomyceteType' | 'OrgType' | 'ParentColumn' | 'UnitLevel' | 'DeviceStatus'
  | 'Job' | 'AddFiles' | 'FacilityType'
export type DictNameType = CustomDictType | AllRemoteDictType
import { request } from '@/framework/utils/request';
type OrganizationType = 'LAB' | 'COM' | 'ORG'
export type OrgParams = {
  divideId: string,
  type: OrganizationType,
  name?: string, // 筛选name
}

/**
 * @description 获取所有行政区划
 */
export const getDivides = () => {
  return request({
    url: '/org/divides',
    method: 'get',
  })
}

/**
 * @description 获取当前登录用户下的行政区划
 */
export const getMyDivides = () => {
  return request({
    url: '/org/myDivides',
    method: 'get',
  })
}


/**
 * @description 获取某行政区划下的某种机构(儿子)
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getOrgByType = (params: OrgParams) => {
  return request({
    url: '/org/unit',
    method: 'get',
    params
  })
}

/**
 * @description 获取某行政区划下的所有某种机构(后辈)
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getAllOrgByType = (params: OrgParams) => {
  return request({
    url: '/org/allUnit',
    method: 'get',
    params
  })
}

/**
 * @description 获取某行政区划下的某种机构(儿子)分页
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getOrgByTypePage = (params: API.PageParams<OrgParams>) => {
  return request({
    url: '/org/unit/page',
    method: 'get',
    params
  })
}


/**
 * @description 获取某行政区划下的所有某种机构(后辈)分页
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getAllOrgByTypePage = (params: API.PageParams<OrgParams>) => {
  return request({
    url: '/org/allUnit/page',
    method: 'get',
    params
  })
}

/**
 * @description 获取某行政区划下的所有某种机构和行政区划；用于树型选择结构
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getOrgAndDivide = (params: OrgParams) => {
  return request({
    url: '/org/allUnitOrg',
    method: 'get',
    params
  })
}

/**
 * @description 获取某行政区划下的所有某种机构和行政区划以及所有祖先行政区划；用于树型选择结构
 * @params divideId 行政区划id
 * @parmas type: ORG | COMPANY | LAB
 */
export const getOrgAndParentDivide = (params: OrgParams) => {
  return request({
    url: '/org/getParentAndChildUnit',
    method: 'get',
    params
  })
}


export const postDivide = (data) => {
  return request({
    url: '/org/divide',
    method: 'post',
    data
  })
}

export const putDivide = (data) => {
  return request({
    url: '/org/divide',
    method: 'put',
    data
  })
}

export const deleteDivide = (id: string) => {
  return request({
    url: '/org/divide/' + id,
    method: 'delete',
  })
}

import { request } from '@/framework/utils/request';

/**
 * @description 单个文件上传
 */
export const uploadFile = (formData) => {
  return request({
    url: '/file/',
    method: 'post',
    data: formData,
  })
}

/**
 * @description 文件下载
 */
export const downloadFile = (params) => {
  return request({
    url: `/file/md5/${params.md5}`,
    method: 'get',
    responseType: 'blob'
  }, {
    isGetDataDirectly: false
  })
}

/**
 * @description 指定图片下载
 */
export const downloadImg = (params) => {
  return request({
    url: `/file/md5/${params.md5}`,
    method: 'get',
    params
  })
}

/**
 * @description 查询备案证书信息
 */
export const searchCertFile = (params) => {
  return request({
    url: `/certFile/${params.certFileIds}`,
    method: 'get',
  })
}import { request } from '@/framework/utils/request'

// 设备维护审核数据
export const getDeviceMaintainceStatistic = (params = { cycle: 1 }) => {
  return request({
    url: '/equipmentMaintenance/getStateNumber',
    method: 'get',
    params
  })
}

// 实验室活动
export const getActivityStatistic = (params = { cycle: 1 }) => {
  return request({
    url: '/labActionApplyDetail/getStateNumber',
    method: 'get',
    params
  })
}

// 实验室备案数量
export const getLabInfoStatistic = (params = { cycle: 1 }) => {
  return request({
    url: '/labInfo/getStateNumber',
    method: 'get',
    params
  })
}

import { request } from '@/framework/utils/request'

// 当前登录用户最新一次自查情况，针对实验室和单位
export const newestSelfTask = () => {
  return request({
    url: '/stat/newestSelfTask',
    method: 'get'
  })
}

// 当前登录用户最新一次检查情况，针对实验室和单位
export const newestExpertTask = () => {
  return request({
    url: '/stat/newestExpertTask',
    method: 'get'
  })
}

  // 按实验室汇总
export const groupByLab = (params) => {
  return request({
    url: '/stat/groupByLab',
    method: 'get',
    params
  })
}
// 最新一次检查方案信息与进度，针对主管部门
export const newestExpertPlan = () => {
  return request({
    url: '/stat/newestExpertPlan',
    method: 'get'
  })
}
// 最新一次自查方案信息与进度，针对主管部门
export const newestSelfPlan = () => {
  return request({
    url: '/stat/newestSelfPlan',
    method: 'get'
  })
}
// 本年度检查情况汇总
export const allTaskInThisYear = () => {
  return request({
    url: '/expertCheck/task/allTaskInThisYear/',
    method: 'get'
  })
}
// 本年度自查情况汇总
export const allSelfTaskInThisYear = () => {
  return request({
    url: '/selfCheck/task/allTaskInThisYear/',
    method: 'get'
  })
}import { request } from '@/framework/utils/request'

// 实验室设备维护预警
export const getEquipmentMaintenance = () => {
  return request({
    url: '/equipmentMaintenance/equAlertQuery',
    method: 'get',
  })
}

export const getActivityByStatus = (params) => {
  return request({
    url: '/labActionApplyDetail/getNumByActStatus',
    method: 'get',
    params
  })
}

export const getCertFile = (params?) => {
  return request({
    url: '/certFile/findSingle',
    method: 'get',
    params
  })
}import { request } from '@/framework/utils/request'

export const getCompanyInfoStatistic = (params = { cycle: 1 }) => {
  return request({
    url: '/companyInfo/getStateNumber',
    method: 'get',
    params
  })
}

export const labTypeStatistic = (params = { cycle: 1 }) => {
  return request({
    url: '/labInfo/getNumByBioType',
    method: 'get',
    params
  })
}import {request, BaseResponse, Response} from '@/framework/utils/request';

/**
 * @description 登录
 * @param {LoginParams} data
 * @returns
 */
export function login(data: API.LoginParams) {
    return request<BaseResponse<API.LoginResult>>(
        {
            // url: '/authorize/login',
            url: '/auth/login',
            method: 'post',
            data,
        },
        {
            isGetDataDirectly: false,
        },
    );
}

export function expertLogin(data: API.LoginParams) {
    return request<BaseResponse<API.LoginResult>>(
        {
            url: '/authorize/login',
            // url: '/auth/login',
            method: 'post',
            data,
        },
        {
            isGetDataDirectly: false,
        },
    );
}

/**
 * @description 获取验证码
 */
export function getImageCaptcha(params?: API.CaptchaParams) {
    return request<API.CaptchaResult>({
        url: '/captcha/',
        method: 'get',
        params,
    });
}

/**
 * @description 专家登录获取二维码
 */
export function getQrCode() {
    return request<Response<{ scene: string, imgBase64: string }>>({
            url: '/wechat/qrcode',
            method: 'get',
        },
        {
            isGetDataDirectly: false
        });
}


/**
 * @description 二维码状态
 */
export function getQrCodeStatus(params) {
    return request<{ token: string | null, status: number }>({
        url: '/wechat/qrcode/status',
        method: 'get',
        params
    });
}


/**
 * @description 注册
 */
export const register = (params) => {
    return request({
        url: '/user/register',
        method: 'post',
        data: params
    });
};

/**
 * @description 发送手机验证码
 */
export const sendCaptchaMsg = (params: {
    phone: string;
}) => {
    return request({
        url: '/user/sendCaptchaMsg',
        method: 'post',
        data: params
    });
};declare namespace API {
  /** 登录参数 */
  type LoginParams = {
    // captchaId: string;
    password: string;
    username: string;
    code: string,
    captchaCode: string;
  };

  /** 登录成功结果 */
  type LoginResult = {
    token: string;
  };

  /** 获取验证码参数 */
  type CaptchaParams = {
    width?: number;
    height?: number;
  };

  /** 获取验证码结果 */
  type CaptchaResult = {
    code: string,
    imgBase64: string,
    // img: string;
    // id: string;
  };
}
import { request } from "@/framework/utils/request";

export const getUserById = (id) => {
  return request({
    method: 'get',
    url: '/user/' + id,
  })
}<template>
  <ConfigProvider :locale="getAntdLocale">
    <router-view v-slot="{ Component }">
      <component :is="Component" />
    </router-view>
    <!-- <LockScreen /> -->
  </ConfigProvider>
</template>

<script setup lang="ts">
  import { watchEffect, watch, onMounted, onUnmounted, provide, ref } from 'vue';
  import { ConfigProvider } from 'ant-design-vue';
  import { LockScreen } from '@/framework/components/basic/lockscreen';
  import { useRoute, useRouter } from 'vue-router';
  import { useLocale } from '@/locales/useLocale';
  import { transformI18n } from '@/framework/hooks/useI18n';
  const route = useRoute();
  const router = useRouter();
  const { getAntdLocale } = useLocale();

  watchEffect(() => {
    if (route.meta?.title) {
      // 翻译网页标题
      document.title = transformI18n(route.meta.title);
    }
  });
  watch(() => route.name, () => {
    if (route.name == undefined) return
    window.$wujie?.bus.$emit("sub-router-change", "las", route.path);
  })

  onMounted(() => {
    window.$wujie?.bus.$on("ba-router-change", (path) => {
      console.error(path, 'path box')
      router.push(path)
    });
  })

  onUnmounted(() => {
    window.$wujie?.bus.$off("ba-router-change")
  })

  const tableHeight = ref(document.documentElement.clientHeight - 210)
  let timer: NodeJS.Timer | null = null
  provide('tableHeight', tableHeight)
  const resizeFn = () => {
    if (timer) {
      clearTimeout(timer)
      timer = null
    }
    timer = setTimeout(() => {
      tableHeight.value = document.documentElement.clientHeight - 210
    }, 200)
  }
  window.addEventListener('resize', resizeFn)
  onUnmounted(() => {
    window.removeEventListener('resize', resizeFn)
  })
</script>

<style lang="less"></style>
<template>
  <DraggableModal
    :visible="props.showModel"
    title="选择地址"
    width="1050px"
    @ok="changeOk"
    @cancel="changeCancel"
  >
    <AForm
      :model="state.createAddressForm"
      :label-col="{ span: 2 }"
      :wrapper-col="{ span: 5 }"
      ref="createFormRef"
    >
      <a-form-item label="位置信息" name="standard">
        <AInput
          v-model:value="state.createAddressForm.address"
          id="tipInput"
          placeholder="输入名称，快速定位地图中心坐标"
        />
      </a-form-item>
    </AForm>
    <div style="position: relative">
      <div id="container" style="width: 1000px; height: 500px"></div>
      <div id="result"></div>
    </div>
  </DraggableModal>
</template>

<script setup lang="ts">
  import { reactive, watch } from 'vue';
  import _ from 'lodash-es';
  import { Input as AInput, message } from 'ant-design-vue';
  import AMapLoader from '@amap/amap-jsapi-loader';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';

  type AddressInfo = {
    address: string;
    latitude: number;
    longitude: number;
  };

  const props = withDefaults(
    defineProps<{
      showModel: boolean;
    }>(),
    {
      showModel: false,
    },
  );
  const emits = defineEmits<{
    (e: 'update:showModel', state: boolean): void;
    (e: 'addressChange', addressInfo: AddressInfo): void;
  }>();

  const state: {
    createAddressForm: AddressInfo;
  } = reactive({
    createAddressForm: {} as AddressInfo,
  });
  const initMap = async () => {
    try {
      //
      const AMap = await AMapLoader.load({
        key: '4de8621cf96dbe69b9b16be70c1cfa4f', // 设置您的key
        version: '2.0',
        plugins: ['AMap.ToolBar', 'AMap.Driving'],
        AMapUI: {
          version: '1.1',
          plugins: [],
        },
        Loca: {
          version: '2.0.0',
        },
      });
      const map = new AMap.Map('container', {
        // zoom: 10,
        resizeEnable: true,
        // center: [120.153576, 30.287459],//地图居中显示坐标
      });

      let autoOptions = {
        input: 'tipInput',
      };
      AMap.plugin(['AMap.PlaceSearch', 'AMap.AutoComplete'], function () {
        // 地图点击事件
        map.on('click', showInfoClick);

        function showInfoClick(e) {
          map.clearMap(); //清理地图
          let lng = e.lnglat.getLng(); //获取经度
          let lat = e.lnglat.getLat(); //获取纬度
          placeSearch.searchNearBy(state.createAddressForm.address, e.lnglat, 5000);
          //marker点
          let marker = new AMap.Marker({
            position: [lng, lat],
            offset: new AMap.Pixel(0, 0),
          });
          state.createAddressForm.longitude = lng;
          state.createAddressForm.latitude = lat;
          map.add(marker); //加载点
          map.setFitView(); //缩放至地图
        }

        var placeSearch = new AMap.PlaceSearch({
          pageSize: 5, //每页显示多少行
          pageIndex: 1, //显示的下标从那个开始
          // type:'餐饮服务',//类别，可以以|后面加其他类
          // city: "010", //城市
          map: map, //显示地图
          panel: 'result', //服务显示的面板
        });
        placeSearch.on('listElementClick', (value) => {
          state.createAddressForm.address = value.data.name;
          state.createAddressForm.longitude = value.data.location.lng;
          state.createAddressForm.latitude = value.data.location.lat;
          console.log(state.createAddressForm);
        });
        var auto = new AMap.AutoComplete(autoOptions);
        auto.on('select', select); //注册监听，当选中某条记录时会触发
        placeSearch.search(state.createAddressForm.address);
        watch(
          () => state.createAddressForm?.address,
          _.debounce(() => {
            placeSearch.search(state.createAddressForm.address);
          }, 300),
        );

        function select(e) {
          placeSearch.setCity(e.poi.adcode);
          placeSearch.search(e.poi.name); //关键字查询查询
          state.createAddressForm.address = e.poi.name;
          state.createAddressForm.longitude = e.poi.location.lng;
          state.createAddressForm.latitude = e.poi.location.lat;
        }
      });
    } catch (err) {
      console.log(err);
    }
  };

  watch(
    () => props.showModel,
    () => {
      if (props.showModel) {
        initMap();
      }
    },
  );
  const changeOk = () => {
    if (!state.createAddressForm?.address || state.createAddressForm?.address?.trim() === '') {
      message.warn('请输入位置信息');
      return;
    }
    emits('addressChange', state.createAddressForm);
    changeCancel();
  };
  const changeCancel = () => {
    emits('update:showModel', false);
  };
</script>

<style scoped lang="less">
  #result {
    position: absolute;
    background-color: red;
    max-height: 90%;
    overflow-y: auto;
    top: 10px;
    right: 10px;
    width: 280px;
  }
</style>
<template>
  <div class="approval-flow-box">
    <!-- 【1】 关闭状态 -->
    <div v-if="!isApprovalOpen" class="approval-flow-close">
      <span class="point-success"></span>
      <span class="wrap-text">
        {{ props.name }}{{ props.type ? '单位' : '实验室' }}
        提交备案信息
      </span>
      <span class="line-btn" @click="isApprovalOpen = true">
        展开审批流
        <SvgIcon prefix="icon" name="changyongicon-" />
      </span>
    </div>
    <!-- 【2】 展开状态 -->
    <div v-else class="approval-flow-open">
      <span class="line-btn" @click="closeApprovalFn">
        关闭审批流 &nbsp;
        <SvgIcon prefix="icon" name="xiangxiajiantou" />
      </span>
      <!--  【2.1】 审批流  -->
      <div class="approval-flow-content">
        <Steps direction="vertical">
          <Step
            v-for="(item, index) in stepList.auditProcessList"
            v-show="item?.approveState !== 'NEEDLESS'"
            :key="index"
          >
            <template #icon>
              <span v-if="item.approveState === 'APPROVE'" class="point-success"></span>
              <span v-if="item.approveState === 'REFUSE'" class="point-error">×</span>
              <span v-if="item.approveState === 'WAITING'" class="point-wait"></span>
            </template>
            <template #title>
              <div class="title">
                <!--                <span v-if="item.userName" class="people">{{ item.userName }}</span>-->
                <span>{{ item.user.username }}</span>
                &nbsp;
                <span
                  v-if="
                    (item.approveState === 'APPROVE' || item.approveState === 'REFUSE') &&
                    index !== 0
                  "
                >
                  ({{ item.approveState === 'APPROVE' ? '同意备案' : '已退回' }})
                </span>
              </div>
            </template>
            <template #description>
              <div v-if="item.auditTime" class="time">{{
                dayjs(item.auditTime).format('YYYY-MM-DD')
              }}</div>
              <div
                v-if="
                  (item.approveState === 'APPROVE' || item.approveState === 'REFUSE') && index !== 0
                "
                class="description"
                >{{ item.comments }}<span v-if="isOrg">{{ item.userName ? `（${item.userName}）` : ''  }}</span>
              </div>
              <!--              <div v-else style="margin-bottom: 30px"></div>-->
            </template>
          </Step>
        </Steps>
      </div>
      <!--  【2.2】 历史记录  -->
      <div class="approval-flow-history">
        <div class="header">
          <span class="title">历史记录</span>
          <span class="btn" @click="showHistoryFn"
            >已提交{{ props.type ? '单位' : '实验室' }}备案{{ historyInfo?.hisRecordNum ?? 0 }}次
            {{ isHistoryOpen ? '∨' : '∧' }}</span
          >
        </div>
        <div v-if="isHistoryOpen && historyInfo" class="content">
          <div class="item">
            <div class="item-header">
              <span class="history-title"
                >{{ props.name }}{{ props.type ? '单位' : '实验室' }}提交的备案申请</span
              >
              <span class="time"
                >{{ dayjs(historyInfo?.operateTime).format('YYYY-MM-DD') }} 提交</span
              >
            </div>
            <div
              class="item-status"
              :class="{
                error: historyInfo.operation === '拒绝',
                success: historyInfo.operation === '通过',
              }"
            >
              {{ historyInfo.operation }}
            </div>
            <div class="main" v-if="historyInfo?.operation === '拒绝'">
              <div class="main-title">{{ historyInfo?.operatorName }}（已退回）</div>
              <div class="main-content">{{ historyInfo?.operationDetail }}</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
  import dayjs from 'dayjs';
  import { Step, Steps } from 'ant-design-vue';
  import { computed, ComputedRef, ref, inject } from 'vue';
  import { getHistoryApproveData } from '@/modules/infoManagement/api/lab';
  import { getComHistoryApproveData } from '@/modules/infoManagement/api/company';
  import { useRoute } from 'vue-router';
  import { useUserStore } from '@/store/modules/user';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';
  const isOrg = inject('isOrg')
  const props = defineProps({
    data: {
      type: Object,
      required: true,
    },
    name: {
      type: String,
      required: true,
    },
    type: {
      type: Number,
      default: 0,
    },
    time: {
      type: String,
      required: true,
    },
  });
  const route = useRoute();
  const userStore = useUserStore();
  // history
  const historyInfo = ref();
  // 请求历史记录
  const getHistoryApproveDataFn = async () => {
    try {
      historyInfo.value = props.type
        ? await getComHistoryApproveData(route.query.id ?? userStore.userInfo.id)
        : await getHistoryApproveData(route.query.id ?? userStore.userInfo.id);
    } catch (err) {
      console.log(err);
    }
  };
  getHistoryApproveDataFn();
  // step源数据
  const stepList = computed(() => {
    let value = props.data;
    if (props.data.auditProcessList) {
      value.auditProcessList.unshift({
        user: {
          username: props.name + (props.type ? '单位' : '实验室') + '提交备案信息',
        },
        approveState: 'APPROVE',
        auditTime: props.time,
        showComments: true,
      });
    } else {
      value.auditProcessList = [];
    }
    return value;
  });

  // 状态
  const isApprovalOpen = ref(false);
  const isHistoryOpen = ref(false);

  // 显示历史
  const showHistoryFn = () => {
    isHistoryOpen.value = !isHistoryOpen.value;
  };

  const closeApprovalFn = () => {
    isApprovalOpen.value = false;
    isHistoryOpen.value = false;
  };
</script>

<style lang="less" scoped>
  .approval-flow-box {
    position: relative;
    width: 381px;
    height: 36px;

    .line-btn {
      color: rgba(0, 82, 217, 100);
      font-size: 14px;
      cursor: pointer;
      font-weight: 700;
      user-select: none;
      display: flex;
      align-items: center;
    }

    .point-success {
      position: absolute;
      left: 0px;
      top: 0;

      &::before {
        position: absolute;
        left: 20px;
        top: 9px;
        content: '';
        width: 16px;
        height: 16px;
        border-radius: 50%;
        background-color: rgba(124, 215, 100, 0.25);
      }

      &::after {
        position: absolute;
        left: 24px;
        top: 13px;
        content: '';
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: rgba(124, 215, 100, 1);
      }
    }

    .approval-flow-close {
      position: absolute;
      left: 0;
      top: 0;
      display: flex;
      justify-content: space-between;
      box-sizing: border-box;
      //padding: 0 20px 0 50px;
      width: 381px;
      height: 36px;
      line-height: 36px;
      font-size: 14px;
      font-weight: 700;
      border-radius: 4px;
      background-color: rgba(248, 252, 255, 100);
      box-shadow: 0px 2px 6px 0px rgba(224, 227, 234, 100);
      border: 1px solid rgba(214, 226, 252, 100);
      font-family: 'SourceHanSansSC-regular';

      .point-success {
        left: -5px;
      }

      .wrap-text {
        width: 270px;
        padding-left: 40px;
        overflow: hidden; //超出的文本隐藏
        text-overflow: ellipsis; //溢出用省略号显示
        white-space: nowrap; //溢出不换行
      }

      .line-btn {
        position: absolute;

        right: 10px;
      }
    }

    .approval-flow-open {
      position: relative;
      z-index: 2;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      width: 381px;
      max-height: 770px;
      box-sizing: border-box;
      border-radius: 10px;
      background-color: rgba(248, 252, 255, 1);
      box-shadow: 0px 2px 6px 0px rgba(224, 227, 234, 100);
      border: 1px solid rgba(214, 226, 252, 100);
      overflow: auto;

      .line-btn {
        position: absolute;
        right: 20px;
        top: 13px;
        z-index: 9;
      }

      .approval-flow-content {
        min-height: 300px;
        margin: 10px 30px 10px 60px;

        .people {
          margin-right: 10px;
          color: rgba(255, 177, 64, 1);
          font-size: 14px;
          font-family: 'SourceHanSansSC-regular';
        }

        .point-success {
          position: relative;
          left: -72px;
          top: -2px;
        }

        .point-error {
          display: inline-block;
          position: absolute;
          left: -52px;
          top: 7px;
          line-height: 15px;
          font-size: 14px;
          text-align: center;
          color: #fff;
          width: 16px;
          height: 16px;
          border-radius: 50%;
          background-color: rgba(251, 8, 63, 1);
        }

        .point-wait {
          position: absolute;
          left: -71px;

          &::before {
            position: absolute;
            left: 20px;
            top: 9px;
            content: '';
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background-color: rgba(224, 227, 234, 0.25);
          }

          &::after {
            position: absolute;
            left: 24px;
            top: 13px;
            content: '';
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: rgba(189, 193, 201, 1);
          }
        }

        .description {
          min-height: 28px;
          max-height: 150px;
          overflow-y: hidden;
          padding: 5px;
          font-size: 14px;
          border-radius: 0 0 10px 10px;
          background-color: rgb(224, 227, 234);
        }

        .btn {
          position: absolute;
          right: 10px;
          top: 5px;
        }

        .title {
          width: 200px;
          color: rgba(16, 16, 16, 100);
          font-size: 14px;
          line-height: 20px;
          font-weight: 700;
          font-family: 'SourceHanSansSC-regular';
          padding-top: 4px;
        }

        .time {
          color: rgba(139, 139, 139, 100);
          font-size: 12px;
          font-family: 'AlibabaPuHui-regular';
        }
      }

      .approval-flow-history {
        padding: 0px 24px;
        border-top: 2px solid #d6e2fc;

        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          height: 37px;

          .title {
            color: rgba(16, 16, 16, 100);
            font-size: 14px;
            font-weight: 700;
            font-family: 'SourceHanSansSC-regular';
          }

          .btn {
            color: rgba(78, 89, 105, 100);
            font-size: 12px;
            font-family: SourceHanSansSC-regular;
            cursor: pointer;
            user-select: none;
          }
        }

        .content {
          .item {
            padding: 5px 10px;
            margin: 5px 0;
            border-radius: 6px;
            background-color: rgba(255, 255, 255, 1);
            box-shadow: 0px 2px 6px 0px rgba(214, 226, 252, 66);

            &:last-child {
              margin-bottom: 20px;
            }

            .item-header {
              display: flex;
              justify-content: space-between;
              color: rgba(16, 16, 16, 100);
              font-size: 14px;
              font-weight: 700;
              font-family: 'SourceHanSansSC-regular';

              .history-title {
                width: 210px;
              }

              .time {
                color: rgba(158, 161, 165, 100);
                font-size: 12px;
                text-align: left;
                line-height: 22px;
                font-family: 'AlibabaPuHui-regular';
              }
            }

            .item-status {
              font-size: 12px;
              font-family: 'SourceHanSansSC-regular';

              &.success {
                color: rgba(22, 220, 220, 1);
              }

              &.error {
                color: rgba(253, 154, 8, 1);
              }
            }

            .main {
              margin-top: 10px;
              color: rgba(16, 16, 16, 1);
              font-size: 14px;
              text-align: left;
              font-family: 'SourceHanSansSC-regular';

              .main-content {
                overflow: auto;
                max-height: 250px;
                padding: 0 10px;
                margin-bottom: 20px;
                border-radius: 0 0 10px 10px;
                color: rgba(16, 16, 16, 1);
                font-size: 14px;
                font-family: 'Roboto';
                border: 1px solid rgba(187, 187, 187, 1);
              }
            }
          }
        }
      }
    }
  }

  :deep(.ant-steps-vertical)
    > .ant-steps-item
    > .ant-steps-item-container
    > .ant-steps-item-tail::after {
    position: relative;
    left: -43px;
    color: #8b8b8b;
  }
</style>
<template>
  <span style="margin-right:8px;display:inline-block;height:12px;">
    <SvgIcon prefix="icon" :name="name" size="14"></SvgIcon>
  </span>
</template>
<script setup lang="tsx">
import { SvgIcon } from '@/framework/components/basic/svg-icon';
defineProps({
  size: {
    type: [String, Number],
    default: 14,
  },
  name: {
    type: String,
    required: true
  }
})
</script><template>
  <div class="activity-card">
    <div style="display:flex;min-width: 330px;">
      <div class="activity-card-icon">
        <slot name="icon">
          <img src="@/assets/images/icon-2.png" alt="">
        </slot>
      </div>
      <div>
        <div class="activity-card-title">
          {{title}}
        </div>
        <div style="white-space:nowrap;">
          <span class="activity-card-subtitle">样本数</span>
          <span class="activity-card-primary">{{sampleCount}}</span>
          <span class="activity-card-subtitle">阳性数</span>
          <span class="activity-card-warning">{{positiveCount}}</span>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="tsx">
import { defineComponent } from 'vue'
export default defineComponent({
  props: {
    title: {
      type: String,
      required: true
    },
    sampleCount: {
      type: Number,
      default: 0
    },
    positiveCount: {
      type: Number,
      default: 0
    },
    backgroundColor: {
      type: String,
      default: '#f5f4fa',
      validator: (value: string) => {
        return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(value) || /^rgb(a)?/.test(value)
      }
    }
  },
  setup (props, { slots }) {
    return {
      slots
    }
  }
})
</script>
<style lang="less" scoped>
.activity-card {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 90px;
  width: 100%;
  box-sizing: border-box;
  border: 2px solid #edf4fe;
  border-radius: 10px;
  background-color: v-bind('backgroundColor');
  &-icon {
    margin: 0 14px;
    flex-shrink: 0;
  }
  &-title {
    margin-bottom: 14px;
    font-weight: bold;
    font-size: 16px;
    font-family: SourceHanSansSC;
  }
  &-subtitle {
    display: inline-block;
    margin-right: 8px;
    font-size: 14px;
    color: #97918b;
  }
  &-primary {
    display: inline-block;
    margin-right: 14px;
    font-size: 18px;
    font-weight: bold;
    color: #145fdb;
    min-width: 60px;
  }
  &-warning {
    display: inline-block;
    margin-right: 4px;
    font-size: 18px;
    font-weight: bold;
    color: #fa245c;
  }
}

</style><template>
  <div class="rectangleo">
    <dl>
      <dt>
        <!-- <img :src="props.cardInfo.img" alt="logo" /> -->
        <slot name="ImgSolt"></slot>
      </dt>
      <dd>
        <div class="dd-num">
          <span>{{ props.cardInfo.text }}</span>
          <b>{{ props.cardInfo.num }}</b>
          {{ props.cardInfo.unit }}
        </div>
      </dd>
    </dl>
  </div>
</template>
<script setup lang="ts">
import { defineProps, onMounted, ref } from 'vue';
onMounted(() => {
  console.log(props)
})

const props = defineProps({
  cardInfo: {
    type: Object as PropType<{ color: string, text: string, num: number, unit: string, img: string }>,
    required: true
  }
});
// const img = ref(props.cardInfo.img);
const isColor = ref(props.cardInfo.color);
</script>
<style scoped lang="less">
div {
  width: 315px;
  height: 90px;
  border-radius: 10px;
  margin-right: 15px;

  b {
    font-size: 28px;
    margin: 0 10px;
  }
}

dl {
  display: flex;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;

  dt {
    width: 48px;
    height: 48px;
    margin-right: 20px;
  }

  dd {
    .dd-num {
      width: 170px;
      display: flex;
      justify-content: center;
      align-items: center;

      >span {
        font-weight: 600;
      }
    }
  }
}

.rectangleo {
  box-shadow: 0px 2px 6px 0px rgba(114, 139, 255, 35);
  border: 1px solid v-bind('isColor');

  b {
    color: v-bind('isColor');
  }
}

// .rectangleg {
//   box-shadow: 0px 2px 6px 0px rgba(114, 139, 255, 35);
//   border: 1px solid rgba(48, 196, 171, 100);

//   b {
//     color: #138172;
//   }
// }

// .rectangler {
//   box-shadow: 0px 2px 6px 0px rgba(114, 139, 255, 35);
//   border: 1px solid rgba(56, 191, 212, 100);

//   b {
//     color: #38BFD4;
//   }
// }
</style>
<template>
  <div class="rectangleb">
    <span class="top-right-icon"><img src="@/assets/images/icon-i.png" alt="">{{ props.cardInfo.percentage }}%</span>
    <div class="text-box">
      <div class="left-img">
        <slot name="ImgSolt"></slot>
        <span>{{ props.cardInfo.level }}</span>
      </div>
      <div class="right-text">
        <div><i>{{ props.cardInfo.relevantNum }}</i><span class="card-text">/</span><i class="ard-text-i">{{
          props.cardInfo.haveCardNum
        }}</i></div>
        <p><span class="text-right-span">相关人员</span><span>有生物安全培训合格证</span></p>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { defineProps, ref } from 'vue';
type CardInfoType = {
  textColor: string,
  leftTextColor: string,
  leftBgColor: string,
  level: string,
  relevantNum: string | number,
  haveCardNum: string | number,
  percentage: string | number,
}
const props = defineProps({
  cardInfo: {
    type: Object as PropType<CardInfoType>,
    default: () => ({
      textColor: '',
      leftTextColor: '',
      leftBgColor: '',
      level: '职称',
      relevantNum: 0,
      haveCardNum: 0,
      percentage: 0,
    })
  },
})
const textColor = ref(props.cardInfo.textColor);
const leftTextColor = ref(props.cardInfo.leftTextColor);
const leftBgColor = ref(props.cardInfo.leftBgColor);
</script>
<style scoped lang="less">
.rectangleb {
  width: 384px;
  height: 90px;
  border-radius: 8px;
  position: relative;

  .top-right-icon {
    position: absolute;
    right: 0;
    display: inline-block;
    width: 68px;
    height: 20px;
    line-height: 20px;
    border-radius: 0px 8px 0px 8px;
    background-color: #CFE0F8;
    text-align: center;
    font-size: 12px;
    color: #2B80FF;

    img {
      display: inline-block;
      margin: 0 2px 2px 0;
    }
  }

  .text-box {
    width: 100%;
    height: 100%;
    padding: 10px 15px;
    box-sizing: border-box;
    display: flex;

    .left-img {
      margin-right: 30px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;

      span {
        width: 77px;
        height: 20px;
        line-height: 20px;
        border-radius: 100px;
        text-align: center;
        font-size: 12px;
        display: inline-block;
      }
    }

    .right-text {
      font-size: 20px;

      i {
        font-size: 36px;
        margin: 5px 15px;
        font-weight: 600;
      }

      .card-text {
        font-size: 20px;
      }

      span {
        font-size: 12px;
        color: #8B8B8B;
      }

      .text-right-span {
        margin: 0 20px;
      }

      .ard-text-i {
        color: #5A9CFF;
      }

      p {
        margin-top: -15px;
      }
    }
  }
}

.rectangleb {
  border: 1px solid v-bind('textColor');
  background-image: linear-gradient(to right, #fff, v-bind('leftBgColor'));

  .left-img span {
    background-color: v-bind('leftBgColor');
    color: v-bind('leftTextColor');
  }
}
</style><template>
  <div>
    <span class="left-text"><span>{{ props.cardInfo.text }}</span><b>{{ props.cardInfo.num }}</b>{{
      props.cardInfo.unit
    }}</span>
    <span class="left-rectangle"></span>
  </div>
</template>
<script setup lang="ts">
import { defineProps, onMounted, ref } from 'vue';
onMounted(() => {
  console.log(props)
})

const props = defineProps({
  cardInfo: {
    type: Object as PropType<{ color: string, text: string, num: number, unit: string }>,
    default: () => ({
      color: '#0052d9',
      text: '标题',
      number: 0,
      unit: '个'
    })
  }
});

const is = ref(props.cardInfo.color);

</script>
<style lang="less" scoped>
div {
  min-width: 200px;
  width: 244px;
  height: 90px;
  border-radius: 8px;
  border: 1px solid rgba(0, 82, 217, 100);
  position: relative;
  display: flex;
  justify-content: center;

  .left-text {
    display: flex;
    justify-content: center;
    align-items: center;

    >span {
      display: inline-block;
      width: 100px;
      text-align: left;
    }
  }

  b {
    font-size: 28px;
    padding: 0 10px;
    color: #0052D9;
  }

  .left-rectangle {
    position: absolute;
    left: 0;
    top: 5px;
    display: inline-block;
    width: 5px;
    height: 74px;
    line-height: 20px;
    border-radius: 0px 3px 3px 0px;
    background-color: v-bind('is');
  }
}

.card-box-b {
  display: flex;
  margin: 10px 0;
  padding-bottom: 20px;
  border-bottom: solid 1px #DCE0E7;

  >div {
    width: 241px;
    height: 105px;
    border-radius: 10px;
    margin-right: 15px;
    background-color: rgba(255, 255, 255, 100);
    padding: 15px;

    b {
      font-size: 28px;
      width: 72px;
      height: 34px;
      margin-right: 5px
    }
  }

  dl {
    display: flex;
    width: 100%;
    height: 100%;

    dt {
      width: 76px;
      height: 76px;
      margin-right: 30px;
    }

    dd {
      .dd-name {
        width: 80px;
        height: 24px;
        margin-bottom: 15px;
        font-size: 16px;
      }

      .dd-num {
        width: 85px;
        height: 34px;
      }
    }
  }

  .purple {
    box-shadow: 0px 2px 5px -1px rgba(114, 139, 255, 35);
    border: 1px solid rgba(0, 82, 217, 100);

    b {
      color: #728BFF;
    }
  }

  .green {
    box-shadow: 0px 2px 6px 0px rgba(114, 139, 255, 35);
    border: 1px solid rgba(48, 196, 171, 100);

    b {
      color: #138172;
    }
  }

  .blue {
    box-shadow: 0px 2px 6px 0px rgba(114, 139, 255, 35);
    border: 1px solid rgba(56, 191, 212, 100);

    b {
      color: #38BFD4;
    }
  }

}
</style>export { CustomModal, useModal } from './useCustomModal'

<script lang="tsx">
import { ref, defineComponent, watch, h, VNode, PropType } from 'vue'
import { Modal } from 'ant-design-vue'
import { ExclamationCircleOutlined } from '@ant-design/icons-vue'
import { CustomModalProps } from './types'
import { AButton } from '@/framework/components/basic/button'
import { BtnType } from '@/framework/components/basic/button/types/customButtonProps'
export default defineComponent({
  components: {
    ExclamationCircleOutlined
  },
  props: {
    title: {
      type: String,
      default: ''
    },
    content: {
      type: String,
      default: '内容',
    },
    onCancel: {
      type: Function,
    },
    onOk: {
      type: Function,
    },
    visible: {
      type: Boolean,
      default: false
    },
    width: {
      type: Number,
      default: 416
    },
    type: {
      type: String as PropType<'info' | 'success' | 'error' | 'warn' | 'warning' | 'confirm'>,
      default: 'info'
    },
    cancelText: {
      type: String,
      default: '取消'
    },
    okText: {
      type: String,
      default: '确定'
    },
    okButtonType: {
      type: String as PropType<BtnType>,
      default: 'blue-white'
    },
    cancelButtonType: {
      type: String as PropType<BtnType>,
      default: 'white-blue'
    }
  },
  setup(props: CustomModalProps) {
    const visible = ref(props.visible)
    const getTitle = () => {
      if (props.title) {
        return <span class="modal-title">{props.title}</span>
      }
      return
    }
    const getContent = () => {
      if (props.content) {
        return <div class="modal-content">{props.content}</div>
      }
      return
    }
    const getFooter = () => {
      if (props.type === 'confirm') {
        return <>
          <AButton type={props.cancelButtonType} style="margin-right:10px;" onClick={onCancelFn}>{props.cancelText}</AButton>
          <AButton type={props.okButtonType} onClick={onOkFn}>{props.okText}</AButton>
        </>
      }
      return <AButton type={props.okButtonType} onClick={onOkFn}>{props.okText}</AButton>
    }
    const IconColorMap = {
      info: '#1890ff',
      confirm: '#faad14',
      warn: '#faad14',
      warning: '#faad14',
      error: '#ff4d4f',
      success: '#52c41a'
    }
    const getIcon = () => {
      if (props.icon instanceof Function) {
        return h(props.icon() as VNode, {
          style: {
            fontSize: '22px',
            color: IconColorMap[props.type!],
            marginRight: '16px',
            float: 'left',
          }
        })
      } else {
        return h(props.icon as VNode, {
          style: {
            fontSize: '22px',
            color: IconColorMap[props.type!],
            marginRight: '16px',
            float: 'left',
          }
        })
      }
    }
    const onCancelFn = (e) => {
      props.onCancel && props.onCancel(e)
      visible.value = false
    }
    const onOkFn = (e) => {
      props.onOk && props.onOk(e)
      visible.value = false
    }
    watch(() => props.visible, () => {
      visible.value = props.visible
    })
    return () => (
      <Modal closable={false} title={null} visible={visible.value} mask-closable={false} width={props.width}
        footer={null}>
        <div class="modal-confirm-body">
          {getIcon()}
          {/* <ExclamationCircleOutlined style="font-size: 22px; color: #faad14;margin-right: 16px;float: left" /> */}
          {getTitle()}
          {getContent()}
        </div>
        <div class="modal-footer">
          {getFooter()}
        </div>
      </Modal>
    )
  }
})

</script>
<style scoped lang="less">
.modal-footer {
  display: flex;
  justify-content: flex-end;
  margin-top: 24px;
}

.modal-title {
  overflow: hidden;
  color: #000000d9;
  font-weight: 500;
  font-size: 16px;
  line-height: 1.4;
}

.modal-content {
  margin-left: 38px;
  margin-top: 8px;
  color: #000000d9;
  font-size: 14px;
  line-height: 1.5715;
  word-wrap: break-word;
}
</style>import { ModalFuncProps } from 'ant-design-vue'
import { BtnType } from '@/framework/components/basic/button/types/customButtonProps'
type CustomModalPropsUnion =
  | 'content' | 'title' | 'onCancel' | 'onOk'
  | 'visible' | 'width' | 'type' | 'cancelText' | 'okText' | 'icon'
export type CustomModalProps = Pick<Partial<ModalFuncProps>, CustomModalPropsUnion> & {
  cancelButtonType?: BtnType,
  okButtonType?: BtnType
}import type { App, ComponentInternalInstance } from 'vue';
import { createVNode, render, getCurrentInstance, nextTick } from 'vue';
import MyModal from './typed-modal.vue';
import { CustomModalProps } from './types'
import { ExclamationCircleOutlined, CheckCircleOutlined } from '@ant-design/icons-vue'
let _app: App;

export const useModal = () => {
  let _modalInstance: ComponentInternalInstance;
  const appContext = _app?._context || getCurrentInstance()?.appContext;

  const getModalInstance = () => {
    if (_modalInstance) {
      return _modalInstance;
    }
    const container = document.createElement('div');
    const vnode = createVNode(MyModal);
    vnode.appContext = appContext;
    render(vnode, container);
    _modalInstance = vnode.component!;
    return _modalInstance;
  };
  const confirm = async (props: CustomModalProps) => {
    const modalInstance = getModalInstance();
    Object.assign(modalInstance?.props, {
      ...props,
      type: 'confirm',
      visible: true,
      icon: createVNode(ExclamationCircleOutlined)
    });
    await nextTick();
  };
  const info = async (props) => {
    const modalInstance = getModalInstance();
    Object.assign(modalInstance?.props, {
      ...props,
      type: 'info',
      visible: true,
      icon: createVNode(ExclamationCircleOutlined)
    });
    await nextTick();
  };
  const success = async (props) => {
    const modalInstance = getModalInstance();
    Object.assign(modalInstance?.props, {
      ...props,
      type: 'success',
      visible: true,
      icon: createVNode(CheckCircleOutlined)
    });
    await nextTick();
  };
  const warn = async (props) => {
    const modalInstance = getModalInstance();
    Object.assign(modalInstance?.props, {
      ...props,
      type: 'warn',
      visible: true,
      icon: createVNode(ExclamationCircleOutlined)
    });
    await nextTick();
  };
  const warning = async (props) => {
    const modalInstance = getModalInstance();
    Object.assign(modalInstance?.props, {
      ...props,
      type: 'warning',
      visible: true,
      icon: createVNode(ExclamationCircleOutlined)
    });
    await nextTick();
  };
  return {
    confirm,
    info,
    success,
    warn,
    warning,
  };
};

export const CustomModal = {
  ...useModal()
}

export type ModalInstance = ReturnType<typeof useModal>;

export const install = (app: App) => {
  _app = app;
};

export default install;

<template>
  <SuperTable
    ref="superTableRef"
    pager
    search
    :show-card-header="false"
    border
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, Ref, computed } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import { getBacterialList, delBacterialData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const isEdit = inject<Ref<boolean>>('isEdit');
  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getBacterialList(params);
    return res;
    // return {
    //   data: [
    //     {id: '1', submitState: 1, processState: 1},
    //     {id: '2', submitState: 2, processState: 1},
    //     {id: '2', submitState: 3, processState: 1},
    //     {id: '2', submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定受理吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delBacterialData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  // #endregion end-数据源

  //

  // #endregion end
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>

<style scoped lang="less"></style>
<template>
  <AddressManage v-model:show-model="showModel" @address-change="addressChangeFn"></AddressManage>
  <Form
    ref="formRef"
    :model="baseInfo"
    :rules="rules"
    :label-col="{ span: 12 }"
    :wrapper-col="{ span: 10 }"
  >
    <!-- tag：第一行 -->
    <Row>
      <Col :span="6">
        <a-form-item label="单位名称" required name="companyName">
          <Input v-if="isEdit" v-model:value="baseInfo.companyName" />
          <span v-else>{{ baseInfo.companyName }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="实验室名称" required name="labName">
          <Input v-if="isEdit" v-model:value="baseInfo.labName" />
          <span v-else>{{ baseInfo.labName }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="所在行政区域" required name="divisionId">
          <TreeSelect
            v-if="isEdit || isDivisionEdit"
            v-model:value="baseInfo.divisionId"
            :show-search="false"
            style="width: 100%"
            :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
            placeholder="请选择行政区划"
            allow-clear
            tree-default-expand-all
            :tree-data="dividesList"
            :fieldNames="{ children: 'children', label: 'name', value: 'id' }"
          />
          <span v-else class="card">
            {{ showDividesList.find((item) => item.id === baseInfo.divisionId)?.name }}
          </span>
          <SvgIcon
            v-if="(processState === '2' || processState === '1') && auditStatus !== 2"
            style="display: inline-block"
            prefix="icon"
            name="bianjishuru-xianxing"
            @click="isDivisionEdit = true"
          ></SvgIcon>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="实验室所在地址" required name="address">
          <div v-if="isEdit" style="padding-top: 5px; display: flex">
            <img
              style="margin-right: 5px; width: 23px; height: 23px"
              src="@/assets/images/address.png"
              alt=""
              @click="showModel = true"
            />
            <span v-if="baseInfo.address?.address">{{ baseInfo.address?.address }}</span>
          </div>
          <span v-else>{{ baseInfo.address?.address }}</span>
        </a-form-item>
      </Col>
    </Row>
    <!-- tag：第二行 -->
    <Row>
      <Col :span="6">
        <a-form-item label="实验室负责人" required name="principal">
          <Input v-if="isEdit" v-model:value="baseInfo.principal" />
          <span v-else>{{ baseInfo.principal }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="负责人身份证" required name="principalIdcard">
          <Input v-if="isEdit" v-model:value="baseInfo.principalIdcard" />
          <span v-else>{{ baseInfo.principalIdcard }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="负责人职称" required name="principalTitle">
          <Input v-if="isEdit" v-model:value="baseInfo.principalTitle" />
          <span v-else>{{ baseInfo.principalTitle }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="联系方式" required name="principalContact">
          <Input v-if="isEdit" v-model:value="baseInfo.principalContact" />
          <span v-else>{{ baseInfo.principalContact }}</span>
        </a-form-item>
      </Col>
    </Row>
    <!--  tag：第三行 -->
    <Row>
      <Col :span="6">
        <a-form-item label="实验室总面积" required name="area">
          <Input v-if="isEdit" v-model:value="baseInfo.area" suffix="㎡" type="number" />
          <span v-else>{{ baseInfo.area }} m²</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="实验室类别" required name="labType">
          <Select
            v-if="isEdit"
            v-model:value="baseInfo.labType"
            :options="$dict.get('labCategory')"
            @change="baseInfo.labSubclass = []"
          />
          <span v-else>{{
            $dict.filter({
              key: 'labCategory',
              value: baseInfo.labType,
              fields: 'label',
            })
          }}</span>
        </a-form-item>
      </Col>
      <Col :span="12">
        <a-form-item
          label="实验室子类别"
          required
          name="labSubclass"
          :label-col="{ span: 6 }"
          :wrapper-col="{ span: 18 }"
        >
          <template v-if="isEdit">
            <Input
              v-if="baseInfo.labType === 6"
              v-model:value="baseInfo.labSubclass[0]"
              style="max-width: 170px"
            />
            <Select
              v-else
              v-model:value="baseInfo.labSubclass"
              mode="multiple"
              style="max-width: 170px"
              :dropdownMatchSelectWidth="false"
            >
              <a-select-option
                v-for="item in $dict.filter({
                  key: 'labCategory',
                  value: baseInfo.labType,
                  fields: 'children',
                })"
                :value="item.subValue"
                :key="item.subName"
                >{{ item.subName }}
              </a-select-option>
            </Select>
          </template>
          <template v-else>
            <div class="card" v-for="item in baseInfo.labSubclass" :key="item">{{ item }}</div>
          </template>
        </a-form-item>
      </Col>
    </Row>
    <!-- tag：第四行 -->
    <Row>
      <Col :span="12">
        <a-form-item
          :labelCol="{ span: 6 }"
          :wrapperCol="{ span: 21 }"
          label="生物安全级别"
          required
          name="safetyLevel"
        >
          <a-radio-group v-if="isEdit" v-model:value="baseInfo.safetyLevel">
            <a-radio
              v-for="item in $dict.get('BioSecurityLevel')"
              :key="item.label"
              :value="item.value"
              >{{ item.label }}
            </a-radio>
          </a-radio-group>
          <span v-else>{{
            $dict.filter({
              key: 'BioSecurityLevel',
              value: baseInfo.safetyLevel,
              fields: 'name',
            })
          }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="是否为负压实验室" required name="isNegativepressureLab">
          <a-radio-group v-if="isEdit" v-model:value="baseInfo.isNegativepressureLab">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
          <span v-else>{{
            baseInfo.isNegativepressureLab === undefined
              ? ''
              : baseInfo.isNegativepressureLab
              ? '是'
              : '否'
          }}</span>
        </a-form-item>
      </Col>
      <Col :span="6">
        <a-form-item label="是否为新冠核酸检测实验室" required name="isNovelcoronavirusLab">
          <a-radio-group v-if="isEdit" v-model:value="baseInfo.isNovelcoronavirusLab">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
          <span v-else>{{
            baseInfo.isNovelcoronavirusLab === undefined
              ? ''
              : baseInfo.isNovelcoronavirusLab
              ? '是'
              : '否'
          }}</span>
        </a-form-item>
      </Col>
    </Row>
    <!-- tag：第五行 -->
    <a-form-item
      :labelCol="{ span: 3 }"
      :wrapperCol="{ span: 21 }"
      label="实验室设施特点"
      required
      name="facilityCharacteristics"
    >
      <a-radio-group v-if="isEdit" v-model:value="baseInfo.facilityCharacteristics">
        <a-radio
          v-for="item in $dict.get('FacilityCharacteristics')"
          :key="item.label"
          :value="item.value"
          >{{ item.label }}
        </a-radio>
      </a-radio-group>
      <span v-else>{{
        $dict.filter({
          key: 'FacilityCharacteristics',
          value: baseInfo.facilityCharacteristics,
          fields: 'name',
        })
      }}</span>
    </a-form-item>
    <!-- tag：第六行-可选 -->
    <Row v-if="baseInfo.facilityCharacteristics && baseInfo.facilityCharacteristics !== 1">
      <Col :span="7">
        <a-form-item
          :labelCol="{ span: 10 }"
          :wrapperCol="{ span: 12 }"
          label="设施类型"
          required
          name="facilityType"
        >
          <a-radio-group v-if="isEdit" v-model:value="baseInfo.facilityType">
            <a-radio v-for="item in $dict.get('FacilityType')" :key="item.name" :value="item.value"
              >{{ item.name }}
            </a-radio>
          </a-radio-group>
          <span v-else>
            {{
              $dict.filter({ key: 'FacilityType', value: baseInfo.facilityType, fields: 'name' })
            }}
          </span>
        </a-form-item>
      </Col>
      <Col :span="3">
        <a-form-item required :wrapperCol="{ span: 24 }" name="facilityUnit">
          <Input
            v-if="isEdit"
            v-model:value="baseInfo.facilityUnit"
            placeholder="请输入设施产权所在单位"
          />
          <span v-else>{{ baseInfo.facilityUnit }}</span>
        </a-form-item>
      </Col>
      <Col :span="3" style="margin-left: 10px">
        <a-form-item required :wrapperCol="{ span: 24 }" name="facilityUnitUse">
          <Input
            v-if="isEdit"
            v-model:value="baseInfo.facilityUnitUse"
            placeholder="请输入设施使用单位"
          />
          <span v-else>{{ baseInfo.facilityUnitUse }}</span>
        </a-form-item>
      </Col>
    </Row>
    <!-- tag：第七行 -->
    <a-form-item
      :labelCol="{ span: 3 }"
      :wrapperCol="{ span: 240 }"
      label="是否进行动物感染实验"
      required
      name="isAnimalInfectionExperiment"
    >
      <a-radio-group v-if="isEdit" v-model:value="baseInfo.isAnimalInfectionExperiment">
        <a-radio :value="true">是</a-radio>
        <a-radio :value="false">否</a-radio>
      </a-radio-group>
      <span v-else>{{
        baseInfo.isAnimalInfectionExperiment === undefined
          ? ''
          : baseInfo.isAnimalInfectionExperiment
          ? '是'
          : '否'
      }}</span>
    </a-form-item>

    <!-- tag: 第八行-可选 -->
    <a-form-item
      v-if="baseInfo.isAnimalInfectionExperiment"
      :labelCol="{ span: 3 }"
      :wrapperCol="{ span: 240 }"
      label="实验动物使用许可证"
      required
      name="animalUsePermit"
    >
      <upload :is-one="false" :is-edit="isEdit" v-model:file-data="baseInfo.animalUsePermit" />
    </a-form-item>
    <!-- tag: 第九行 -->
    <a-form-item :labelCol="{ span: 3 }" :wrapperCol="{ span: 240 }" label="负责人任命佐证材料">
      <upload
        :is-one="false"
        :is-edit="isEdit"
        v-model:file-data="baseInfo.principalEvidenceMaterial"
      />
    </a-form-item>
    <!-- tag: 第十行 -->
    <a-form-item :labelCol="{ span: 3 }" :wrapperCol="{ span: 240 }" label="高致病性微生物泄露情况">
      <upload
        :is-one="false"
        :is-edit="isEdit"
        v-model:file-data="baseInfo.highPathogenicityLeakage"
      />
    </a-form-item>

    <!-- tag: 第十一行 -->
    <a-form-item
      :labelCol="{ span: 3 }"
      :wrapperCol="{ span: 240 }"
      label="备案实验室单元平面示意图"
      required
      name="floorPlan"
    >
      <upload :is-one="false" :is-edit="isEdit" v-model:file-data="baseInfo.floorPlan" />
    </a-form-item>
    <!-- tag: 第十二行 -->
    <a-form-item
      :labelCol="{ span: 3 }"
      :wrapperCol="{ span: 240 }"
      label="上传材料真实性承诺书"
      required
      name="letterOfAuthenticity"
    >
      <upload :is-one="false" :is-edit="isEdit" v-model:file-data="baseInfo.letterOfAuthenticity" />
    </a-form-item>
    <!-- 【审核机构显示】 -->
    <template v-if="processState !== '6'">
      <!-- tag: 第十三行-单位显示 -->
      <template v-if="processState === '5' && submitState === 2 && isOrg">
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 9 }"
          label="所属单位备案审批意见"
          required
          name="companyAuditOpinion"
        >
          <a-textarea v-model:value="baseInfo.companyAuditOpinion" :rows="3" />
        </a-form-item>
        <!-- tag: 第十四行 -->
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 5 }"
          label="单位审批人"
          name="companyAuditor"
        >
          <Row>
            <Col :span="12">
              <Input v-model:value="baseInfo.companyAuditor" />
            </Col>
          </Row>
        </a-form-item>
      </template>
      <!-- tag: 第十五行-市显示 -->
      <template v-if="processState === '3' && submitState === 2 && isOrg">
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 9 }"
          label="所属主管部门（市）备案审批意见"
          required
          name="cityAuditOpinion"
        >
          <a-textarea v-model:value="baseInfo.cityAuditOpinion" :rows="3" />
        </a-form-item>
        <!-- tag: 第十六行 -->
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 5 }"
          label="主管部门审批人"
          name="cityAuditor"
        >
          <Row>
            <Col :span="12">
              <Input v-model:value="baseInfo.cityAuditor" />
            </Col>
          </Row>
        </a-form-item>
      </template>
      <!-- tag: 第十七行-省显示 -->
      <template v-if="processState === '2' && submitState === 2 && isOrg">
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 9 }"
          label="所属主管部门（省）备案审批意见"
          required
          name="provinceAuditOpinion"
          >
          <a-textarea v-model:value="baseInfo.provinceAuditOpinion" :rows="3" />
        </a-form-item>
        <a-form-item
          :labelCol="{ span: 4 }"
          :wrapperCol="{ span: 5 }"
          label="主管部门审批人"
          name="provinceAuditor"
        >
          <Row>
            <Col :span="12">
              <Input v-model:value="baseInfo.provinceAuditor" />
            </Col>
          </Row>
        </a-form-item>
      </template>
    </template>
  </Form>
</template>

<script setup lang="ts">
  import Upload from '@/components/upload/index.vue';
  import { inject, watch, ref, computed, reactive } from 'vue';
  import { Form, Row, Col, Input, Select, TreeSelect } from 'ant-design-vue';
  import { getDivides } from '@/api/divide';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';
  import { useUserStore } from '@/store/modules/user';
  import AddressManage from '@/components/address-manage/index.vue';

  /**
   * 区域修改
   */
  const isDivisionEdit = ref(false);
  const showModel = ref(false);
  /**
   * 表单行政区划显示
   */
  // 区划树表
  const dividesList = ref();
  // 回显表
  const showDividesList = ref([]);
  getDivides().then((res) => {
    dividesList.value = res;
    showDividesList.value = treeToArr(res);
  });
  const treeToArr = (data, pid = -1, res = []) => {
    data.forEach((item) => {
      res.push({ parentId: pid, id: item.id, name: item.name });
      if (item.children && item.children.length !== 0) {
        treeToArr(item.children, item.id, res);
      }
    });
    return res;
  };

  /**
   * 数据
   */

  // 传入值
  const props = defineProps<{ baseInfo?: API.BaseInfo }>();
  const emits = defineEmits(['update:baseInfo']);
  const isEdit = inject<boolean>('isEdit');
  const isOrg = inject<boolean>('isOrg');
  const submitState = inject('submitState');
  const processState = inject('processState');
  const auditStatus = inject('auditStatus');

  // 表单dom
  const formRef = ref();

  /**
   * 表单
   */
  // const baseInfo = reactive(props.baseInfo ?? ({} as API.BaseInfo));
  const baseInfo = computed({
    get() {
      return props.baseInfo;
    },
    set(newValue) {
      emits('update:baseInfo', newValue);
    },
  });
  // watch(baseInfo, () => {
  //   emits('update:baseInfo', baseInfo);
  // });

  // 验证信息;
  const rules = {
    companyName: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    labName: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    divisionId: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    address: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    principal: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    principalIdcard: [
      { required: true, message: '值不能为空', trigger: 'blur' },
      {
        pattern:
          /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
        message: '请输入正确的身份证号码',
        trigger: 'blur',
      },
    ],
    principalTitle: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    principalContact: [
      { required: true, message: '值不能为空', trigger: 'blur' },
      {
        pattern: /^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d{8}$/,
        message: '请输入正确的手机号码',
        trigger: 'blur',
      },
    ],
    area: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    labType: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    labSubclass: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    safetyLevel: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    isNegativepressureLab: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    isNovelcoronavirusLab: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    facilityCharacteristics: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    facilityType: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    facilityUnit: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    facilityUnitUse: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    isAnimalInfectionExperiment: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    animalUsePermit: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    principalEvidenceMaterial: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    letterOfAuthenticity: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    highPathogenicityLeakage: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    floorPlan: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    companyAuditOpinion: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    cityAuditOpinion: [{ required: true, message: '值不能为空', trigger: 'blur' }],
    provinceAuditOpinion: [{ required: true, message: '值不能为空', trigger: 'blur' }],
  };

  // 表单验证
  const validateFieldsFn = async () => {
    try {
      await formRef.value.validateFields();
      return true;
    } catch (err) {
      return false;
    }
  };
  // 表单重置
  const resetFn = async () => {
    await formRef.value.resetFields();
  };

  const addressChangeFn = (params: { address: string; latitude: number; longitude: number }) => {
    baseInfo.value.address = params;
  };

  defineExpose({ validateFieldsFn, resetFn, isDivisionEdit });
</script>

<style scoped lang="less">
  .error-infos :deep(.ant-form-explain) {
    white-space: pre-line;
  }

  .card {
    display: inline-block;
    font-size: 12px;
    text-align: center;
    margin-right: 5px;
    min-width: 64px;
    border-radius: 5px;
    background-color: #e7e7e7;
  }
</style>
<template>
  <SuperTable
    ref="superTableRef"
    pager
    search
    :show-card-header="false"
    border
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, Ref, computed } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import { getEquipmentList, delEquipmentData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const emits = defineEmits(['watchData', 'editData']);
  const isEdit = inject<Ref<boolean>>('isEdit');

  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getEquipmentList(params);
    return res;
    // return {
    //   data: [
    //     {id: '1', submitState: 1, processState: 1},
    //     {id: '2', submitState: 2, processState: 1},
    //     {id: '2', submitState: 3, processState: 1},
    //     {id: '2', submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '查看',
            onClick() {
              emits('watchData', row);
            },
          },
          {
            label: '修改',
            disabled: !isEdit.value,
            onClick() {
              emits('editData', row);
            },
          },
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定删除吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delEquipmentData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  // #endregion end-数据源

  //

  // #endregion end
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>

<style scoped lang="less">
  :deep(.col--last) {
    button {
      display: inline-block;
    }
  }
</style>
<template>
  <SuperTable
    ref="superTableRef"
    pager
    search
    :show-card-header="false"
    border
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, Ref, computed } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import { getFungusList, delFungusData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const isEdit = inject<Ref<boolean>>('isEdit');

  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getFungusList(params);
    return res;
  };

  // 表格配置项
  let columns = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定删除吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delFungusData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>
<template>
  <Card v-show="showPage">
    <!-- 【1】 头部 -->
    <div class="header">
      <!-- 【1.1】 标题 -->
      <Space>
        <div class="title">实验室备案信息</div>
        <template v-if="!isOrg">
          <!-- 【1.1.1】 提交状态 -->
          <div v-if="auditStatus === -1" class="apply-btn">待提交</div>
          <div v-if="auditStatus === 0 || auditStatus === 1" class="apply-btn">待审核</div>
          <div v-if="auditStatus === 2" class="success-btn">同意备案</div>
          <div v-if="auditStatus === 3" class="return-btn">已退回</div>
        </template>
        <!-- 【1.1.2】备案编号 -->
        <div v-if="auditStatus === 2 || auditStatus === 4" class="record-number">
          实验室备案编号 &nbsp; {{ state.labInfo?.certCode ?? '-' }}
        </div>
        <!-- 【1.1.3】 审批流 -->
        <ApprovalFlow
          v-if="auditStatus > -1 && approvalFlowData"
          :data="approvalFlowData"
          :name="state.labInfo.labName"
          :time="state.labInfo.auditApplyTime"
        />
      </Space>
      <!-- 【1.2】 按钮 -->
      <!-- 【1.2.1】 实验室编辑状态 -->
      <template v-if="!isOrg">
        <template v-if="!readonly">
          <!-- 编辑 -->
          <Space v-if="(auditStatus === -1 || auditStatus === 3) && isEdit">
            <AButton type="blue-white" @click="saveFn">
              <SvgIcon class="icon-btn" prefix="icon" name="baocun" />
              保存
            </AButton>
            <AButton type="blue-white" @click="submitFn">
              <SvgIcon class="icon-btn" prefix="icon" name="tijiao" />
              提交
            </AButton>
            <AButton type="white-blue" @click="router.back()"> 返回 </AButton>
          </Space>
          <!-- 浏览 -->
          <Space v-else-if="(auditStatus === -1 || auditStatus === 3) && !isEdit">
            <AButton type="blue-white" @click="editFn">
              <SvgIcon class="icon-btn" prefix="icon" name="xiugai" />
              修改
            </AButton>
            <AButton type="blue-white" @click="submitFn">
              <SvgIcon class="icon-btn" prefix="icon" name="tijiao" />
              提交
            </AButton>
            <AButton type="white-blue" @click="router.back()"> 返回 </AButton>
          </Space>
          <Space v-else>
            <AButton type="white-blue" @click="router.back()"> 返回 </AButton>
          </Space>
        </template>
        <AButton v-else type="white-blue" @click="router.back()"> 返回 </AButton>
      </template>
      <!-- 【1.2.2】 审核机构审核状态 -->
      <template v-else-if="!(route.query?.record === 'true')">
        <!-- 待审核 -->
        <Space v-if="submitState === 2">
          <AButton type="blue-white" @click="passFn">
            <SvgIcon class="icon-btn" prefix="icon" name="tongguo" />
            通过
          </AButton>
          <AButton type="white-blue" @click="returnFn">
            <SvgIcon class="icon-btn" prefix="icon" name="yanzhengshenhebutongguo" />
            退回
          </AButton>
          <AButton
            v-if="(processState === '2' || processState === '1') && auditStatus !== 2"
            type="white-blue"
            @click="changeFn"
          >
            <SvgIcon class="icon-btn" prefix="icon" name="hangzhengquhuaguanli" />
            修改保存行政区划
          </AButton>
          <AButton type="white-blue" @click="viewLogsFn">
            <SvgIcon class="icon-btn" prefix="icon" name="rizhi" />
            查看日志
          </AButton>
          <AButton type="white-blue" @click="backFn">
            <SvgIcon class="icon-btn" prefix="icon" name="fanhui" />
            返回
          </AButton>
        </Space>
        <!-- 已审核 -->
        <Space v-if="submitState === 3">
          <AButton :disabled="auditStatus !== 2" type="primary" @click="downloadFn">
            <SvgIcon class="icon-btn" prefix="icon" name="beian" />
            下载备案证明
          </AButton>
          <AButton
            v-if="(processState === '2' || processState === '1') && auditStatus !== 2"
            type="white-blue"
            @click="changeFn"
          >
            <SvgIcon class="icon-btn" prefix="icon" name="hangzhengquhuaguanli" />
            修改保存行政区划
          </AButton>
          <AButton type="white-blue" @click="viewLogsFn">
            <SvgIcon class="icon-btn" prefix="icon" name="rizhi" />
            查看日志
          </AButton>
          <AButton type="white-blue" @click="backFn">
            <SvgIcon class="icon-btn" prefix="icon" name="fanhui" />
            返回
          </AButton>
        </Space>
        <!-- 已退回-->
        <Space v-if="submitState === 4">
          <AButton type="white-blue" @click="viewLogsFn">
            <SvgIcon class="icon-btn" prefix="icon" name="rizhi" />
            查看日志
          </AButton>
          <AButton type="white-blue" @click="backFn">
            <SvgIcon class="icon-btn" prefix="icon" name="fanhui" />
            返回
          </AButton>
        </Space>
      </template>
      <!-- 凭证查看 -->
      <Space v-else>
        <AButton type="blue-white" @click="downloadFn">
          <SvgIcon class="icon-btn" prefix="icon" name="beian" />
          下载备案证明
        </AButton>
        <AButton type="white-blue" @click="backFn">
          <SvgIcon class="icon-btn" prefix="icon" name="fanhui" />
          返回
        </AButton>
      </Space>
    </div>
    <!-- 【2】 tabs -->
    <Tabs v-model:activeKey="activeKey">
      <!-- 一 -->
      <a-tab-pane :key="0" tab="基本信息">
        <BaseInfo ref="baseInfoRef" :base-info="state.labInfo" />
      </a-tab-pane>
      <!-- 二 -->
      <a-tab-pane :key="1" tab="病毒表">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <VirusInfo ref="virusInfoRef" />
      </a-tab-pane>
      <!-- 三 -->
      <a-tab-pane :key="2" tab="细菌放线菌表">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <BacteriaInfo ref="bacteriaInfoRef" />
      </a-tab-pane>
      <!-- 四 -->
      <a-tab-pane :key="3" tab="真菌表">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <FungusInfo ref="fungusInfoRef" />
      </a-tab-pane>
      <!-- 五 -->
      <a-tab-pane :key="4" tab="其他">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <OtherInfo ref="otherInfoRef" />
      </a-tab-pane>
      <!-- 六 -->
      <a-tab-pane :key="5" tab="设备配置表">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <EquipmentInfo ref="equipmentInfoRef" @edit-data="editDataFn" @watch-data="watchDataFn" />
      </a-tab-pane>
      <!-- 七 -->
      <a-tab-pane :key="6" tab="相关人员表">
        <div v-if="isEdit" class="add-btn-table">
          <a-button type="blue-white" @click="addFn">
            <template #icon>
              <SvgIcon class="icon-btn" prefix="icon" name="tianjia" />
            </template>
            添加
          </a-button>
        </div>
        <RelevantPersonnelInfo
          ref="relevantPersonnelInfoRef"
          @edit-data="editDataFn"
          @watch-data="watchDataFn"
        />
      </a-tab-pane>
    </Tabs>
    <!-- 【3】 添加弹层 -->
    <Modal v-model:visible="showAddModal" :centered="true" :width="900" :destroyOnClose="true" :maskClosable="false">
      <!--   标题   -->
      <template #title>
        <div style="text-align: center; font-weight: 700">
          {{ (isEdit ? '添加' : '') + title }}</div
        >
      </template>
      <!--   按钮   -->
      <template #footer>
        <template v-if="isEdit">
          <a-button key="back" @click="modalCancelFn">取消</a-button>
          <a-button key="back" @click="modalResetFn">重置</a-button>
          <a-button key="submit" type="blue-white" @click="modalSaveFn">保存</a-button>
        </template>
      </template>
      <!--   内容   -->
      <component
        ref="addModalRef"
        :is="modalContentComponents"
        :is-edit="addIsEdit"
        :data="addModalData"
      />
    </Modal>
    <!-- 【4】 日志弹层 -->
    <Modal
      v-model:visible="showLogModal"
      :width="900"
      :footer="null"
      :centered="true"
      :destroyOnClose="true"
    >
      <!--   标题   -->
      <template #title>
        <div style="text-align: center; font-weight: 700">查看日志</div>
      </template>
      <!--   表格   -->
      <SuperTable
        ref="superTableRef"
        search
        pager
        border
        :show-card-header="false"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
      />
    </Modal>
  </Card>
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import VirusForm from './modal/Virus.vue';
  import BacteriaForm from './modal/Bacteria.vue';
  import FungusForm from './modal/Fungus.vue';
  import OtherForm from './modal/Other.vue';
  import EquipmentForm from './modal/Equipment.vue';
  import RelevantPersonnelForm from './modal/RelevantPersonnel.vue';
  import ApprovalFlow from '@/components/approval-flow/index.vue';
  import BaseInfo from './base-info/BaseInfo.vue';
  import VirusInfo from './virus/VirusInfo.vue';
  import BacteriaInfo from './bacteria/BacteriaInfo.vue';
  import FungusInfo from './fungus/FungusInfo.vue';
  import OtherInfo from './other/OtherInfo.vue';
  import EquipmentInfo from './equipment/EquipmentInfo.vue';
  import RelevantPersonnelInfo from './relevant-personnel/RelevantPersonnelInfo.vue';
  import { Card, Space, Tabs, Modal, message } from 'ant-design-vue';
  import { ref, computed, withDefaults, provide, reactive, h } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';
  import {
    getLabInfo,
    addBacterialData,
    addEquipmentData,
    addFungusData,
    addOtherData,
    addPersonData,
    addVirusData,
    commitLabInfo,
    saveLabInfo,
    getApproveProcess,
    getLabLog,
    approveLabInfo,
    saveDivision,
    editEquipmentData,
    editPersonData,
  } from '@/modules/infoManagement/api/lab';
  import { useUserStore } from '@/store/modules/user';
  import dayjs from 'dayjs';
  import { searchCertFile } from '@/api/file';
  import { downloadFile } from '@/utils/file';
  /**
   * 通用数据
   */

  // 引用
  const props = withDefaults(defineProps<{ isOrg?: boolean }>(), { isOrg: false });
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();

  // DOM
  const baseInfoRef = ref();
  const superTableRef = ref();
  const addModalRef = ref();
  const virusInfoRef = ref();
  const bacteriaInfoRef = ref();
  const fungusInfoRef = ref();
  const otherInfoRef = ref();
  const equipmentInfoRef = ref();
  const relevantPersonnelInfoRef = ref();

  /**
   * 原始数据
   */

  const state = reactive({
    labInfo: {},
  });
  const approvalFlowData = ref({});
  // 表格配置项
  const columns = [
    {
      title: '操作',
      field: 'businessDesc',
      formatter: ({ row }) => {
        return `【${row.operation}】${row.businessDesc}`;
      },
    },
    {
      title: '操作时间',
      field: 'operateTime',
      formatter: ({ cellValue }) => {
        return dayjs(cellValue).format('YYYY-MM-DD');
      },
    },
    {
      title: '操作账号',
      field: 'operatorName',
    },
    {
      title: '状态',
      field: 'operationDetail',
    },
  ];
  // 添加弹层数据
  const addModalData = ref();
  const accId = computed(() => route.query.id);

  /**
   * 显示状态
   */
  const showPage = ref(false);
  // 当前节点
  const processState = userStore.roles[0].id;
  // 实验室信息总提交状态
  const auditStatus = computed(() => state.labInfo.auditStatus);
  // 当前节点提交状态
  const submitState = computed(() => {
    let value;
    const currentValue = Number(userStore.roles[0].id) + userStore.organization.level * 10;
    value = currentValue > state.labInfo.processState ? 3 : state.labInfo.submitState;
    if (auditStatus.value === 3) value = 4;
    if (auditStatus.value === 2) value = 3;
    return value;
  });
  // 是否展示用
  const isOrg = computed<boolean>(() => props.isOrg);
  // 编辑状态
  const isEdit = ref<boolean>(!isOrg.value);
  // 激活tab
  const activeKey = ref(0);
  // 添加弹层显示
  const showAddModal = ref<boolean>(false);
  // 日志弹层显示
  const showLogModal = ref<boolean>(false);
  let isAdd;
  const activeSubmitBtn = ref(false);
  const readonly = computed(() => {
    return route.query?.readonly;
  });
  /**
   * 基本信息数据请求
   */

  // 1. 请求主表
  const getLabInfoFn = async () => {
    let res = await getLabInfo(accId.value);
    showPage.value = true;
    if (!res.principalEvidenceMaterial) {
      res.principalEvidenceMaterial = [];
    }
    if (!res.letterOfAuthenticity) {
      res.letterOfAuthenticity = [];
    }
    if (!res.animalUsePermit) {
      res.animalUsePermit = [];
    }
    if (!res.highPathogenicityLeakage) {
      res.highPathogenicityLeakage = [];
    }
    if (!res.floorPlan) {
      res.floorPlan = [];
    }
    if (!res.auditStatus && res.auditStatus !== 0) {
      res.auditStatus = -1;
    }
    if (res.auditStatus > -1) {
      isEdit.value = false;
    }
    if (res.auditStatus === 2 || res.auditStatus === 3) {
      activeSubmitBtn.value = true;
    }
    state.labInfo = res;
  };
  getLabInfoFn();
  // 2. 保存数据
  const saveLabInfoFn = async () => {
    let params = {
      companyName: state.labInfo.companyName,
      labName: state.labInfo.labName,
      divisionId: state.labInfo.divisionId,
      address: state.labInfo.address,
      principal: state.labInfo.principal,
      principalIdcard: state.labInfo.principalIdcard,
      principalTitle: state.labInfo.principalTitle,
      principalContact: state.labInfo.principalContact,
      area: state.labInfo.area,
      labType: state.labInfo.labType,
      labSubclass: state.labInfo.labSubclass,
      safetyLevel: state.labInfo.safetyLevel,
      isNegativepressureLab: state.labInfo.isNegativepressureLab,
      isNovelcoronavirusLab: state.labInfo.isNovelcoronavirusLab,
      facilityCharacteristics: state.labInfo.facilityCharacteristics,
      facilityType: state.labInfo.facilityType,
      facilityUnit: state.labInfo.facilityUnit,
      facilityUnitUse: state.labInfo.facilityUnitUse,
      isAnimalInfectionExperiment: state.labInfo.isAnimalInfectionExperiment,
      animalUsePermit: state.labInfo?.animalUsePermit[0]
        ? state.labInfo.animalUsePermit.map((item) => item.id)
        : [],
      principalEvidenceMaterial: state.labInfo?.principalEvidenceMaterial[0]
        ? state.labInfo.principalEvidenceMaterial.map((item) => item.id)
        : [],
      letterOfAuthenticity: state.labInfo?.letterOfAuthenticity[0]
        ? state.labInfo.letterOfAuthenticity.map((item) => item.id)
        : [],
      highPathogenicityLeakage: state.labInfo?.highPathogenicityLeakage[0]
        ? state.labInfo.highPathogenicityLeakage.map((item) => item.id)
        : [],
      floorPlan: state.labInfo?.floorPlan[0] ? state.labInfo.floorPlan.map((item) => item.id) : [],
    };
    if (state.labInfo?.id) {
      params.id = state.labInfo.id;
    }
    const res = await saveLabInfo(params);
    if (!res.auditStatus && res.auditStatus !== 0) {
      res.auditStatus = -1;
    }
    if (res.auditStatus > -1) {
      isEdit.value = false;
    }
    state.labInfo = res;
    isEdit.value = false;
    message.success('数据保存成功！');
  };
  // 3. 提交数据
  const submitLabInfoFn = async () => {
    let params = {
      companyName: state.labInfo.companyName,
      labName: state.labInfo.labName,
      divisionId: state.labInfo.divisionId,
      address: state.labInfo.address,
      principal: state.labInfo.principal,
      principalIdcard: state.labInfo.principalIdcard,
      principalTitle: state.labInfo.principalTitle,
      principalContact: state.labInfo.principalContact,
      area: state.labInfo.area,
      labType: state.labInfo.labType,
      labSubclass: state.labInfo.labSubclass,
      safetyLevel: state.labInfo.safetyLevel,
      isNegativepressureLab: state.labInfo.isNegativepressureLab,
      isNovelcoronavirusLab: state.labInfo.isNovelcoronavirusLab,
      facilityCharacteristics: state.labInfo.facilityCharacteristics,
      facilityType: state.labInfo.facilityType,
      facilityUnit: state.labInfo.facilityUnit,
      facilityUnitUse: state.labInfo.facilityUnitUse,
      isAnimalInfectionExperiment: state.labInfo.isAnimalInfectionExperiment,
      animalUsePermit: state.labInfo.animalUsePermit.map((item) => item.id),
      principalEvidenceMaterial: state.labInfo.principalEvidenceMaterial[0]
        ? state.labInfo.principalEvidenceMaterial.map((item) => item.id)
        : [],
      letterOfAuthenticity: state.labInfo.letterOfAuthenticity.map((item) => item.id),
      highPathogenicityLeakage: state.labInfo.highPathogenicityLeakage[0]
        ? state.labInfo.highPathogenicityLeakage.map((item) => item.id)
        : [],
      floorPlan: state.labInfo.floorPlan.map((item) => item.id),
    };
    if (state.labInfo?.id) {
      params.id = state.labInfo.id;
    }
    try {
      const res = await commitLabInfo(params);
      state.labInfo = res;
      isEdit.value = false;
      message.success('数据提交成功！');
    } catch (error) {
      
    }
  };
  // 请求数审批流
  const getApproveProcessFn = async () => {
    const res = await getApproveProcess(accId.value);
    approvalFlowData.value = res;
  };
  getApproveProcessFn();

  /**
   * 添加弹层
   */

  // 【1】数据
  // 标题
  const title = computed(() => {
    let title;
    switch (activeKey.value) {
      case 1:
        title = '病毒';
        break;
      case 2:
        title = '细菌放线菌';
        break;
      case 3:
        title = '真菌';
        break;
      case 4:
        title = '其他';
        break;
      case 5:
        title = '设备配置';
        break;
      case 6:
        title = '相关人员';
        break;
    }
    return title;
  });
  // 组件
  const modalContentComponents = computed(() => {
    let modalContentComponents;
    switch (activeKey.value) {
      case 1:
        modalContentComponents = VirusForm;
        break;
      case 2:
        modalContentComponents = BacteriaForm;
        break;
      case 3:
        modalContentComponents = FungusForm;
        break;
      case 4:
        modalContentComponents = OtherForm;
        break;
      case 5:
        modalContentComponents = EquipmentForm;
        break;
      case 6:
        modalContentComponents = RelevantPersonnelForm;
        break;
    }
    return modalContentComponents;
  });
  // 【2】功能
  // 重置
  const modalResetFn = () => {
    addModalRef.value.resetFields();
  };
  // 保存
  const modalSaveFn = async () => {
    try {
      await addModalRef.value.formRef.validateFields();
      let params = {
        ...addModalRef.value.formState,
        accId: accId.value,
      };
      switch (activeKey.value) {
        case 1:
          await addVirusData(params);
          virusInfoRef.value.getNewData();
          break;
        case 2:
          await addBacterialData(params);
          bacteriaInfoRef.value.getNewData();
          break;
        case 3:
          await addFungusData(params);
          fungusInfoRef.value.getNewData();
          break;
        case 4:
          await addOtherData(params);
          otherInfoRef.value.getNewData();
          break;
        case 5:
          isAdd ? await addEquipmentData(params) : await editEquipmentData(params);
          equipmentInfoRef.value.getNewData();
          break;
        case 6:
          isAdd ? await addPersonData(params) : await editPersonData(params);
          relevantPersonnelInfoRef.value.getNewData();
          break;
      }
      message.success('保存成功');
      showAddModal.value = false;
    } catch (err) {
      console.log(err);
    }
  };
  // 取消
  const modalCancelFn = () => {
    showAddModal.value = false;
  };
  // 回显
  const editDataFn = (row) => {
    isAdd = false;
    addModalData.value = row;
    addIsEdit.value = true;
    showAddModal.value = true;
  };
  const addIsEdit = ref(false);
  const watchDataFn = (row) => {
    addModalData.value = row;
    addIsEdit.value = false;
    showAddModal.value = true;
  };

  /**
   * 日志弹层
   */

  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    // let id = route.query.id ?? userStore.userInfo.id;
    let id = route.query.id;
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      businessId: id,
    };
    let res = await getLabLog(params);
    return res;
  };

  /**
   * 审核通过、退回按钮显式逻辑
   */

  /**
   * 实验室按钮
   */

  // 1. 保存按钮
  const saveFn = () => {
    isEdit.value = false;
    saveLabInfoFn();
    activeSubmitBtn.value = false;
  };
  // 2. 提交按钮
  const submitFn = async () => {
    const isOk = await baseInfoRef.value.validateFieldsFn();
    if (isOk) {
      Modal.confirm({
        title: '实验室备案信息提交后所有信息均不可进行修改，是否确定提交备案信息',
        onOk: async () => {
          isEdit.value = false;
          await submitLabInfoFn();
          await getApproveProcessFn();
        },
      });
    } else {
      message.warning('存在未填项，请填写后重试！');
      isEdit.value = true;
    }
  };
  // 3. 修改按钮
  const editFn = () => {
    isEdit.value = true;
  };
  // 4. 添加按钮
  const addFn = () => {
    addModalData.value = {};
    isAdd = true;
    addIsEdit.value = true;
    showAddModal.value = true;
  };

  /**
   * 审核按钮
   */
  const username = computed(() => {
    let value;
    switch (userStore.roles[0].id) {
      case '5':
        value = state.labInfo.companyAuditor;
        break;
      case '3':
        value = state.labInfo.cityAuditor;
        break;
      case '2':
        value = state.labInfo.provinceAuditor;
        break;
    }
    return value;
  });
  const comments = computed(() => {
    let value;
    switch (userStore.roles[0].id) {
      case '5':
        value = state.labInfo.companyAuditOpinion;
        break;
      case '3':
        value = state.labInfo.cityAuditOpinion;
        break;
      case '2':
        value = state.labInfo.provinceAuditOpinion;
        break;
    }
    return value;
  });
  // 1. 返回按钮
  const backFn = () => {
    router.back();
  };
  // 2. 退回按钮
  const returnFn = async () => {
    const isOk = await baseInfoRef.value.validateFieldsFn();
    if (isOk) {
      if (!comments.value || comments.value.trim() === '')
        return message.warn('请正确填写审批意见');
      await approveLabInfo({
        userId: userStore.organization.id,
        labAccId: route.query.id as string,
        approveState: 3,
        username: username.value as string,
        comments: comments.value as string,
      });
      router.back();
      message.success(
        {
          content: h('span', null, ['实验室备案已退回，将进入已退回列表']),
        },
        3,
      );
    } else {
      message.warning('请正确填写审批意见！');
    }
  };
  // 3. 通过按钮
  const passFn = async () => {
    const isOk = await baseInfoRef.value.validateFieldsFn();
    if (isOk) {
      await approveLabInfo({
        userId: userStore.organization.id,
        labAccId: route.query.id as string,
        username: username.value as string,
        comments: comments.value as string,
        approveState: 2,
      });
      router.back();
      message.success(
        {
          content: h('span', null, ['实验室备案已通过，将进入已审核列表']),
        },
        3,
      );
    } else {
      message.warning('请正确填写审批意见！');
    }
  };
  // 4. 查看日志按钮
  const viewLogsFn = async () => {
    showLogModal.value = true;
  };
  // 5. 修改行政区
  const changeFn = async () => {
    let params = {
      id: route.query.id,
      divisionId: state.labInfo.divisionId,
    };
    await saveDivision(params);
    baseInfoRef.value.isDivisionEdit = false;
  };
  // 6. 下载按钮
  const downloadFn = async () => {
    const { certFileId } = await searchCertFile(state.labInfo);
    downloadFile({name: '', md5: certFileId})
  };

  // 导出
  provide('isEdit', isEdit);
  provide('isOrg', isOrg);
  provide('processState', processState);
  provide('submitState', submitState);
  provide('auditStatus', auditStatus);
</script>

<style scoped lang="less">
  :deep(.table-search) {
    display: none;
  }

  :deep(.ant-tabs-tab) {
    padding: 12px;
    margin-left: 20px;

    &:hover {
      border-radius: 3px;
      background-color: #edf0f7;
      color: #222;
    }
  }

  .add-btn-table {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 10px;
  }

  .icon-btn {
    margin-right: 5px;
    margin-top: 2px;
  }

  :deep(.ant-btn) {
    display: flex;
    align-items: center;
  }

  .header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;

    .title {
      font-weight: 700;
      font-family: 'SourceHanSansSC-bold';
    }

    .record-number {
      width: 226px;
      height: 34px;
      font-weight: 700;
      font-family: 'SourceHanSansSC-regular';
      line-height: 34px;
      text-align: center;
      color: #ff9800;
      border-radius: 10px;
      background-color: rgba(255, 245, 230, 100);
    }
  }
</style>
<template>
  <a-form
      ref="formRef"
      :model="formState"
      :rules="rules"
      :labelCol="{ span: 12 }"
      :wrapperCol="{ span: 10 }"
  >
    <!-- tag：第一行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="细菌放线菌类型" required name="bacterialType">
          <!--          <a-select ref="select" v-model:value="formState.type" placeholder="细菌放线菌类型">-->
          <!--            <a-select-option value="type1">type1</a-select-option>-->
          <!--            <a-select-option value="type2">type2</a-select-option>-->
          <!--            <a-select-option value="type3">type3</a-select-option>-->
          <!--          </a-select>-->
          <a-input v-model:value="formState.bacterialType" placeholder="细菌放线菌类型"/>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="名称" required :labelCol="rightLabel" name="bacterialName">
          <a-input v-model:value="formState.bacterialName" placeholder="名称"/>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第二行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="危害程度分类" required name="hazardClass">
          <a-input v-model:value="formState.hazardClass" placeholder="危害程度分类"/>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="大量活菌操作" required :labelCol="rightLabel" name="isLiveBecteriaOperation">
          <a-radio-group v-model:value="formState.isLiveBecteriaOperation">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第三行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="动物感染实验" required name="isAnimalInfectionExpe">
          <a-radio-group v-model:value="formState.isAnimalInfectionExpe">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="样本检测" required :labelCol="rightLabel" name="isSampleTesting">
          <a-radio-group v-model:value="formState.isSampleTesting">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第四行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="非感染性材料的操作" required name="isHandleInfectedMaterial">
          <a-radio-group v-model:value="formState.isHandleInfectedMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="可能存在潜在未知病毒" required :labelCol="rightLabel" name="isUnkownVirus">
          <a-radio-group v-model:value="formState.isUnkownVirus">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第五行 -->
    <a-row>
      <a-col>
        <a-form-item label="备注" :labelCol="{ span: 6 }" :wrapperCol="{ span: 15 }" name="memo">
          <a-textarea v-model:value="formState.memo" :rows="3"/>
        </a-form-item>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
import {FormInstance} from 'ant-design-vue';
import {inject, reactive, ref} from 'vue';


const formState = reactive({
  bacterialType: '',
  bacterialName: '',
  hazardClass: '',
  isLiveBecteriaOperation: '',
  isAnimalInfectionExpe: '',
  isSampleTesting: '',
  isHandleInfectedMaterial: '',
  isUnkownVirus: '',
  memo: '',
});
const rules = {
  bacterialType: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  bacterialName: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  hazardClass: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isLiveBecteriaOperation: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isAnimalInfectionExpe: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isSampleTesting: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isHandleInfectedMaterial: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isUnkownVirus: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
};
const formRef = ref<FormInstance>();
// const validateFieldsFn = async () => {
//   try {
//     await formRef.value?.validateFields();
//     return true;
//   } catch (errorInfo) {
//     return false;
//   }
// };
// const resetFieldsFn = () => {
//   formRef.value?.resetFields();
// };
const resetFields = () => {
  try {
    formRef.value?.resetFields()
  } catch (error) {
    
  }
}
defineExpose({formRef, formState, resetFields});
// 样式
const rightLabel = {span: 10};
</script>

<style scoped lang="less"></style>
<template>
  <a-form
    ref="formRef"
    :model="formState"
    :rules="rules"
    :labelCol="{ span: 12 }"
    :wrapperCol="{ span: 10 }"
  >
    <a-row>
      <a-col :span="4">
        <Upload
          v-model:file-list="fileList"
          list-type="picture-card"
          class="avatar-uploader"
          :show-upload-list="false"
          :action="baseUrl + '/file/'"
          :headers="headers"
          :before-upload="beforeUpload"
          @change="handleChange"
          :disabled="!isEdit"
        >
          <img v-if="imageUrl" :src="imageUrl" alt="avatar" class="img-text" />
          <div v-else>
            <img src="@/assets/images/shangchuanImg.png" alt="" class="ant-upload-imgBg" />
            <div class="ant-upload-text">上传设备照片</div>
          </div>
        </Upload>
        <div v-if="!imageUrl" class="ant-upload-description"
          >支持PNG、JPG格式上传，图片大小不超过5MB</div
        >
      </a-col>
      <a-col :span="20">
        <!-- tag：第一行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="设备类型" required name="type">
              <a-select
                :disabled="!isEdit"
                ref="select"
                v-model:value="formState.type"
                placeholder="请选择设备类型"
                :options="$dict.get('DeviceType')"
              />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="设备名称" required :labelCol="rightLabel" name="name">
              <a-input :disabled="!isEdit" v-model:value="formState.name" placeholder="设备名称" />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第二行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="购置日期" required name="purchaseDate">
              <a-date-picker
                v-model:value="formState.purchaseDate"
                :disabled="!isEdit"
                valueFormat="YYYY-MM-DD"
              />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item
              label="最近检定/校准日期"
              required
              :labelCol="rightLabel"
              name="lastTestTime"
            >
              <a-date-picker
                v-model:value="formState.lastTestTime"
                :disabled="!isEdit"
                valueFormat="YYYY-MM-DD"
              />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第三行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="规格型号" required name="specifications">
              <a-input v-model:value="formState.specifications" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="检定/校准周期" required :labelCol="rightLabel" name="testCycle">
              <InputNumber
                id="inputNumber"
                v-model:value="formState.testCycle"
                :min="1"
                style="width: 150px"
                addon-after="月"
                :disabled="!isEdit"
              />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第四行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="生产厂家" required name="manufacturer">
              <a-input v-model:value="formState.manufacturer" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="设备编号" required :labelCol="rightLabel" name="code">
              <a-input v-model:value="formState.code" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第五行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="国产设备" required name="isDomestic">
              <a-radio-group v-model:value="formState.isDomestic" :disabled="!isEdit">
                <a-radio :value="true">是</a-radio>
                <a-radio :value="false">否</a-radio>
              </a-radio-group>
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="设备状态" required name="status" :labelCol="rightLabel">
              <a-select
                ref="select"
                v-model:value="formState.status"
                placeholder="设备状态选择"
                :disabled="!isEdit"
                :options="$dict.get('ExtraDeviceStatus')"
              />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第六行 -->
        <a-row>
          <a-col>
            <a-form-item
              label="备注"
              :labelCol="{ span: 6 }"
              :wrapperCol="{ span: 16 }"
              name="remarks"
            >
              <a-textarea v-model:value="formState.remarks" :rows="3" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
        </a-row>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
  import { FormInstance, message, Upload, InputNumber } from 'ant-design-vue';
  import { reactive, ref, watch } from 'vue';
  import type { UploadChangeParam } from 'ant-design-vue';
  import dayjs, { Dayjs } from 'dayjs';
  import config from '@/config';
  import { ACCESS_TOKEN_KEY } from '@/framework/enums/cacheEnum';
  import { Storage } from '@/framework/utils/Storage';

  const props = defineProps({
    data: {
      type: Object,
      default: () => null,
    },
    isEdit: {
      type: Boolean,
      default: true,
    },
  });
  const isEdit = ref(props.isEdit);

  const formState = reactive({
    id: '',
    type: '',
    name: '',
    purchaseDate: '',
    lastTestTime: '',
    specifications: '',
    testCycle: '',
    manufacturer: '',
    code: '',
    status: '',
    imgUrl: '',
    remarks: '',
    isDomestic: false,
  });
  // const purchaseDate = ref<Dayjs>();
  // const lastTestTime = ref<Dayjs>();
  // watch(
  //   purchaseDate,
  //   () => {
  //     formState.purchaseDate = dayjs(purchaseDate.value).format('YYYY-MM-DD');
  //   },
  //   { immediate: true },
  // );
  // watch(
  //   lastTestTime,
  //   () => {
  //     formState.lastTestTime = dayjs(lastTestTime.value).format('YYYY-MM-DD');
  //   },
  //   { immediate: true },
  // );

  const rules = {
    type: [{ required: true, message: '该项为必填项', trigger: 'change' }],
    name: [{ required: true, message: '该项为必填项', trigger: 'change' }],
    purchaseDate: [
      {
        required: true,
        trigger: 'change',
        // validator: () => {
        //   if (formState.purchaseDate) {
        //     return Promise.resolve();
        //   } else {
        //     return Promise.reject('该项为必填项');
        //   }
        // },
        message: '该项为必填项'
      },
    ],
    lastTestTime: [
      {
        required: true,
        // validator: () => {
        //   if (formState.lastTestTime) {
        //     return Promise.resolve();
        //   }
        //   return Promise.reject('该项为必填项');
        // },
        trigger: 'change',
        message: '该项为必填项'
      },
    ],
    specifications: [{ required: true, message: '该项为必填项' }],
    testCycle: [{ required: true, message: '该项为必填项' }],
    manufacturer: [{ required: true, message: '该项为必填项' }],
    code: [{ required: true, message: '该项为必填项' }],
    status: [{ required: true, message: '该项为必填项' }],
    imgUrl: [{ required: true, message: '该项为必填项' }],
    isDomestic: [{required: true, message: '该项为必填项', trigger: 'change' }]
  };

  const formRef = ref<FormInstance>();

  if (Object.keys(props.data).length) {
    formState.id = props.data?.id;
    formState.name = props.data.name;
    formState.type = props.data.type;
    formState.purchaseDate = dayjs(props.data.purchaseDate);
    formState.lastTestTime = dayjs(props.data.lastTestTime);
    formState.specifications = props.data.specifications;
    formState.testCycle = props.data.testCycle;
    formState.manufacturer = props.data.manufacturer;
    formState.code = props.data.code;
    formState.status = props.data.status;
    formState.imgUrl = props.data.imgUrl;
    formState.remarks = props.data?.remarks;
    formState.isDomestic = props.data?.isDomestic;
    // purchaseDate.value = dayjs(props.data.purchaseDate);
    // lastTestTime.value = dayjs(props.data.lastTestTime);
  } else {
    formRef.value?.resetFields();
  }

  /**
   * 图片上传
   */
  const baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;
  const headers = {
    Authorization: Storage.get(ACCESS_TOKEN_KEY),
  };
  const fileList = ref([]);
  const loading = ref<boolean>(false);
  const imageUrl = ref<string>('');
  if (props.data?.imgUrl) {
    const baseUrl =
      process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;
    imageUrl.value = `${window.location.origin + baseUrl}/file/img/${props.data.imgUrl}`;
  } else {
    imageUrl.value = '';
  }
  const getBase64 = (img: Blob, callback: (base64Url: string) => void) => {
    const reader = new FileReader();
    reader.addEventListener('load', () => callback(reader.result as string));
    reader.readAsDataURL(img);
  };
  // 上传进度检查
  const handleChange = (info: UploadChangeParam) => {
    if (info.file.status === 'uploading') {
      loading.value = true;
      return;
    }
    if (info.file.status === 'done') {
      // Get this url from response in real world.
      getBase64(info.file.originFileObj!, (base64Url: string) => {
        imageUrl.value = base64Url;
        loading.value = false;
      });
      formState.imgUrl = info.file.response?.data.md5;
    }
    if (info.file.status === 'error') {
      loading.value = false;
      message.error('上传失败');
    }
  };
  // 图片类型检查
  const beforeUpload = (file) => {
    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
    if (!isJpgOrPng) {
      message.error('仅允许上传JPG和PNG类型图片!');
    }
    const isLt2M = file.size / 1024 / 1024 < 5;
    if (!isLt2M) {
      message.error('图片大小不超过5M!');
    }
    return isJpgOrPng && isLt2M;
  };
  const resetFields = () => {
    try {
      formRef.value?.resetFields();
      imageUrl.value = '';
      fileList.value = [];
      formState.imgUrl = '';
    } catch (error) {}
  };
  defineExpose({ formRef, formState, resetFields });
  // 样式
  const rightLabel = { span: 10 };
</script>

<style scoped lang="less">
  .avatar-uploader > :deep(.ant-upload) {
    width: 200px;
    height: 248px;

    .ant-upload-text {
      color: #0052d9;
      position: relative;
      top: 50px;
    }
  }

  .ant-upload-description {
    color: rgba(130, 143, 169, 100);
    font-size: 12px;
    font-family: SourceHanSansSC-regular;
  }

  .ant-upload-select-picture-card i {
    font-size: 32px;
    color: #999;
  }

  .img-text {
    width: 150px;
    height: auto;
  }

  .ant-upload-imgBg {
    position: relative;
    left: 17px;
    top: -30px;
    background: #fafafa;
  }

  .ant-upload-select-picture-card .ant-upload-text {
    margin-top: 8px;
    color: #666;
  }
</style>
<template>
  <a-form
      ref="formRef"
      :model="formState"
      :rules="rules"
      :labelCol="{ span: 12 }"
      :wrapperCol="{ span: 10 }"
  >
    <!-- tag：第一行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="真菌类型" required name="fungusType">
          <!--          <a-select ref="select" v-model:value="formState.type">-->
          <!--            <a-select-option value="type1">type1</a-select-option>-->
          <!--            <a-select-option value="type2">type2</a-select-option>-->
          <!--            <a-select-option value="type3">type3</a-select-option>-->
          <!--          </a-select>-->
          <a-input v-model:value="formState.fungusType" placeholder="真菌类型"/>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="真菌名称" required :labelCol="rightLabel" name="fungusName">
          <a-input v-model:value="formState.fungusName" placeholder="真菌名称"/>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第二行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="危害程度分类" required name="hazardClass">
          <!--          <a-select ref="select" v-model:value="formState.hazardClass">-->
          <!--            <a-select-option value="type1">type1</a-select-option>-->
          <!--            <a-select-option value="type2">type2</a-select-option>-->
          <!--            <a-select-option value="type3">type3</a-select-option>-->
          <!--          </a-select>-->
          <a-input v-model:value="formState.hazardClass" placeholder="危害程度分类"/>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="大量活菌操作" required :labelCol="rightLabel" name="isLiveFungusOperation">
          <a-radio-group v-model:value="formState.isLiveFungusOperation">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第三行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="动物感染实验" required name="isAnimalInfectionExpe">
          <a-radio-group v-model:value="formState.isAnimalInfectionExpe">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="样本检测" required :labelCol="rightLabel" name="isSampleTesting">
          <a-radio-group v-model:value="formState.isSampleTesting">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第四行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="非感染性材料的操作" required name="isHandleInfectedMaterial">
          <a-radio-group v-model:value="formState.isHandleInfectedMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第五行 -->
    <a-row>
      <a-col>
        <a-form-item label="备注" :labelCol="{ span: 6 }" :wrapperCol="{ span: 15 }" name="memo">
          <a-textarea v-model:value="formState.memo" :rows="3"/>
        </a-form-item>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
import {FormInstance} from 'ant-design-vue';
import {reactive, ref} from 'vue';

const formState = reactive({
  fungusType: '',
  fungusName: '',
  hazardClass: '',
  isLiveFungusOperation: '',
  isAnimalInfectionExpe: '',
  isSampleTesting: '',
  isHandleInfectedMaterial: '',
  memo: '',
});
const rules = {
  fungusType: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  fungusName: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  hazardClass: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isLiveFungusOperation: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isAnimalInfectionExpe: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isSampleTesting: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isHandleInfectedMaterial: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
};
const formRef = ref<FormInstance>();
// const validateFieldsFn = async () => {
//   try {
//     await formRef.value?.validateFields();
//     return true;
//   } catch (errorInfo) {
//     return false;
//   }
// };
// const resetFieldsFn = () => {
//   formRef.value?.resetFields();
// };

const resetFields = () => {
  try {
    formRef.value?.resetFields()
  } catch (error) {
    
  }
}

defineExpose({formRef, formState, resetFields});
// 样式
const rightLabel = {span: 10};
</script>

<style scoped lang="less"></style>
<template>
  <a-form
      ref="formRef"
      :model="formState"
      :rules="rules"
      :labelCol="{ span: 12 }"
      :wrapperCol="{ span: 10 }"
  >
    <!-- tag：第一行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="样本名称" required name="sampleName">
          <!--          <a-select ref="select" v-model:value="formState.type">-->
          <!--            <a-select-option value="type1">type1</a-select-option>-->
          <!--            <a-select-option value="type2">type2</a-select-option>-->
          <!--            <a-select-option value="type3">type3</a-select-option>-->
          <!--          </a-select>-->
          <a-input v-model:value="formState.sampleName" placeholder="样本名称"/>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="危害程度分类" required :labelCol="rightLabel" name="hazardClass">
          <a-input v-model:value="formState.hazardClass" placeholder="危害程度分类"/>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第二行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="大量活菌操作" required name="isLiveFungusOperation">
          <a-radio-group v-model:value="formState.isLiveFungusOperation">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="动物感染实验" required :labelCol="rightLabel" name="isAnimalInfectionExpe">
          <a-radio-group v-model:value="formState.isAnimalInfectionExpe">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第四行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="样本检测" required name="isSampleTesting">
          <a-radio-group v-model:value="formState.isSampleTesting">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item
            label="无感染性材料的实验"
            required
            :labelCol="rightLabel"
            name="isHandleInfectedMaterial"
        >
          <a-radio-group v-model:value="formState.isHandleInfectedMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第五行 -->
    <a-row>
      <a-col>
        <a-form-item label="备注" :labelCol="{ span: 6 }" :wrapperCol="{ span: 15 }" name="memo">
          <a-textarea v-model:value="formState.memo" :rows="3"/>
        </a-form-item>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
import {reactive, ref} from 'vue';
import {FormInstance} from 'ant-design-vue';

const formState = reactive({
  sampleName: '',
  hazardClass: '',
  isLiveFungusOperation: '',
  isAnimalInfectionExpe: '',
  isSampleTesting: '',
  isHandleInfectedMaterial: '',
  memo: '',
});
const rules = {
  sampleName: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  hazardClass: [
    {
      required: true,
      message: '该项为必填项',
      trigger: 'change',
    },
  ],
  isLiveFungusOperation: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isAnimalInfectionExpe: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isSampleTesting: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
  isHandleInfectedMaterial: [
    {
      required: true,
      message: '该项为必填项',
    },
  ],
};
const formRef = ref<FormInstance>();
// const validateFieldsFn = async () => {
//   try {
//     await formRef.value?.validateFields();
//     return true;
//   } catch (errorInfo) {
//     return false;
//   }
// };
// const resetFieldsFn = () => {
//   formRef.value?.resetFields();
// };
const resetFields = () => {
  try {
    formRef.value?.resetFields()
  } catch (error) {
    
  }
}
defineExpose({formRef, formState, resetFields });
// 样式
const rightLabel = {span: 10};
</script>

<style scoped lang="less"></style>
<template>
  <a-form
    ref="formRef"
    :model="formState"
    :rules="rules"
    :labelCol="{ span: 12 }"
    :wrapperCol="{ span: 10 }"
  >
    <a-row>
      <a-col :span="4">
        <Upload
          v-model:file-list="fileList"
          list-type="picture-card"
          class="avatar-uploader"
          :show-upload-list="false"
          :action="baseUrl + '/file/'"
          :headers="headers"
          :before-upload="beforeUpload"
          @change="handleChange"
          :disabled="!isEdit"
        >
          <img v-if="imageUrl" :src="imageUrl" alt="avatar" class="img-text" />
          <div v-else>
            <img src="@/assets/images/shangchuanImg.png" alt="" class="ant-upload-imgBg" />
            <div class="ant-upload-text">上传人员照片</div>
          </div>
        </Upload>
        <div v-if="!imageUrl" class="ant-upload-description"
          >支持PNG、JPG格式上传，图片大小不超过5MB</div
        >
      </a-col>
      <a-col :span="20">
        <!-- tag：第一行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="人员姓名" required name="name">
              <a-input v-model:value="formState.name" placeholder="人员姓名" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="人员性别" required :labelCol="rightLabel" name="sex">
              <a-radio-group v-model:value="formState.sex" :disabled="!isEdit">
                <a-radio :value="1">男</a-radio>
                <a-radio :value="2">女</a-radio>
              </a-radio-group>
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第二行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="出生日期" required name="birthDate">
              <a-date-picker
                v-model:value="formState.birthDate"
                :disabled="!isEdit"
                valueFormat="YYYY-MM-DD"
              />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item
              label="参加工作日期"
              required
              :labelCol="rightLabel"
              name="workDate"
              valueFormat="YYYY-MM-DD"
            >
              <a-date-picker v-model:value="formState.workDate" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第三行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="职称" required name="jobTitle">
              <a-select
                ref="select"
                v-model:value="formState.jobTitle"
                :disabled="!isEdit"
                :options="$dict.get('JobTitle')"
              />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="学历" required :labelCol="rightLabel" name="academic">
              <a-select
                ref="select"
                v-model:value="formState.academic"
                :disabled="!isEdit"
                :options="$dict.get('Academic')"
              />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第四行 -->
        <a-row>
          <a-col :span="12">
            <a-form-item label="所学专业" required name="major">
              <a-input v-model:value="formState.major" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
          <a-col :span="12">
            <a-form-item label="现从事岗位" required :labelCol="rightLabel" name="jobs">
              <a-select
                ref="select"
                v-model:value="formState.jobs"
                :disabled="!isEdit"
                :options="$dict.get('Job')"
              />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第五行 -->
        <a-row>
          <a-col :span="11">
            <a-form-item
              label="身份证号"
              :labelCol="{ span: 13 }"
              :wrapperCol="{ span: 12 }"
              required
              name="idcard"
            >
              <a-input v-model:value="formState.idcard" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
          <a-col :span="13">
            <a-form-item
              label="生物安全培训合格证号"
              :labelCol="{ span: 11 }"
              :wrapperCol="{ span: 9 }"
              name="certNum"
            >
              <a-input v-model:value="formState.certNum" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
        </a-row>
        <!-- tag：第六行 -->
        <a-row>
          <a-col>
            <a-form-item
              label="备注"
              :labelCol="{ span: 6 }"
              :wrapperCol="{ span: 15 }"
              name="remarks"
            >
              <a-textarea v-model:value="formState.remarks" :rows="3" :disabled="!isEdit" />
            </a-form-item>
          </a-col>
        </a-row>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
  import { reactive, ref } from 'vue';
  import { FormInstance, message, Upload } from 'ant-design-vue';
  import type { UploadChangeParam } from 'ant-design-vue';
  import dayjs from 'dayjs';
  import config from '@/config';
  import { ACCESS_TOKEN_KEY } from '@/framework/enums/cacheEnum';
  import { Storage } from '@/framework/utils/Storage';

  const props = defineProps({
    data: {
      type: Object,
      default: () => null,
    },
    isEdit: {
      type: Boolean,
      default: true,
    },
  });
  const isEdit = ref(props.isEdit);
  // 表单数据
  const formState = reactive({
    id: '',
    name: '',
    sex: '',
    birthDate: '',
    workDate: '',
    jobTitle: '',
    academic: '',
    major: '',
    jobs: '',
    idcard: '',
    certNum: '',
    imgUrl: '',
    remarks: '',
  });

  // const birthDate = ref<Dayjs>()
  // const workDate = ref<Dayjs>()
  // watch(birthDate, () => {
  //   formState.birthDate = dayjs(birthDate.value).format('YYYY-MM-DD')
  // }, {immediate: true})
  // watch(workDate, () => {
  //   formState.workDate = dayjs(workDate.value).format('YYYY-MM-DD')
  // }, {immediate: true})

  // 验证数据
  const rules = {
    name: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    sex: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    birthDate: [
      {
        required: true,
        // validator: () => {
        //   if (formState.birthDate) {
        //     return Promise.resolve();
        //   } else {
        //     return Promise.reject('该项为必填项');
        //   }
        // },
        trigger: 'change',
        message: '该项为必填项'
      },
    ],
    workDate: [
      {
        required: true,
        // validator: () => {
        //   if (formState.workDate) {
        //     return Promise.resolve();
        //   } else {
        //     return Promise.reject('该项为必填项');
        //   }
        // },
        trigger: 'change',
        message: '该项为必填项'
      },
    ],
    jobTitle: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    academic: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    major: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    jobs: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    idcard: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
      {
        pattern:
          /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
        message: '请输入正确的身份证号码',
        trigger: 'blur',
      },
    ],
  };
  // 表单dom
  const formRef = ref<FormInstance>();
  if (Object.keys(props.data).length) {
    formState.id = props.data?.id;
    formState.name = props.data.name;
    formState.sex = props.data.sex;
    formState.birthDate = dayjs(props.data.birthDate);
    formState.workDate = dayjs(props.data.workDate);
    formState.jobTitle = props.data.jobTitle;
    formState.academic = props.data.academic;
    formState.major = props.data.major;
    formState.jobs = props.data.jobs;
    formState.idcard = props.data.idcard;
    formState.certNum = props.data.certNum;
    formState.imgUrl = props.data.imgUrl;
    formState.remarks = props.data.remarks;
    // birthDate.value = dayjs(props.data.birthDate)
    // workDate.value = dayjs(props.data.workDate)
  } else {
    formRef.value?.resetFields();
  }
  /**
   * 图片上传
   */
  const baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;
  const headers = {
    Authorization: Storage.get(ACCESS_TOKEN_KEY),
  };
  const fileList = ref([]);
  const loading = ref<boolean>(false);
  const imageUrl = ref<string>('');
  if (props.data?.imgUrl) {
    const baseUrl =
      process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;
    imageUrl.value = `${window.location.origin + baseUrl}/file/img/${props.data.imgUrl}`;
  } else {
    imageUrl.value = '';
  }
  const getBase64 = (img: Blob, callback: (base64Url: string) => void) => {
    const reader = new FileReader();
    reader.addEventListener('load', () => callback(reader.result as string));
    reader.readAsDataURL(img);
  };
  // 上传进度检查
  const handleChange = (info: UploadChangeParam) => {
    if (info.file.status === 'uploading') {
      loading.value = true;
      return;
    }
    if (info.file.status === 'done') {
      // Get this url from response in real world.
      getBase64(info.file.originFileObj!, (base64Url: string) => {
        imageUrl.value = base64Url;
        loading.value = false;
      });
      formState.imgUrl = info.file.response?.data.md5;
    }
    if (info.file.status === 'error') {
      loading.value = false;
      message.error('上传失败');
    }
  };
  // 图片类型检查
  const beforeUpload = (file) => {
    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
    if (!isJpgOrPng) {
      message.error('仅允许上传JPG和PNG类型图片!');
    }
    const isLt2M = file.size / 1024 / 1024 < 5;
    if (!isLt2M) {
      message.error('图片大小不超过5M!');
    }
    return isJpgOrPng && isLt2M;
  };

  const resetFields = () => {
    console.log('r');
    try {
      formRef.value?.resetFields();
      imageUrl.value = '';
      fileList.value = [];
      formState.imgUrl = '';
    } catch (error) {}
  };

  defineExpose({ formRef, formState, resetFields });

  // 样式
  const rightLabel = { span: 10 };
</script>

<style scoped lang="less">
  .avatar-uploader > :deep(.ant-upload) {
    width: 200px;
    height: 248px;

    .ant-upload-text {
      color: #0052d9;
      position: relative;
      top: 50px;
    }

    .ant-upload-imgBg {
      position: relative;
      left: 17px;
      top: -30px;
      background: #fafafa;
    }
  }

  .ant-upload-description {
    width: 200px;
    color: rgba(130, 143, 169, 100);
    font-size: 12px;
    font-family: SourceHanSansSC-regular;
  }

  .ant-upload-select-picture-card i {
    font-size: 32px;
    color: #999;
  }

  .ant-upload-select-picture-card .ant-upload-text {
    margin-top: 8px;
    color: #666;
  }
</style>
<template>
  <a-form
    ref="formRef"
    :model="formState"
    :rules="rules"
    :labelCol="{ span: 12 }"
    :wrapperCol="{ span: 10 }"
  >
    <!-- tag：第一行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="病毒类型" required name="virusType">
          <!--          <a-select ref="select" v-model:value="formState.type" placeholder="病毒类型">-->
          <!--            <a-select-option value="type1">type1</a-select-option>-->
          <!--            <a-select-option value="type2">type2</a-select-option>-->
          <!--            <a-select-option value="type3">type3</a-select-option>-->
          <!--          </a-select>-->
          <a-input v-model:value="formState.virusType" placeholder="病毒类型" />
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="病毒名称" required :labelCol="rightLabel" name="virusName">
          <a-input v-model:value="formState.virusName" placeholder="病毒名称" />
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第二行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="分类学地位" required name="vertifyLevel">
          <a-input v-model:value="formState.vertifyLevel" placeholder="分类学地位" />
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item label="危害程度分类" required :labelCol="rightLabel" name="hazardClass">
          <a-input v-model:value="formState.hazardClass" placeholder="危害程度分类" />
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第三行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="病毒培养" required name="isVirusCultrue">
          <a-radio-group v-model:value="formState.isVirusCultrue">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item
          label="动物感染实验"
          required
          :labelCol="rightLabel"
          name="isAnimalInfectionExpe"
        >
          <a-radio-group v-model:value="formState.isAnimalInfectionExpe">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第四行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item
          label="未经培养的感染材料的操作"
          required
          name="isHandleNotCulttureInfectedMaterial"
        >
          <a-radio-group v-model:value="formState.isHandleNotCulttureInfectedMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item
          label="灭活材料的操作"
          required
          :labelCol="rightLabel"
          name="isHandleInactivateMaterial"
        >
          <a-radio-group v-model:value="formState.isHandleInactivateMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第五行 -->
    <a-row>
      <a-col :span="12">
        <a-form-item label="非感染性材料的操作" required name="isHandleInfectedMaterial">
          <a-radio-group v-model:value="formState.isHandleInfectedMaterial">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
      <a-col :span="12">
        <a-form-item
          label="可能存在潜在未知病毒"
          required
          :labelCol="rightLabel"
          name="isUnkownVirus"
        >
          <a-radio-group v-model:value="formState.isUnkownVirus">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
      </a-col>
    </a-row>
    <!-- tag：第六行 -->
    <a-row>
      <a-col>
        <a-form-item label="备注" :labelCol="{ span: 6 }" :wrapperCol="{ span: 15 }" name="memo">
          <a-textarea v-model:value="formState.memo" :rows="3" />
        </a-form-item>
      </a-col>
    </a-row>
  </a-form>
</template>

<script setup lang="ts">
  import { reactive, ref } from 'vue';
  import { FormInstance } from 'ant-design-vue';

  const formState = reactive({
    virusType: '',
    virusName: '',
    vertifyLevel: '',
    hazardClass: '',
    isVirusCultrue: '',
    isAnimalInfectionExpe: '',
    isHandleNotCulttureInfectedMaterial: '',
    isHandleInactivateMaterial: '',
    isHandleInfectedMaterial: '',
    isUnkownVirus: '',
    memo: '',
  });
  const rules = {
    virusType: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    virusName: [
      {
        required: true,
        message: '该项为必填项',
        trigger: 'change',
      },
    ],
    vertifyLevel: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    hazardClass: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isVirusCultrue: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isAnimalInfectionExpe: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isHandleNotCulttureInfectedMaterial: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isHandleInactivateMaterial: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isHandleInfectedMaterial: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    isUnkownVirus: [
      {
        required: true,
        message: '该项为必填项',
      },
    ],
    memo: [],
  };
  const formRef = ref<FormInstance>();
  // const validateFieldsFn = async () => {
  //   try {
  //     await formRef.value?.validateFields();
  //     return true;
  //   } catch (errorInfo) {
  //     return false;
  //   }
  // };
  // const resetFieldsFn = () => {
  //   formRef.value?.resetFields();
  // };
  const resetFields = () => {
    try {
      formRef.value?.resetFields();
    } catch (error) {}
  };
  defineExpose({ formRef, formState, resetFields });
  // 样式
  const rightLabel = { span: 10 };
</script>

<style scoped lang="less"></style>
<template>
  <SuperTable
    ref="superTableRef"
    search
    pager
    :show-card-header="false"
    border
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, Ref, computed } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import { getOtherList, delOtherData, delFungusData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const isEdit = inject<Ref<boolean>>('isEdit');

  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getOtherList(params);
    return res;
  };

  // 表格配置项
  let columns = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定删除吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delOtherData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  // #endregion end-数据源

  //

  // #endregion end
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>
<template>
  <SuperTable
    ref="superTableRef"
    search
    pager
    :show-card-header="false"
    border
    align="center"
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :query-form-default-show-item-count="5"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, Ref, computed } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import { getPersonList, delPersonData, delEquipmentData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const emits = defineEmits(['watchData', 'editData']);
  const isEdit = inject<Ref<boolean>>('isEdit');

  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getPersonList(params);
    return res;
  };

  // 表格配置项
  let columns = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '查看',
            onClick() {
              emits('watchData', row);
            },
          },
          {
            label: '修改',
            disabled: !isEdit.value,
            onClick() {
              emits('editData', row);
            },
          },
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定删除吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delPersonData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  // #endregion end-数据源

  //

  // #endregion end
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>
<style scoped lang="less">
  :deep(.col--last) {
    button {
      display: inline-block;
    }
  }
</style>
<template>
  <SuperTable
    ref="superTableRef"
    search
    pager
    headerTitle=""
    border
    align="center"
    :columns="columns"
    :show-card-header="false"
    :data-request="fetchData"
    :export-config="{}"
    :height="tableHeightComputed"
  />
</template>

<script setup lang="ts">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { inject, ref, computed, Ref } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { baseColumns } from './columns';
  import type { TableColumnItem } from './columns';
  import { getVirusList, delVirusData } from '@/modules/infoManagement/api/lab';
  import { message } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight?.value! - (isEdit?.value ? 150 : 110)
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const isEdit = inject<Ref<boolean>>('isEdit');

  /**
   * 表格
   */
  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      // accId: route.query.id ?? userStore.userInfo.id,
      accId: route.query.id,
    };
    let res = await getVirusList(params);
    return res;
  };
  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        return [
          {
            label: '删除',
            disabled: !isEdit.value,
            popConfirm: {
              title: '确定删除吗？',
              onCancel() {},
              async onConfirm() {
                try {
                  await delVirusData(row.id);
                  message.success('删除成功');
                  superTableRef.value?.refreshTable();
                } catch (err) {
                  console.log(err);
                }
              },
            },
          },
        ];
      },
    },
  ];
  // #endregion end-数据源

  //

  // #endregion end
  const getNewData = () => {
    superTableRef.value?.refreshTable();
  };
  defineExpose({ getNewData });
</script>
<template>
  <Card v-show="showPage">
    <!-- 【1】 头部 -->
    <div class="header">
      <!-- 【1.1】 标题 -->
      <Space>
        <div class="title">单位备案信息</div>
        <!-- 提交状态 -->
        <template v-if="!isOrg">
          <div v-if="auditStatus === -1" class="apply-btn">待提交</div>
          <div v-if="auditStatus === 0 || auditStatus === 1" class="apply-btn">待审核</div>
          <div v-if="auditStatus === 2" class="success-btn">同意备案</div>
          <div v-if="auditStatus === 3" class="return-btn">已退回</div>
        </template>
        <!--  审批流 -->
        <ApprovalFlow
          v-if="auditStatus > -1 && approvalFlowData"
          :type="1"
          :data="approvalFlowData"
          :name="state.unitInfo.companyName"
          :time="state.unitInfo.auditApplyTime"
        />
      </Space>
      <!-- 【1.2】 按钮 -->
      <!-- 实验室编辑状态 -->
      <template v-if="!isOrg">
        <template v-if="!readonly">
          <!-- 编辑 -->
          <Space v-if="(auditStatus === -1 || auditStatus === 3) && isEdit">
            <AButton type="blue-white" @click="saveFn">保存</AButton>
            <AButton type="blue-white" @click="submitFn">提交</AButton>
            <AButton type="white-blue" @click="router.back()">返回</AButton>
          </Space>
          <!-- 浏览 -->
          <Space v-else-if="(auditStatus === -1 || auditStatus === 3) && !isEdit">
            <AButton type="blue-white" @click="editFn">修改</AButton>
            <AButton type="blue-white" @click="submitFn">提交</AButton>
            <AButton type="white-blue" @click="router.back()">返回</AButton>
          </Space>
          <AButton v-else type="white-blue" @click="router.back()">返回</AButton>
        </template>
        <AButton v-else type="white-blue" @click="router.back()">返回</AButton>
      </template>
      <!-- 审核机构审核状态 -->
      <template v-else>
        <!-- 待审核 -->
        <Space v-if="submitState === 2">
          <Popconfirm title="您确定通过吗？" @confirm="passFn">
            <AButton type="blue-white">通过</AButton>
          </Popconfirm>
          <Popconfirm title="您确定退回吗？" @confirm="returnFn">
            <AButton type="white-blue">退回</AButton>
          </Popconfirm>
          <AButton type="white-blue" @click="backFn">返回</AButton>
        </Space>
        <!-- 已审核 -->
        <Space v-if="submitState === 3">
          <AButton type="white-blue" @click="backFn">返回</AButton>
        </Space>
        <!-- 已退回-->
        <Space v-if="submitState === 4">
          <AButton type="white-blue" @click="backFn">返回</AButton>
        </Space>
      </template>
    </div>
    <!--  地图  -->
    <AddressManage v-model:show-model="showAddressManage" @address-change="addressChangeFn" />
    <!-- 【2】 表单区域 -->
    <Form
      ref="formRef"
      name="time_related_controls"
      class="content"
      :model="state.unitInfo"
      :rules="rules"
      :labelCol="{
        xs: { span: 24 },
        sm: { span: 8 },
      }"
      :wrapperCol="{
        xs: { span: 24 },
        sm: { span: 16 },
      }"
    >
      <div class="form-title">基本信息</div>
      <!-- tag: 第一行 -->
      <Row>
        <Col :span="6">
          <a-form-item label="统一社会信用代码" name="creditCode" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.creditCode" disabled />
            <span v-else>{{ state.unitInfo.creditCode }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="单位名称" name="companyName" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.companyName" disabled />
            <span v-else>{{ state.unitInfo.companyName }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="单位地址" name="companyAddress" required>
            <!--            <a-input v-if="isEdit" v-model:value="state.unitInfo.companyAddress" />-->
            <div v-if="isEdit" style="padding-top: 5px; display: flex">
              <img
                style="margin-right: 5px; width: 23px; height: 23px"
                src="@/assets/images/address.png"
                alt=""
                @click="showAddressManage = true"
              />
              <span v-if="state.unitInfo.companyAddress?.address">{{
                state.unitInfo.companyAddress?.address
              }}</span>
            </div>
            <span v-else>{{ state.unitInfo.companyAddress?.address }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="邮政编码" name="zipCode" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.zipCode" />
            <span v-else>{{ state.unitInfo.zipCode }}</span>
          </a-form-item>
        </Col>
      </Row>
      <!-- tag: 第二行 -->
      <Row>
        <Col :span="6">
          <a-form-item label="行政区划" name="divisionId" required>
            <TreeSelect
              v-if="isEdit"
              v-model:value="state.unitInfo.divisionId"
              :show-search="false"
              style="width: 100%"
              :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
              placeholder="请选择行政区划"
              allow-clear
              tree-default-expand-all
              :tree-data="dividesList"
              :fieldNames="{ children: 'children', label: 'name', value: 'id' }"
            />
            <span v-else class="card">
              {{ showDividesList.find((item) => item.id === state.unitInfo.divisionId)?.name }}
            </span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="法人代表" name="legalRepresentative" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.legalRepresentative" />
            <span v-else>{{ state.unitInfo.legalRepresentative }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="法人身份证" name="legalRepresentativeId" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.legalRepresentativeId" />
            <span v-else>{{ state.unitInfo.legalRepresentativeId }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="法人电话" name="legalRepresentativePhone" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.legalRepresentativePhone" />
            <span v-else>{{ state.unitInfo.legalRepresentativePhone }}</span>
          </a-form-item>
        </Col>
      </Row>
      <!-- tag: 第三行 -->
      <Row>
        <Col :span="6">
          <a-form-item label="联系人" name="contactPerson" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.contactPerson" />
            <span v-else>{{ state.unitInfo.contactPerson }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="联系电话" name="contactPhone" required>
            <a-input v-if="isEdit" v-model:value="state.unitInfo.contactPhone" />
            <span v-else>{{ state.unitInfo.contactPhone }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="单位性质" name="companyNature" required>
            <a-select
              v-if="isEdit"
              v-model:value="state.unitInfo.companyNature"
              :options="companyNatureOptions"
              placeholder="单位性质"
            />
            <span v-else>{{
              companyNatureOptions.find(item => item.value == state.unitInfo.companyNature)?.label || ''
            }}</span>
          </a-form-item>
        </Col>
        <Col :span="6">
          <a-form-item label="单位级别" name="companyLevel" required>
            <a-select
              v-if="isEdit"
              v-model:value="state.unitInfo.companyLevel"
              :options="$dict.get('UnitLevel')"
              placeholder="单位级别"
            />
            <span v-else>{{
              $dict.filter({
                key: 'UnitLevel',
                value: state.unitInfo.companyLevel,
                fields: 'label',
              })
            }}</span>
          </a-form-item>
        </Col>
      </Row>
      <Row class="base-file">
        <Col span="6">
          <a-form-item label="法人证书" name="legalRepresentativeCert" required>
            <Upload :is-edit="isEdit" is-one v-model:file-data="state.unitInfo.legalRepresentativeCert"></Upload>
          </a-form-item>
        </Col>
        <Col span="6" class="aids-col">
          <a-form-item label="艾滋病等高致病性资质证明" name="highPathogeQualifyCert">
            <Upload :is-edit="isEdit" is-one v-model:file-data="state.unitInfo.highPathogeQualifyCert"></Upload>
          </a-form-item>
        </Col>
        <Col span="6">
          <a-form-item label="组织架构文件" name="orgStructureFile" required>
            <Upload :is-edit="isEdit" is-one v-model:file-data="state.unitInfo.orgStructureFile"></Upload>
          </a-form-item>
        </Col>
        <Col span="6" class="org-col">
          <a-form-item label="成立单位生物安全委员会的有效文件" name="validDocument">
            <Upload :is-edit="isEdit" is-one v-model:file-data="state.unitInfo.validDocument"></Upload>
          </a-form-item>
        </Col>
      </Row>
      <!--   file    -->
      <!--      <a-form-item-->
      <!--        :labelCol="{ span: 4 }"-->
      <!--        :wrapperCol="{ span: 240 }"-->
      <!--        label="法人证书"-->
      <!--        required=""-->
      <!--        name=""-->
      <!--      >-->
      <!--        <upload-->
      <!--          :is-one="false"-->
      <!--          :is-edit="isEdit"-->
      <!--          v-model:file-data="state.unitInfo.certificateOfLegalEntity"-->
      <!--        />-->
      <!--      </a-form-item>-->
      <!--      <a-form-item-->
      <!--        :labelCol="{ span: 4 }"-->
      <!--        :wrapperCol="{ span: 240 }"-->
      <!--        label="艾滋病等高致病性资质证明"-->
      <!--        required=""-->
      <!--        name=""-->
      <!--      >-->
      <!--        <upload-->
      <!--          :is-one="false"-->
      <!--          :is-edit="isEdit"-->
      <!--          v-model:file-data="state.unitInfo.certificateOfHighlyPathogenicQualification"-->
      <!--        />-->
      <!--      </a-form-item>-->
      <!--      <a-form-item-->
      <!--        :labelCol="{ span: 4 }"-->
      <!--        :wrapperCol="{ span: 240 }"-->
      <!--        label="组织架构文件"-->
      <!--        required=""-->
      <!--        name=""-->
      <!--      >-->
      <!--        <upload-->
      <!--          :is-one="false"-->
      <!--          :is-edit="isEdit"-->
      <!--          v-model:file-data="state.unitInfo.organizationStructureFile"-->
      <!--        />-->
      <!--      </a-form-item>-->
      <!--      <a-form-item-->
      <!--        :labelCol="{ span: 4 }"-->
      <!--        :wrapperCol="{ span: 240 }"-->
      <!--        label="成立单位生物安全委员会的有效文件"-->
      <!--        required=""-->
      <!--        name=""-->
      <!--      >-->
      <!--        <upload-->
      <!--          :is-one="false"-->
      <!--          :is-edit="isEdit"-->
      <!--          v-model:file-data="state.unitInfo.validDocumentsOfTheUnitSBiosafetyCommittee"-->
      <!--        />-->
      <!--      </a-form-item>-->
      <div class="form-title">医共体信息</div>
      <!-- tag: 第四行 -->
      <Row>
        <Col :span="6">
          <a-form-item label="是否医共体" name="isMedicalCommunity" required>
            <a-select
              v-if="isEdit"
              v-model:value="state.unitInfo.isMedicalCommunity"
              placeholder="是否医共体"
            >
              <a-select-option :value="true">是</a-select-option>
              <a-select-option :value="false">否</a-select-option>
            </a-select>
            <span v-else>{{
              state.unitInfo.isMedicalCommunity === undefined
                ? ''
                : state.unitInfo.isMedicalCommunity
                ? '是'
                : '否'
            }}</span>
          </a-form-item>
        </Col>
        <Col :span="6" v-if="state.unitInfo.isMedicalCommunity">
          <a-form-item label="是否医共主体" name="isMedicalSubject">
            <a-select
              v-if="isEdit"
              v-model:value="state.unitInfo.isMedicalSubject"
              placeholder="是否医共主体"
            >
              <a-select-option :value="true">是</a-select-option>
              <a-select-option :value="false">否</a-select-option>
            </a-select>
            <span v-else>{{
              state.unitInfo.isMedicalSubject === undefined
                ? ''
                : state.unitInfo.isMedicalSubject === false
                ? '否'
                : '是'
            }}</span>
          </a-form-item>
        </Col>
        <Col :span="6" v-if="state.unitInfo.isMedicalCommunity && !state.unitInfo.isMedicalSubject">
          <a-form-item label="医共体" name="medicalCommunity">
            <a-input v-if="isEdit" v-model:value="state.unitInfo.medicalCommunity" />
            <span v-else>{{ state.unitInfo.medicalCommunity }}</span>
          </a-form-item>
        </Col>
      </Row>
      <!-- tag: 第五行 -->
      <Row>
        <Col :span="6">
          <a-form-item label="是否附属医院" name="isAffiliatedHospital">
            <a-select
              v-if="isEdit"
              v-model:value="state.unitInfo.isAffiliatedHospital"
              placeholder="是否附属医院"
            >
              <a-select-option :value="true">是</a-select-option>
              <a-select-option :value="false">否</a-select-option>
            </a-select>
            <span v-else>{{
              state.unitInfo.isAffiliatedHospital === undefined
                ? ''
                : state.unitInfo.isAffiliatedHospital === false
                ? '否'
                : '是'
            }}</span>
          </a-form-item>
        </Col>
        <Col :span="6" v-if="state.unitInfo.isAffiliatedHospital">
          <a-form-item label="所属高校" name="affiliatedUniversity">
            <a-input v-if="isEdit" v-model:value="state.unitInfo.affiliatedUniversity" />
            <span v-else>{{ state.unitInfo.affiliatedUniversity }}</span>
          </a-form-item>
        </Col>
      </Row>
      <div class="form-title">安全管理体系文件</div>
      <Form ref="subFormRef" :model="state.unitInfo.systemFiles" :rules="rules">
        <a-form-item
          v-for="item in state.fileList"
          :key="item.typeName"
          :labelCol="{ span: 3 }"
          :wrapperCol="{ span: 240 }"
          :label="item.typeName"
          :required="item.isRequired"
          :name="item.typeName"
        >
          <upload
            :is-one="false"
            :is-edit="isEdit"
            :temp-file="item.tempFile"
            v-model:file-data="state.unitInfo.systemFiles[item.typeName]"
          />
        </a-form-item>
      </Form>
    </Form>
  </Card>
</template>

<script setup lang="ts">
  import ApprovalFlow from '@/components/approval-flow/index.vue';
  import AddressManage from '@/components/address-manage/index.vue';
  import Upload from '@/components/upload/index.vue';
  import { Card, Form, Space, Row, Col, Modal, message, TreeSelect, Popconfirm } from 'ant-design-vue';
  import { ref, reactive, computed, h, provide } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { getDivides } from '@/api/divide';
  import { useUserStore } from '@/store/modules/user';
  import {
    approveCompanyInfo,
    commitCompanyInfo,
    getCompanyInfo,
    saveCompanyInfo,
    getApproveProcess,
    getFileType,
  } from '@/modules/infoManagement/api/company';
import { getCompanyProperty } from '@/modules/provinceOrg/api/companyProperty';

  /**
   * 数据
   */
  // 引用
  const props = defineProps({
    isOrg: {
      type: Boolean,
      default: false,
    },
  });
  const router = useRouter();
  const route = useRoute();
  const userStore = useUserStore();
  const companyNatureOptions = ref<{label: string,value: string}[]>([])
  const getCompanyNatureOptions = async () => {
    const res = await getCompanyProperty({
      status: true
    })
    companyNatureOptions.value = res.map(item => {
      return {
        label: item.natureName,
        value: item.id
      }
    })
  }
  getCompanyNatureOptions()
  // 表单数据
  const state = reactive({
    unitInfo: {
      legalRepresentativeCert: [], // 法人证书
      highPathogeQualifyCert: [], // 艾滋病等高致病性资质证明
      orgStructureFile: [], // 组织架构文件
      validDocument: [], // 成立单位生物安全委员会的有效文件
      
      // auditApplyTime: '',
      // id: '',
      // auditStatus: -1,
      // processState: 3,
      // submitState: 0,
      // creditCode: '',
      // companyName: '',
      // companyAddress: '',
      // zipCode: '',
      // divisionId: '',
      // legalRepresentative: '',
      // legalRepresentativeId: '',
      // legalRepresentativePhone: '',
      // contactPerson: '',
      // contactPhone: '',
      // companyNature: '',
      // companyLevel: '',
      // isMedicalCommunity: null,
      // isMedicalSubject: null,
      // medicalCommunity: '',
      // isAffiliatedHospital: '',
      // affiliatedUniversity: '',
      // systemFiles: {}
    },
    fileList: [],
  });
  const rules = {
    creditCode: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    companyName: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    companyAddress: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    zipCode: [
      { required: true, message: '该项为必填项', trigger: 'blur' },
      {
        pattern: /^\d{6}$/,
        message: '请输入正确的邮政编码',
        trigger: 'blur',
      },
    ],
    divisionId: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    legalRepresentative: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    legalRepresentativeId: [
      { required: true, message: '该项为必填项', trigger: 'blur' },
      {
        pattern:
          /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
        message: '请输入正确的身份证号码',
        trigger: 'blur',
      },
    ],
    legalRepresentativePhone: [
      { required: true, message: '该项为必填项', trigger: 'blur' },
      {
        pattern: /^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d{8}$/,
        message: '请输入正确的手机号码',
        trigger: 'blur',
      },
    ],
    contactPerson: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    contactPhone: [
      { required: true, message: '该项为必填项', trigger: 'blur' },
      {
        pattern: /^1(3\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\d|9[0-35-9])\d{8}$/,
        message: '请输入正确的手机号码',
        trigger: 'blur',
      },
    ],
    companyNature: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    companyLevel: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    isMedicalCommunity: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    biosafetyManagementManual: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    safetyManual: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    programFile: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    recordForm: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    riskAssessmentReports: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    sop: [{ required: true, message: '该项为必填项', trigger: 'blur' }],

    // 2个基础文件
    orgStructureFile: [{ required: true, message: '该项为必填项', trigger: 'blur' }],
    legalRepresentativeCert: [{ required: true, message: '该项为必填项', trigger: 'blur' }]
  };
  const approvalFlowData = ref({});
  // const id = route.query.id ?? userStore.userInfo.id;
  const id = route.query.id;
  // dom
  const formRef = ref();
  const subFormRef = ref();
  // 页面显示状态
  const processState = userStore.roles[0].id;
  const showPage = ref(false);
  const submitState = computed(() => {
    let value;
    const currentValue = Number(userStore.roles[0].id) + userStore.organization.level * 10;
    value = currentValue > state.unitInfo.processState ? 3 : state.unitInfo.submitState;
    if (auditStatus.value === 3) value = 4;
    if (auditStatus.value === 2) value = 3;
    return value;
  });
  const auditStatus = computed(() => state.unitInfo.auditStatus);
  const isOrg = computed<boolean>(() => props.isOrg);
  const isEdit = ref<boolean>(!isOrg.value);
  const activeSubmitBtn = ref(false);
  const showAddressManage = ref(false);
  const readonly = computed(() => {
    return route.query?.readonly;
  });
  /**
   * 地图
   */
  const addressChangeFn = (params: { address: string; latitude: number; longitude: number }) => {
    state.unitInfo.companyAddress = params;
  };

  /**
   * 功能
   */
  // 请求体修正
  const changeParams = (params) => {
    let newParams = {};
    Object.keys(params).forEach((item) => {
      newParams[item] = params[item].map((sub) => sub.id);
    });
    return newParams;
  };
  /**
   * 表单行政区划显示
   */
  // 区划树表
  const dividesList = ref();
  // 回显表
  const showDividesList = ref([]);
  getDivides().then((res) => {
    dividesList.value = res;
    showDividesList.value = treeToArr(res);
  });
  const treeToArr = (data, pid = -1, res = []) => {
    data.forEach((item) => {
      res.push({ parentId: pid, id: item.id, name: item.name });
      if (item.children && item.children.length !== 0) {
        treeToArr(item.children, item.id, res);
      }
    });
    return res;
  };

  /**
   * 请求
   */
  // 请求数据
  const getUnitInfoFn = async () => {
    const res = await getCompanyInfo(id);
    showPage.value = true;
    if (!Object.keys(res).length) {
      res.creditCode = userStore.userInfo.username;
      res.companyName = userStore.userInfo.name;
      res.auditStatus = -1;
    }
    if (!res.creditCode) res.creditCode = userStore.userInfo.username;
    if (!res.companyName) res.companyName = userStore.userInfo.name;
    if (res.auditStatus > -1) isEdit.value = false;
    if (!res.systemFiles) res.systemFiles = {};
    if (res.auditStatus === 2 || res.auditStatus === 3) {
      activeSubmitBtn.value = true;
    }
    state.unitInfo = res;
  };
  // 保存数据
  const saveUnitInfoFn = async () => {
    const params = {
      ...state.unitInfo,
      id,
      systemFiles: changeParams(state.unitInfo.systemFiles),
      legalRepresentativeCert: state.unitInfo.legalRepresentativeCert.map(i => i.md5).join(','),
      highPathogeQualifyCert: state.unitInfo.highPathogeQualifyCert.map(i => i.md5).join(','),
      orgStructureFile: state.unitInfo.orgStructureFile.map(i => i.md5).join(','),
      validDocument: state.unitInfo.validDocument.map(i => i.md5).join(','),
    };
    const res = await saveCompanyInfo(params);
    message.success('数据保存成功');
    if (!res.systemFiles) res.systemFiles = {};
    state.unitInfo = res;
  };
  // 提交数据
  const submitUnitInfoFn = async () => {
    const params = {
      ...state.unitInfo,
      id,
      systemFiles: changeParams(state.unitInfo.systemFiles),
      legalRepresentativeCert: state.unitInfo.legalRepresentativeCert.map(i => i.md5).join(','),
      highPathogeQualifyCert: state.unitInfo.highPathogeQualifyCert.map(i => i.md5).join(','),
      orgStructureFile: state.unitInfo.orgStructureFile.map(i => i.md5).join(','),
      validDocument: state.unitInfo.validDocument.map(i => i.md5).join(','),
    };
    try {
      const res = await commitCompanyInfo(params);
      message.success('数据提交成功！');
      state.unitInfo = res;
    } catch (error) {
      
    }
    await getApproveProcessFn();
  };
  // 请求文件列表
  const getFileTypeFn = async () => {
    const res = await getFileType();
    state.fileList = res;
    let systemFiles = {};
    res.map((item) => {
      systemFiles[item.typeName] = [];
      if (item.isRequired) {
        rules[item.typeName] = [{ required: true, message: '该项为必填项', trigger: 'blur' }];
      }
    });
    state.unitInfo.systemFiles = systemFiles;
  };
  // 请求数审批流
  const getApproveProcessFn = async () => {
    const res = await getApproveProcess(id);
    approvalFlowData.value = res;
  };

  getUnitInfoFn();
  getFileTypeFn();
  getApproveProcessFn();

  /**
   * 单位端按钮功能
   */
  // 保存按钮
  const saveFn = () => {
    isEdit.value = false;
    saveUnitInfoFn();
    activeSubmitBtn.value = false;
  };
  // 提交按钮
  const submitFn = async () => {
    try {
      await Promise.all([formRef.value.validateFields(), subFormRef.value.validateFields()]);
      Modal.confirm({
        title: '实验室备案信息提交后所有信息均不可进行修改，是否确定提交备案信息',
        onOk: async () => {
          await submitUnitInfoFn();
          await getApproveProcessFn();
          isEdit.value = false;
        },
      });
    } catch (err) {
      message.warning('存在未填项或错填项，请修改后重试！');
      console.log(err);
    }
    isEdit.value = true;
  };
  // 修改按钮
  const editFn = () => {
    isEdit.value = true;
  };

  /**
   * 审核端按钮功能
   */
  // 返回按钮
  const backFn = () => {
    router.back();
  };
  // 退回按钮
  const returnFn = async () => {
    const params = {
      userId: userStore.organization.id,
      businessId: route.query.id as string,
      approveState: 3,
    };
    await approveCompanyInfo(params);
    router.back();
    message.success(
      {
        content: h('span', null, ['单位备案已退回，将进入已退回列表']),
      },
      3,
    );
  };
  // 通过按钮
  const passFn = async () => {
    const params = {
      userId: userStore.organization.id,
      businessId: route.query.id as string,
      approveState: 2,
    };
    await approveCompanyInfo(params);
    router.back();
    message.success(
      {
        content: h('span', null, ['单位备案已通过，将进入已审核列表']),
      },
      3,
    );
  };
  provide('isOrg', isOrg)
</script>

<style scoped lang="less">
  .header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;

    .title {
      display: flex;
      align-items: center;

      span {
        display: inline-block;
        margin-right: 10px;
        font-family: 'SourceHanSansSC-medium';
      }
    }
  }

  .content {
    // height: 700px;
    padding: 0 10px;
    overflow: auto;
  }

  .form-title {
    margin: 10px;
    font-size: 16px;
    font-weight: 700;
  }

  .card {
    display: inline-block;
    font-size: 12px;
    text-align: center;
    margin-right: 5px;
    min-width: 64px;
    border-radius: 5px;
    background-color: #e7e7e7;
  }
  .base-file:deep(.upload-item) {
    width: 250px !important;
  }
  .base-file:deep(.upload-item-span) {
    width: 154px !important; 
  }
  .base-file:deep(.ant-form-item-label > label) {
    height: 35px;
  }
  .base-file:deep(.ant-form-item-label) {
    white-space: pre-wrap;
  }
  .aids-col:deep(.ant-form-item-label > label) {
    width: 110px;
  }
  .org-col:deep(.ant-form-item-label > label) {
    width: 137px;
  }
</style>
<template>
  <div class="upload-box" :class="{ column: props.type }">
    <Upload
      v-if="props.isEdit"
      class="base-upload"
      :file-list="fileList"
      :show-upload-list="false"
      :custom-request="customRequest"
      :before-upload="beforeRequest"
    >
      <a-button
        v-if="props.isEdit"
        v-show="resList.length === 0 || !props.isOne"
        class="upload-btn"
      >
        <SvgIcon
          style="margin-right: 7px; transform: scale(5)"
          prefix="icon"
          name="caogao-bianji-wenjian-04"
        />
        上传文件
      </a-button>
    </Upload>
    <a-button
      v-if="Object.keys(props.tempFile).length"
      type="link"
      @click="getFile(props.tempFile)"
      >{{ props.tempFile?.name }}</a-button
    >
    <div class="file-list" :class="{ column: props.type }">
      <div v-for="item in resList" class="upload-item" :key="item?.name">
        <div>
          <SvgIcon style="margin-right: 10px; display: inline-block" prefix="icon" name="wenjian" />
          <span class="upload-item-span">{{ item?.name }}</span>
        </div>
        <div class="upload-item-btn">
          <a href="javascript:;" @click="getFile(item)">
            <SvgIcon prefix="icon" name="download" />
          </a>
          <a href="javascript:;" @click="previewFile(item)">
            <SvgIcon prefix="icon" name="yanjing" />
          </a>
          <a v-if="isEdit" href="javascript:;" @click="delFile(item)">
            <SvgIcon prefix="icon" name="lajitong" />
          </a>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
  import { ref, watch } from 'vue';
  import { message, Upload } from 'ant-design-vue';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';
  import { uploadFile } from '@/api/file';
  import { previewFile, downloadFile } from '@/utils/file';
  const props = defineProps({
    isEdit: {
      type: Boolean,
      default: false,
    },
    fileData: {
      type: Array,
      default: () => [],
    },
    type: {
      type: Boolean,
      default: false,
    },
    isOne: {
      type: Boolean,
      default: true,
    },
    tempFile: {
      type: Object,
      default: {},
    },
  });
  const emits = defineEmits(['update:file-data']);

  const fileList = ref<any[]>(props.fileData);
  const resList = ref<any[]>(props.fileData);
  watch(() => resList.value.length, () => {
    emits('update:file-data', resList);
  });
  watch(
    () => props.fileData,
    () => {
      resList.value = props.fileData;
    },
  );
  const beforeRequest = (file: any) => {
    fileList.value = [...fileList.value, file];
    const isLt20M = file.size / 1024 / 1024 < 20;
    if (!isLt20M) {
      message.error('文件大小不能超过 20MB!');
    }
    return isLt20M;
  };
  const customRequest = (data) => {
    const formData = new FormData();
    formData.append('file', data.file);
    saveFile(formData);
  };
  const saveFile = async (formData) => {
    try {
      const res = await uploadFile(formData);
      resList.value.push({ name: res.name, id: res.id, md5: res.md5 });
    } catch (err) {
      console.log(err);
    }
  };

  /**
   * 文件回显
   */
  // 获取文件
  const getFile = async (item) => {
    downloadFile(item)
  };
  // 删除文件
  const delFile = (item) => {
    const index = resList.value.indexOf(item);
    const newResList = resList.value.slice();
    newResList.splice(index, 1);
    resList.value = newResList;
  };
</script>

<style scoped lang="less">
  .column {
    flex-direction: column;
    max-width: 400px;

    .upload-item {
      margin-left: 0px !important;

      &:first-child {
        margin-top: 10px !important;
      }
    }
  }

  .upload-box {
    display: flex;
    min-height: 46px;

    .base-upload {
      display: flex;
      align-items: flex-start;

      :deep(.ant-upload-list) {
        display: flex;
        flex-wrap: wrap;
      }

      .upload-btn {
        display: flex;
        justify-content: space-around;
        align-items: center;
        width: 98px;
        height: 32px;
        font-size: 14px;
        font-family: Roboto;
        text-align: center;
        color: #fff;
        border-radius: 5px;
        background-color: #0052d9;
      }
    }

    .file-list {
      display: flex;
      flex-wrap: wrap;
      max-width: 1200px;

      .upload-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 321px;
        height: 36px;
        margin: 0 10px 10px 10px;
        padding: 0 10px;
        border-radius: 4px;
        background-color: rgba(224, 227, 234, 100);

        &-btn {
          display: flex;
          justify-content: space-around;
          width: 50px;

          a {
            color: #222;
            font-weight: 700;
          }
        }

        &-span {
          width: 225px;
          display: inline-block;
          white-space: nowrap;
          text-overflow: ellipsis;
          line-height: 10px;
        }
      }
    }
  }
</style>
/**
 * 此处为默认配置文件，修改defalutConfig之后即可
 * 若js中使用，`import config from '@/config'` 即可
 * 若vue中使用，直接使用`$config`就可以正常使用
 * **灵活配置的项目可以使用外置化配置public/config.js**
 */
import _ from 'lodash-es'

let defaultConfig = {
  /**
   * @description token在Cookie中存储的天数，默认1天
   */
  cookieExpires: 1,
  /**
   * @description 是否使用国际化，默认为false
   *              如果不使用，则需要在路由中给需要在菜单中展示的路由设置meta: {title: 'xxx'}
   *              用来在菜单中显示文字
   */
  useI18n: false,
  /**
   * @description api请求基础路径
   */
  pubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCN82+hYZPGcp4v8gE335gH1sLrB52pHYs0f8komXuSxg6NbAt6XxtL5BvoQtWNUsu/Ql0u3vaoGokn0uQtZc/FGKs8murR/PIve8PEebLPzeO1Pq58BD54uHv8/XSPY5aDrYiXI3LTXdJUOUo1eggOoDNfXSuCvJ9uc5c5aLVQCwIDAQAB',
  baseUrl: {
    dev: '/api',
    pro: '/api'
  },
  mqttUrl: {
    dev: '10.0.0.249:8083/mqtt',
    pro: 'test2.honortrends.com/mqtt'
  },
  mqttWebUrl: {
    dev: '/emqopenapi',
    pro: '/emqopenapi'
  },
  webSocketUrl: {
    dev: 'ws://' + location.host + '/api',
    pro: 'ws://' + location.host + '/api'
  },
  printServceBaseUrl: {
    dev: 'http://192.168.131.46:10009',
    pro: 'http://192.168.131.46:10009'
  },
  footer_copyright: '北京宏诚创新科技有限公司',
  footer_info: '网址：http://www.honortrends.com    服务热线：010-51627786',
  footer_links: [{
    key: '首页',
    title: '首页',
    href: '/'
  }, {
    key: '帮助',
    title: '帮助',
    href: 'http://www.honortrends.com/',
    blankTarget: true
  }, {
    key: '官网',
    title: '官网',
    href: 'http://www.honortrends.com/',
    blankTarget: true
  }],
  /**
   * @description 配置显示在浏览器标签的title
   */
  title: '智能样本保藏管理系统',
  loginTitle: '智能样本保藏管理系统',
  isDemo: true,
  printSign: 1,
  lang: 'zh-CN-tianjin',
  dateOptions: {
    startYear: '2020', // 起始年份
    offset: 0, // 截止时间 相对今年偏移量
  }
}

/**
 * 加载外置化配置
 */
if (typeof (serverConfig) !== 'undefined') {
  defaultConfig = _.merge(defaultConfig, serverConfig())
}

export default defaultConfig
import { DictConfig } from "@/framework/core/dict/types";
import { DictNameType } from '@/api/dict/types'
import { getAllDict } from '@/api/dict'
const dict: Partial<Record<DictNameType, DictConfig>> = {
  AllDict: {
    data: async () => await getAllDict(),
    props: {
      name: 'label',
      value: 'value'
    }
  },
}

export default dictexport enum RoleEnum {
  // 管理员
  ADMIN = 'admin',

  // 普通用户
  NORMAL = 'normal',
}
export enum ActivityStatusEnum {
  Draft = 0,
  WaitCheck = 1,
  WaitApprove = 2,
  ApprovePass = 3,
  ApproveRefuse = 4,
}// @ts-ignore
/* eslint-disable */
 
declare namespace API {
  /** 全局通过表格查询返回结果 */
  type TableListResult<T = any> =
    T[] | // 列表
    { // 分页
      data: T[];
      pageIndex: number;
      pageSize: number;
      total: number;
    };

  /** 全局通用表格分页返回数据结构 */
  type PaginationResult = {
    pageIndex: number;
    pageSize: number;
    total: number;
  };

  /** 后端基础实体类 */
  type BaseEntity = {
    id: string;
    modifierId : string;
    modifyTime : Date;
    creatorId : string;
    createTime : Date;
  }

  /** 全局通用树形返回树形结构*/
  type TreeResult<T = any> = {
    id:  int | string;
    parentId: int | string;
    path: string;
    sortIndex: number;
    level: number;
  } & {
    [P in keyof T]?: T[P];
  };

  /** 全局通用表格分页请求参数 */
  type PageParams<T = any> = {
    pageSize?: number;
    pageNum?: number;
    startSize?: number;
  } & {
    [P in keyof T]?: T[P];
  };

  type PageResult<T = any> = {
    pageIndex:number;
    pageSize:number;
    total:number;
    data: T[]
  }

  type ErrorResponse = {
    /** 业务约定的错误码 */
    errorCode: string;
    /** 业务上的错误信息 */
    errorMessage?: string;
    /** 业务上的请求是否成功 */
    success?: boolean;
  };


}
<script lang="tsx">
  import type { CSSProperties, PropType } from 'vue';
  import { defineComponent, computed, unref } from 'vue';
  import { Tooltip } from 'ant-design-vue';
  import { InfoCircleOutlined } from '@ant-design/icons-vue';
  import { isString, isArray } from '@/framework/utils/is';
  import { getSlot } from '@/framework/utils/helper/tsxHelper';

  const props = {
    /**
     * Help text max-width
     * @default: 600px
     */
    maxWidth: { type: String, default: '600px' },
    /**
     * Whether to display the serial number
     * @default: false
     */
    showIndex: { type: Boolean },
    /**
     * Help text font color
     * @default: #ffffff
     */
    color: { type: String, default: '#ffffff' },
    /**
     * Help text font size
     * @default: 14px
     */
    fontSize: { type: String, default: '14px' },
    /**
     * Help text list
     */
    placement: { type: String, default: 'right' },
    /**
     * Help text list
     */
    text: { type: [Array, String] as PropType<string[] | string> },
  };

  export default defineComponent({
    name: 'BasicHelp',
    components: { Tooltip },
    props,
    setup(props, { slots }) {
      const getTooltipStyle = computed(
        (): CSSProperties => ({ color: props.color, fontSize: props.fontSize }),
      );

      const getOverlayStyle = computed((): CSSProperties => ({ maxWidth: props.maxWidth }));

      function renderTitle() {
        const textList = props.text;

        if (isString(textList)) {
          return <p>{textList}</p>;
        }

        if (isArray(textList)) {
          return textList.map((text, index) => {
            return (
              <p key={text}>
                <>
                  {props.showIndex ? `${index + 1}. ` : ''}
                  {text}
                </>
              </p>
            );
          });
        }
        return null;
      }

      return () => {
        return (
          <Tooltip
            overlayClassName="basic-help__wrap"
            title={<div style={unref(getTooltipStyle)}>{renderTitle()}</div>}
            autoAdjustOverflow={true}
            overlayStyle={unref(getOverlayStyle)}
            placement={props.placement as 'right'}
          >
            <span class="basic-help">{getSlot(slots) || <InfoCircleOutlined />}</span>
          </Tooltip>
        );
      };
    },
  });
</script>

<style lang="less">
  .basic-help__wrap p {
    margin-bottom: 0;
  }
</style>
<template>
  <span :class="getClass">
    <slot></slot>
    <BasicHelp :class="`${prefixCls}-help`" v-if="helpMessage" :text="helpMessage" />
  </span>
</template>
<script lang="ts" setup>
const name = "BasicTitle";
import type { PropType } from "vue";
import { computed, useSlots } from "vue";
import BasicHelp from "../basic-help/index.vue";

const prefixCls = "htui-basic-title";

const props = defineProps({
  /**
   * Help text list or string
   * @default: ''
   */
  helpMessage: {
    type: [String, Array] as PropType<string | string[]>,
    default: ""
  },
  /**
   * Whether the color block on the left side of the title
   * @default: false
   */
  span: { type: Boolean },
  /**
   * Whether to default the text, that is, not bold
   * @default: false
   */
  normal: { type: Boolean }
});


const slots = useSlots();
const getClass = computed(() => [
  prefixCls,
  { [`${prefixCls}-show-span`]: props.span && slots.default },
  { [`${prefixCls}-normal`]: props.normal }
]);
</script>
<style lang="less" scoped>
@prefix-cls: ~'@{namespace}-basic-title';

.@{prefix-cls} {
  position: relative;
  display: flex;
  padding-left: 7px;
  font-size: 16px;
  font-weight: 500;
  line-height: 24px;
  color: @text-color-base;
  cursor: pointer;
  user-select: none;

  &-normal {
    font-size: 14px;
    font-weight: 500;
  }

  &-show-span::before {
    position: absolute;
    top: 4px;
    left: 0;
    width: 3px;
    height: 16px;
    margin-right: 4px;
    background-color: @primary-color;
    content: '';
  }

  &-help {
    margin-left: 10px;
  }
}
</style>
<template>
  <Button v-bind="props" :danger="['danger'].includes(type)" :type="buttonType" :class="[`ant-btn-${type}`]">
    <template v-for="(_value, key) in $slots" #[key]>
      <slot :name="key"></slot>
    </template>
  </Button>
</template>
<script lang="ts" setup>
import { Button } from 'ant-design-vue';
import { computed } from 'vue';
// import type { PropType } from 'vue';
// import buttonProps from 'ant-design-vue/lib/button/buttonTypes';
import type { ButtonType } from 'ant-design-vue/lib/button/buttonTypes';
import customButtonProps from './types/customButtonProps';
const props = defineProps({
  ...customButtonProps
});

const buttonTypes = ['default', 'primary', 'ghost', 'dashed', 'link', 'text'];
const buttonType = computed(() => {
  const type = props.type;
  return buttonTypes.includes(type)
    ? (type as ButtonType)
    : ['danger'].includes(type)
      ? 'primary'
      : 'default';
});
</script>

<style lang="less" scoped>
@import 'styles/success';
</style>

<style lang="less" scoped>
@import 'styles/warning';
</style>

<style lang="less" scoped>
@import 'styles/blue-white';
</style>

<style lang="less" scoped>
@import 'styles/white-blue';
</style>
export { default as AButton } from './button.vue';
import buttonProps from 'ant-design-vue/lib/button/buttonTypes';
import type { ButtonType } from 'ant-design-vue/lib/button/buttonTypes';
import type { PropType } from 'vue';
type CustomBtnType = 'danger' | 'warning' | 'success' | 'blue-white' | 'white-blue'
export type BtnType = CustomBtnType | ButtonType
export default {
  ...buttonProps(),
  type: {
    type: String as PropType<ButtonType | CustomBtnType>,
    default: 'default',
  },
}<template>
  <Checkbox v-bind="getProps" v-model:checked="checkedModel" @change="handleChange">
    <slot></slot>
  </Checkbox>
</template>

<script lang="ts">
  export default {
    inheritAttrs: false,
  };
</script>

<script lang="ts" setup>
  import { computed } from 'vue';
  import { Checkbox } from 'ant-design-vue';
  import { checkboxProps } from 'ant-design-vue/lib/checkbox';
  import { omit } from 'lodash-es';

  const props = defineProps({
    ...checkboxProps(),
    trueValue: {
      type: [Number, Boolean, String],
      default: true,
    },
    falseValue: {
      type: [Number, Boolean, String],
      default: false,
    },
  });

  const emit = defineEmits(['update:checked', 'change']);

  const getProps = computed(() => {
    return omit(props, ['onUpdate:checked', 'onChange']);
  });

  const checkedModel = computed<boolean>({
    get() {
      return props.checked === props.trueValue;
    },
    set(val) {
      emit('update:checked', val ? props.trueValue : props.falseValue);
    },
  });

  const handleChange = (e) => {
    const evt = {
      ...e,
      target: {
        ...e.target,
        checked: e.target.checked ? props.trueValue : props.falseValue,
      },
    };
    emit('change', evt);
  };
</script>

import ScrollContainer from "./src/ScrollContainer.vue";
import LazyContainer from "./src/ScrollContainer.vue";

export { ScrollContainer, LazyContainer };

export * from "./src/typing";
import {
  defineComponent,
  h,
  computed,
  ref,
  getCurrentInstance,
  onUnmounted,
  inject,
  Ref,
} from 'vue';
import { on, off } from '@/framework/utils/domUtils';

import { renderThumbStyle, BAR_MAP } from './util';

export default defineComponent({
  name: 'Bar',

  props: {
    vertical: Boolean,
    size: String,
    move: Number,
  },

  setup(props) {
    const instance = getCurrentInstance();
    const thumb = ref();
    const wrap = inject('scroll-bar-wrap', {} as Ref<Nullable<HTMLElement>>) as any;
    const bar = computed(() => {
      return BAR_MAP[props.vertical ? 'vertical' : 'horizontal'];
    });
    const barStore = ref<Recordable>({});
    const cursorDown = ref();
    const clickThumbHandler = (e: any) => {
      // prevent click event of right button
      if (e.ctrlKey || e.button === 2) {
        return;
      }
      window.getSelection()?.removeAllRanges();
      startDrag(e);
      barStore.value[bar.value.axis] =
        e.currentTarget[bar.value.offset] -
        (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]);
    };

    const clickTrackHandler = (e: any) => {
      const offset = Math.abs(
        e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client],
      );
      const thumbHalf = thumb.value[bar.value.offset] / 2;
      const thumbPositionPercentage =
        ((offset - thumbHalf) * 100) / instance?.vnode.el?.[bar.value.offset];

      wrap.value[bar.value.scroll] =
        (thumbPositionPercentage * wrap.value[bar.value.scrollSize]) / 100;
    };
    const startDrag = (e: any) => {
      e.stopImmediatePropagation();
      cursorDown.value = true;
      on(document, 'mousemove', mouseMoveDocumentHandler);
      on(document, 'mouseup', mouseUpDocumentHandler);
      document.onselectstart = () => false;
    };

    const mouseMoveDocumentHandler = (e: any) => {
      if (cursorDown.value === false) return;
      const prevPage = barStore.value[bar.value.axis];

      if (!prevPage) return;

      const offset =
        (instance?.vnode.el?.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) *
        -1;
      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
      const thumbPositionPercentage =
        ((offset - thumbClickPosition) * 100) / instance?.vnode.el?.[bar.value.offset];
      wrap.value[bar.value.scroll] =
        (thumbPositionPercentage * wrap.value[bar.value.scrollSize]) / 100;
    };

    function mouseUpDocumentHandler() {
      cursorDown.value = false;
      barStore.value[bar.value.axis] = 0;
      off(document, 'mousemove', mouseMoveDocumentHandler);
      document.onselectstart = null;
    }

    onUnmounted(() => {
      off(document, 'mouseup', mouseUpDocumentHandler);
    });

    return () =>
      h(
        'div',
        {
          class: ['scrollbar__bar', 'is-' + bar.value.key],
          onMousedown: clickTrackHandler,
        },
        h('div', {
          ref: thumb,
          class: 'scrollbar__thumb',
          onMousedown: clickThumbHandler,
          style: renderThumbStyle({
            size: props.size,
            move: props.move,
            bar: bar.value,
          }),
        }),
      );
  },
});
import Scrollbar from './Scrollbar.vue'
export {Scrollbar}
export * from './types.d.ts'
<template>
  <div class="scrollbar">
    <div
      ref="wrap"
      :class="[wrapClass, 'scrollbar__wrap', native ? '' : 'scrollbar__wrap--hidden-default']"
      :style="style"
      @scroll="handleScroll"
    >
      <component :is="tag" ref="resize" :class="['scrollbar__view', viewClass]" :style="viewStyle">
        <slot></slot>
      </component>
    </div>
    <template v-if="!native">
      <bar :move="moveX" :size="sizeWidth" />
      <bar vertical :move="moveY" :size="sizeHeight" />
    </template>
  </div>
</template>
<script lang="ts">
import { useResizeObserver } from "@vueuse/core";
import { toObject } from "./util";
import { computed, defineComponent, nextTick, onBeforeUnmount, onMounted, provide, ref, unref } from "vue";
import Bar from "./bar";

export default defineComponent({
  name: "Scrollbar",
  // inheritAttrs: false,
  components: { Bar },
  props: {
    native: {
      type: Boolean,
      default: false
    },
    wrapStyle: {
      type: [String, Array],
      default: ""
    },
    wrapClass: {
      type: [String, Array],
      default: ""
    },
    viewClass: {
      type: [String, Array],
      default: ""
    },
    viewStyle: {
      type: [String, Array],
      default: ""
    },
    noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(props) {
    const sizeWidth = ref("0");
    const sizeHeight = ref("0");
    const moveX = ref(0);
    const moveY = ref(0);
    const wrap = ref();
    const resize = ref();

    provide("scroll-bar-wrap", wrap);

    const style = computed(() => {
      if (Array.isArray(props.wrapStyle)) {
        return toObject(props.wrapStyle);
      }
      return props.wrapStyle;
    });

    const handleScroll = () => {
      if (!props.native) {
        moveY.value = (unref(wrap).scrollTop * 100) / unref(wrap).clientHeight;
        moveX.value = (unref(wrap).scrollLeft * 100) / unref(wrap).clientWidth;
      }
    };

    const update = () => {
      if (!unref(wrap)) return;

      const heightPercentage = (unref(wrap).clientHeight * 100) / unref(wrap).scrollHeight;
      const widthPercentage = (unref(wrap).clientWidth * 100) / unref(wrap).scrollWidth;

      sizeHeight.value = heightPercentage < 100 ? heightPercentage + "%" : "";
      sizeWidth.value = widthPercentage < 100 ? widthPercentage + "%" : "";
    };

    let resizeObserver;
    let wrapObserver;

    onMounted(() => {
      if (props.native) return;
      nextTick(update);
      if (!props.noresize) {
        resizeObserver = useResizeObserver(resize, update);
        wrapObserver = useResizeObserver(wrap, update);
        addEventListener("resize", update);
      }
    });

    onBeforeUnmount(() => {
      if (props.native) return;
      if (!props.noresize) {
        resizeObserver && resizeObserver.stop();
        wrapObserver && wrapObserver.stop();
        removeEventListener("resize", update);
      }
    });

    return {
      moveX,
      moveY,
      sizeWidth,
      sizeHeight,
      style,
      wrap,
      resize,
      update,
      handleScroll
    };
  }
});
</script>
<style lang="less">
.scrollbar {
  position: relative;
  height: 100%;
  overflow: hidden;

  &__wrap {
    height: 100%;
    overflow: auto;

    &--hidden-default {
      scrollbar-width: none;

      &::-webkit-scrollbar {
        display: none;
        width: 0;
        height: 0;
        opacity: 0%;
      }
    }
  }

  &__thumb {
    position: relative;
    display: block;
    width: 0;
    height: 0;
    cursor: pointer;
    background-color: rgb(144 147 153 / 30%);
    border-radius: inherit;
    transition: 0.3s background-color;

    &:hover {
      background-color: rgb(144 147 153 / 50%);
    }
  }

  &__bar {
    position: absolute;
    right: 2px;
    bottom: 2px;
    z-index: 1;
    border-radius: 4px;
    opacity: 0%;
    transition: opacity 80ms ease;

    &.is-vertical {
      top: 2px;
      width: 6px;

      & > div {
        width: 100%;
      }
    }

    &.is-horizontal {
      left: 2px;
      height: 6px;

      & > div {
        height: 100%;
      }
    }
  }
}

.scrollbar:active > .scrollbar__bar,
.scrollbar:focus > .scrollbar__bar,
.scrollbar:hover > .scrollbar__bar {
  opacity: 100%;
  transition: opacity 340ms ease-out;
}
</style>
export interface BarMapItem {
  offset: string;
  scroll: string;
  scrollSize: string;
  size: string;
  key: string;
  axis: string;
  client: string;
  direction: string;
}
export interface BarMap {
  vertical: BarMapItem;
  horizontal: BarMapItem;
}

export interface ScrollbarType {
  wrap: ElRef;
}
import type { BarMap } from './types';
export const BAR_MAP: BarMap = {
  vertical: {
    offset: 'offsetHeight',
    scroll: 'scrollTop',
    scrollSize: 'scrollHeight',
    size: 'height',
    key: 'vertical',
    axis: 'Y',
    client: 'clientY',
    direction: 'top',
  },
  horizontal: {
    offset: 'offsetWidth',
    scroll: 'scrollLeft',
    scrollSize: 'scrollWidth',
    size: 'width',
    key: 'horizontal',
    axis: 'X',
    client: 'clientX',
    direction: 'left',
  },
};

// @ts-ignore
export function renderThumbStyle({ move, size, bar }) {
  const style = {} as any;
  const translate = `translate${bar.axis}(${move}%)`;

  style[bar.size] = size;
  style.transform = translate;
  style.msTransform = translate;
  style.webkitTransform = translate;

  return style;
}

function extend<T, K>(to: T, _from: K): T & K {
  return Object.assign(to, _from);
}

export function toObject<T>(arr: Array<T>): Recordable<T> {
  const res = {};
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
<template>
  <transition-group
    class="h-full w-full"
    v-bind="$attrs"
    ref="elRef"
    :name="transitionName"
    :tag="tag"
    mode="out-in"
  >
    <div key="component" v-if="isInit">
      <slot :loading="loading"></slot>
    </div>
    <div key="skeleton" v-else>
      <slot name="skeleton" v-if="$slots.skeleton"></slot>
      <Skeleton v-else />
    </div>
  </transition-group>
</template>
<script lang="ts">
import type { PropType } from "vue";
import { defineComponent, onMounted, reactive, ref, toRef, toRefs } from "vue";
import { Skeleton } from "ant-design-vue";
import { useIntersectionObserver, useTimeoutFn } from "@vueuse/core";

interface State {
  isInit: boolean;
  loading: boolean;
  intersectionObserverInstance: IntersectionObserver | null;
}

const props = {
  /**
   * Waiting time, if the time is specified, whether visible or not, it will be automatically loaded after the specified time
   */
  timeout: { type: Number },
  /**
   * The viewport where the component is located.
   * If the component is scrolling in the page container, the viewport is the container
   */
  viewport: {
    type: (typeof window !== "undefined" ? window.HTMLElement : Object) as PropType<HTMLElement>,
    default: () => null
  },
  /**
   * Preload threshold, css unit
   */
  threshold: { type: String, default: "0px" },
  /**
   * The scroll direction of the viewport, vertical represents the vertical direction, horizontal represents the horizontal direction
   */
  direction: {
    type: String,
    default: "vertical",
    validator: (v) => ["vertical", "horizontal"].includes(v)
  },
  /**
   * The label name of the outer container that wraps the component
   */
  tag: { type: String, default: "div" },
  maxWaitingTime: { type: Number, default: 80 },
  /**
   * transition name
   */
  transitionName: { type: String, default: "lazy-container" }
};

export default defineComponent({
  name: "LazyContainer",
  components: { Skeleton },
  inheritAttrs: false,
  props,
  emits: ["init"],
  setup(props, { emit }) {
    const elRef = ref();
    const state = reactive<State>({
      isInit: false,
      loading: false,
      intersectionObserverInstance: null
    });

    onMounted(() => {
      immediateInit();
      initIntersectionObserver();
    });

    // If there is a set delay time, it will be executed immediately
    function immediateInit() {
      const { timeout } = props;
      timeout &&
      useTimeoutFn(() => {
        init();
      }, timeout);
    }

    function init() {
      state.loading = true;

      useTimeoutFn(() => {
        if (state.isInit) return;
        state.isInit = true;
        emit("init");
      }, props.maxWaitingTime || 80);
    }

    function initIntersectionObserver() {
      const { timeout, direction, threshold } = props;
      if (timeout) return;
      // According to the scrolling direction to construct the viewport margin, used to load in advance
      let rootMargin = "0px";
      switch (direction) {
        case "vertical":
          rootMargin = `${threshold} 0px`;
          break;
        case "horizontal":
          rootMargin = `0px ${threshold}`;
          break;
      }

      try {
        const { stop, observer } = useIntersectionObserver({
          rootMargin,
          target: toRef(elRef.value, "$el"),
          onIntersect: (entries: any[]) => {
            const isIntersecting = entries[0].isIntersecting || entries[0].intersectionRatio;
            if (isIntersecting) {
              init();
              if (observer) {
                stop();
              }
            }
          },
          root: toRef(props, "viewport")
        });
      } catch (e) {
        init();
      }
    }

    return {
      elRef,
      ...toRefs(state)
    };
  }
});
</script>
<template>
  <Scrollbar ref="scrollbarRef" class="scroll-container" v-bind="$attrs">
    <slot></slot>
  </Scrollbar>
</template>

<script lang="ts">
  import { defineComponent, ref, unref, nextTick } from 'vue';
  import { Scrollbar, ScrollbarType } from './components/Scrollbar';
  import { useScrollTo } from '@/framework/hooks/useScrollTo';

  export default defineComponent({
    name: 'ScrollContainer',
    components: { Scrollbar },
    setup() {
      const scrollbarRef = ref<Nullable<ScrollbarType>>(null);

      /**
       * Scroll to the specified position
       */
      function scrollTo(to: number, duration = 500) {
        const scrollbar = unref(scrollbarRef);
        if (!scrollbar) {
          return;
        }
        nextTick(() => {
          const wrap = unref(scrollbar.wrap);
          if (!wrap) {
            return;
          }
          const { start } = useScrollTo({
            wrap,
            to,
            duration,
          });
          start();
        });
      }

      function getScrollWrap() {
        const scrollbar = unref(scrollbarRef);
        if (!scrollbar) {
          return null;
        }
        return scrollbar.wrap;
      }

      /**
       * Scroll to the bottom
       */
      function scrollBottom() {
        const scrollbar = unref(scrollbarRef);
        if (!scrollbar) {
          return;
        }
        nextTick(() => {
          const wrap = unref(scrollbar.wrap) as any;
          if (!wrap) {
            return;
          }
          const scrollHeight = wrap.scrollHeight as number;
          const { start } = useScrollTo({
            el: wrap,
            to: scrollHeight,
          });
          start();
        });
      }

      return {
        scrollbarRef,
        scrollTo,
        scrollBottom,
        getScrollWrap,
      };
    },
  });
</script>
<style lang="less">
  .scroll-container {
    width: 100%;
    height: 100%;

    .scrollbar__wrap {
      margin-bottom: 18px !important;
      overflow-x: hidden;
    }

    .scrollbar__view {
      box-sizing: border-box;
    }
  }
</style>
export type ScrollType = 'default' | 'main';

export interface ScrollContainerOptions {
  enableScroll?: boolean;
  type?: ScrollType;
}

export type ScrollActionType = RefType<{
  scrollBottom: () => void;
  getScrollWrap: () => Nullable<HTMLElement>;
  scrollTo: (top: number) => void;
}>;
export { createContextMenu, destroyContextMenu } from './src/createContextMenu';

export * from './src/typing';
<script lang="tsx">
  import type { ContextMenuItem, ItemContentProps, Axis } from './typing';
  import type { FunctionalComponent, CSSProperties } from 'vue';
  import { defineComponent, nextTick, onMounted, computed, ref, unref, onUnmounted } from 'vue';
  import { IconFont } from '@/framework/components/basic/iconfont';
  import { Menu, Divider } from 'ant-design-vue';

  const prefixCls = 'context-menu';

  const props = {
    width: { type: Number, default: 156 },
    customEvent: { type: Object as PropType<Event>, default: null },
    styles: { type: Object as PropType<CSSProperties> },
    showIcon: { type: Boolean, default: true },
    axis: {
      // The position of the right mouse button click
      type: Object as PropType<Axis>,
      default() {
        return { x: 0, y: 0 };
      },
    },
    items: {
      // The most important list, if not, will not be displayed
      type: Array as PropType<ContextMenuItem[]>,
      default() {
        return [];
      },
    },
  };

  const ItemContent: FunctionalComponent<ItemContentProps> = (props) => {
    const { item } = props;
    return (
      <span
        style="display: inline-block; width: 100%; "
        class="px-4"
        onClick={props.handler.bind(null, item)}
      >
        {props.showIcon && item.icon && <IconFont class="mr-2" type={item.icon} />}
        <span>{item.label}</span>
      </span>
    );
  };

  export default defineComponent({
    name: 'ContextMenu',
    props,
    setup(props) {
      const wrapRef = ref(null);
      const showRef = ref(false);

      const getStyle = computed((): CSSProperties => {
        const { axis, items, styles, width } = props;
        const { x, y } = axis || { x: 0, y: 0 };
        const menuHeight = (items || []).length * 40;
        const menuWidth = width;
        const body = document.body;

        const left = body.clientWidth < x + menuWidth ? x - menuWidth : x;
        const top = body.clientHeight < y + menuHeight ? y - menuHeight : y;
        return {
          ...styles,
          position: 'absolute',
          width: `${width}px`,
          left: `${left + 1}px`,
          top: `${top + 1}px`,
        };
      });

      onMounted(() => {
        nextTick(() => (showRef.value = true));
      });

      onUnmounted(() => {
        const el = unref(wrapRef);
        el && document.body.removeChild(el);
      });

      function handleAction(item: ContextMenuItem, e: MouseEvent) {
        const { handler, disabled } = item;
        if (disabled) {
          return;
        }
        showRef.value = false;
        e?.stopPropagation();
        e?.preventDefault();
        handler?.();
      }

      function renderMenuItem(items: ContextMenuItem[]) {
        return items.map((item) => {
          const { disabled, label, children, divider = false } = item;

          const contentProps = {
            item,
            handler: handleAction,
            showIcon: props.showIcon,
          };

          if (!children || children.length === 0) {
            return (
              <>
                <Menu.Item disabled={disabled} class={`${prefixCls}__item`} key={label}>
                  <ItemContent {...contentProps} />
                </Menu.Item>
                {divider ? <Divider key={`d-${label}`} /> : null}
              </>
            );
          }
          if (!unref(showRef)) return null;

          return (
            <Menu.SubMenu key={label} disabled={disabled} popupClassName={`${prefixCls}__popup`}>
              {{
                title: () => <ItemContent {...contentProps} />,
                default: () => renderMenuItem(children),
              }}
            </Menu.SubMenu>
          );
        });
      }
      return () => {
        if (!unref(showRef)) {
          return null;
        }
        const { items } = props;
        return (
          <div class={prefixCls}>
            <Menu inlineIndent={12} mode="vertical" ref={wrapRef} style={unref(getStyle)}>
              {renderMenuItem(items)}
            </Menu>
          </div>
        );
      };
    },
  });
</script>
<style lang="less">
  @default-height: 42px !important;

  @small-height: 36px !important;

  @large-height: 36px !important;

  .item-style() {
    li {
      display: inline-block;
      width: 100%;
      height: @default-height;
      margin: 0 !important;
      line-height: @default-height;

      span {
        line-height: @default-height;
      }

      > div {
        margin: 0 !important;
      }

      &:not(.ant-menu-item-disabled):hover {
        color: #c9d1d9;
        background-color: #f5f5f5;
      }
    }
  }

  .context-menu {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 200;
    display: block;
    width: 156px;
    margin: 0;
    list-style: none;
    background-color: #151515;
    border: 1px solid rgb(0 0 0 / 8%);
    border-radius: 0.25rem;
    box-shadow: 0 2px 2px 0 rgb(0 0 0 / 14%), 0 3px 1px -2px rgb(0 0 0 / 10%),
      0 1px 5px 0 rgb(0 0 0 / 6%);
    background-clip: padding-box;
    user-select: none;

    &__item {
      margin: 0 !important;
    }
    .item-style();

    .ant-divider {
      margin: 0;
    }

    &__popup {
      .ant-divider {
        margin: 0;
      }

      .item-style();
    }

    .ant-menu-submenu-title,
    .ant-menu-item {
      padding: 0 !important;
    }
  }
</style>
import contextMenuVue from './ContextMenu.vue';
import { isClient } from '@/framework/utils/is';
import { CreateContextOptions, ContextMenuProps } from './typing';
import { createVNode, render } from 'vue';

const menuManager: {
  domList: Element[];
  resolve: Fn;
} = {
  domList: [],
  resolve: () => {},
};

export const createContextMenu = function (options: CreateContextOptions) {
  const { event } = options || {};

  event && event?.preventDefault();

  if (!isClient) {
    return;
  }
  return new Promise((resolve) => {
    const body = document.body;

    const container = document.createElement('div');
    const propsData: Partial<ContextMenuProps> = {};
    if (options.styles) {
      propsData.styles = options.styles;
    }

    if (options.items) {
      propsData.items = options.items;
    }

    if (options.event) {
      propsData.customEvent = event;
      propsData.axis = { x: event.clientX, y: event.clientY };
    }

    const vm = createVNode(contextMenuVue, propsData);
    render(vm, container);

    const handleClick = function () {
      menuManager.resolve('');
    };

    menuManager.domList.push(container);

    const remove = function () {
      menuManager.domList.forEach((dom: Element) => {
        try {
          dom && body.removeChild(dom);
        } catch (error) {}
      });
      body.removeEventListener('click', handleClick);
      body.removeEventListener('scroll', handleClick);
    };

    menuManager.resolve = function (arg) {
      remove();
      resolve(arg);
    };
    remove();
    body.appendChild(container);
    body.addEventListener('click', handleClick);
    body.addEventListener('scroll', handleClick);
  });
};

export const destroyContextMenu = function () {
  if (menuManager) {
    menuManager.resolve('');
    menuManager.domList = [];
  }
};
export interface Axis {
  x: number;
  y: number;
}

export interface ContextMenuItem {
  label: string;
  icon?: string;
  disabled?: boolean;
  handler?: Fn;
  divider?: boolean;
  children?: ContextMenuItem[];
}
export interface CreateContextOptions {
  event: MouseEvent;
  icon?: string;
  styles?: any;
  items?: ContextMenuItem[];
}

export interface ContextMenuProps {
  event?: MouseEvent;
  styles?: any;
  items: ContextMenuItem[];
  customEvent?: MouseEvent;
  axis?: Axis;
  width?: number;
  showIcon?: boolean;
}

export interface ItemContentProps {
  showIcon: boolean | undefined;
  item: ContextMenuItem;
  handler: Fn;
}
import { withInstall } from '@/framework/utils';
import impExcel from './src/ImportExcel.vue';
export { useExportExcelModal } from './src/ExportExcelModal';

export const ImpExcel = withInstall(impExcel);
// export const ExpExcelModal = withInstall(expExcelModal);
export * from './src/typing';
export { jsonToSheetXlsx, aoaToSheetXlsx } from './src/Export2Excel';
import * as xlsx from 'xlsx';
import type { WorkBook } from 'xlsx';
import type { JsonToSheet, AoAToSheet } from './typing';

const { utils, writeFile } = xlsx;

const DEF_FILE_NAME = 'excel-list.xlsx';

export function jsonToSheetXlsx<T = any>({
  data,
  header,
  filename = DEF_FILE_NAME,
  json2sheetOpts = {},
  write2excelOpts = { bookType: 'xlsx' },
}: JsonToSheet<T>) {
  let arrData = [...data];
  if (header) {
    arrData.unshift(header);
    const filterKeys = Object.keys(header);
    arrData = arrData.map((item) => filterKeys.reduce<any>((p, k) => ((p[k] = item[k]), p), {}));
    json2sheetOpts.skipHeader = true;
  }

  const worksheet = utils.json_to_sheet(arrData, json2sheetOpts);

  /* add worksheet to workbook */
  const workbook: WorkBook = {
    SheetNames: [filename],
    Sheets: {
      [filename]: worksheet,
    },
  };
  /* output format determined by filename */
  writeFile(workbook, filename, write2excelOpts);
  /* at this point, out.xlsb will have been downloaded */
}

export function aoaToSheetXlsx<T = any>({
  data,
  header,
  filename = DEF_FILE_NAME,
  write2excelOpts = { bookType: 'xlsx' },
}: AoAToSheet<T>) {
  const arrData = [...data];
  if (header) {
    arrData.unshift(header);
  }

  const worksheet = utils.aoa_to_sheet(arrData);

  /* add worksheet to workbook */
  const workbook: WorkBook = {
    SheetNames: [filename],
    Sheets: {
      [filename]: worksheet,
    },
  };
  /* output format determined by filename */
  writeFile(workbook, filename, write2excelOpts);
  /* at this point, out.xlsb will have been downloaded */
}
<template>
  <div>
    <input
      ref="inputRef"
      type="file"
      v-show="false"
      accept=".xlsx, .xls"
      @change="handleInputClick"
    />
    <div @click="handleUpload">
      <slot></slot>
    </div>
  </div>
</template>
<script lang="ts">
  import { defineComponent, ref, unref } from 'vue';
  import * as XLSX from 'xlsx';
  import { dateUtil } from '@/framework/utils/dateUtil';

  import type { ExcelData } from './typing';
  export default defineComponent({
    name: 'ImportExcel',
    props: {
      // 日期时间格式。如果不提供或者提供空值，将返回原始Date对象
      dateFormat: {
        type: String,
      },
      // 时区调整。实验性功能，仅为了解决读取日期时间值有偏差的问题。目前仅提供了+08:00时区的偏差修正值
      // https://github.com/SheetJS/sheetjs/issues/1470#issuecomment-501108554
      timeZone: {
        type: Number,
        default: 8,
      },
    },
    emits: ['success', 'error'],
    setup(props, { emit }) {
      const inputRef = ref<HTMLInputElement | null>(null);
      const loadingRef = ref<Boolean>(false);

      /**
       * @description: 第一行作为头部
       */
      function getHeaderRow(sheet: XLSX.WorkSheet) {
        if (!sheet || !sheet['!ref']) return [];
        const headers: string[] = [];
        // A3:B7=>{s:{c:0, r:2}, e:{c:1, r:6}}
        const range = XLSX.utils.decode_range(sheet['!ref']);

        const R = range.s.r;
        /* start in the first row */
        for (let C = range.s.c; C <= range.e.c; ++C) {
          /* walk every column in the range */
          const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })];
          /* find the cell in the first row */
          let hdr = 'UNKNOWN ' + C; // <-- replace with your desired default
          if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);
          headers.push(hdr);
        }
        return headers;
      }

      /**
       * @description: 获得excel数据
       */
      function getExcelData(workbook: XLSX.WorkBook) {
        const excelData: ExcelData[] = [];
        const { dateFormat, timeZone } = props;
        for (const sheetName of workbook.SheetNames) {
          const worksheet = workbook.Sheets[sheetName];
          const header: string[] = getHeaderRow(worksheet);
          let results = XLSX.utils.sheet_to_json(worksheet, {
            raw: true,
            dateNF: dateFormat, //Not worked
          }) as object[];
          results = results.map((row: object) => {
            for (let field in row) {
              if (row[field] instanceof Date) {
                if (timeZone === 8) {
                  row[field].setSeconds(row[field].getSeconds() + 43);
                }
                if (dateFormat) {
                  row[field] = dateUtil(row[field]).format(dateFormat);
                }
              }
            }
            return row;
          });

          excelData.push({
            header,
            results,
            meta: {
              sheetName,
            },
          });
        }
        return excelData;
      }

      /**
       * @description: 读取excel数据
       */
      function readerData(rawFile: File) {
        loadingRef.value = true;
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = async (e) => {
            try {
              const data = e.target && e.target.result;
              const workbook = XLSX.read(data, { type: 'array', cellDates: true });
              // console.log(workbook);
              /* DO SOMETHING WITH workbook HERE */
              const excelData = getExcelData(workbook);
              emit('success', excelData);
              resolve('');
            } catch (error) {
              reject(error);
              emit('error');
            } finally {
              loadingRef.value = false;
            }
          };
          reader.readAsArrayBuffer(rawFile);
        });
      }

      async function upload(rawFile: File) {
        const inputRefDom = unref(inputRef);
        if (inputRefDom) {
          // fix can't select the same excel
          inputRefDom.value = '';
        }
        await readerData(rawFile);
      }

      /**
       * @description: 触发选择文件管理器
       */
      function handleInputClick(e: Event) {
        const files = e && (e.target as HTMLInputElement).files;
        const rawFile = files && files[0]; // only setting files[0]
        if (!rawFile) return;
        upload(rawFile);
      }

      /**
       * @description: 点击上传按钮
       */
      function handleUpload() {
        const inputRefDom = unref(inputRef);
        inputRefDom && inputRefDom.click();
      }

      return { handleUpload, handleInputClick, inputRef };
    },
  });
</script>
import type { JSON2SheetOpts, WritingOptions, BookType } from 'xlsx';

export interface ExcelData<T = any> {
  header: string[];
  results: T[];
  meta: { sheetName: string };
}

export interface JsonToSheet<T = any> {
  data: T[];
  header?: T;
  filename?: string;
  json2sheetOpts?: JSON2SheetOpts;
  write2excelOpts?: WritingOptions;
}

export interface AoAToSheet<T = any> {
  data: T[][];
  header?: T[];
  filename?: string;
  write2excelOpts?: WritingOptions;
}

export interface ExportModalResult {
  filename: string;
  bookType: BookType;
}
import IconFont from './icon-font';
export { IconFont };
<template>
  <Popover v-model:visible="visible" placement="bottomLeft" trigger="focus">
    <template #content>
      <div class="select-box">
        <template v-for="iconItem in glyphs" :key="iconItem.font_class">
          <div
            :title="iconItem.name"
            class="select-box-item"
            :class="{ active: modelValue?.replace('icon-', '') == iconItem.font_class }"
            @click="selectIcon(iconItem)"
          >
            <icon-font :type="iconItem.font_class" size="20" />
          </div>
        </template>
      </div>
    </template>
    <a-input v-model:value="modelValue" :placeholder="placeholder">
      <template v-if="modelValue" #prefix>
        <icon-font :type="modelValue" size="22" />
      </template>
    </a-input>
  </Popover>
</template>
<script lang="ts" setup>
  import { ref } from 'vue';
  import { Popover } from 'ant-design-vue';
  import { IconFont } from '@/framework/components/basic/iconfont';
  import icons from './icons.json';
  import { useVModel } from '@vueuse/core';

  const { glyphs } = icons;

  interface Props {
    value: string;
    placeholder?: string;
  }

  interface Emits {
    (e: 'update:value', val: string): void;
  }

  const props = withDefaults(defineProps<Props>(), {
    value: '',
    placeholder: '请选择',
  });

  const emit = defineEmits<Emits>();

  const visible = ref(false);
  const modelValue = useVModel(props, 'value', emit);

  const selectIcon = (iconItem: typeof glyphs[number]) => {
    modelValue.value = iconItem.font_class;
    visible.value = false;
  };
</script>
<style lang="less" scoped>
  .select-box {
    @apply grid grid-cols-9 h-300px overflow-auto;

    &-item {
      @apply flex m-2px p-6px;
      border: 1px solid #e5e7eb;

      &:hover,
      &.active {
        @apply border-blue-600;
      }
    }
  }
</style>
import Loading from './src/Loading.vue';

export { Loading };
export { useLoading } from './src/useLoading';
export { createLoading } from './src/createLoading';
import { VNode, defineComponent } from 'vue';
import type { LoadingProps } from './typing';

import { createVNode, render, reactive, h } from 'vue';
import Loading from './Loading.vue';

export function createLoading(props?: Partial<LoadingProps>, target?: HTMLElement, wait = false) {
  let vm: Nullable<VNode> = null;
  const data = reactive({
    tip: '',
    loading: true,
    ...props,
  });

  const LoadingWrap = defineComponent({
    render() {
      return h(Loading, { ...data });
    },
  });

  vm = createVNode(LoadingWrap);

  if (wait) {
    // TODO fix https://github.com/anncwb/vue-vben-admin/issues/438
    setTimeout(() => {
      render(vm, document.createElement('div'));
    }, 0);
  } else {
    render(vm, document.createElement('div'));
  }

  function close() {
    if (vm?.el && vm.el.parentNode) {
      vm.el.parentNode.removeChild(vm.el);
    }
  }

  function open(target: HTMLElement = document.body) {
    if (!vm || !vm.el) {
      return;
    }
    target.appendChild(vm.el as HTMLElement);
  }

  if (target) {
    open(target);
  }
  return {
    vm,
    close,
    open,
    setTip: (tip: string) => {
      data.tip = tip;
    },
    setLoading: (loading: boolean) => {
      data.loading = loading;
    },
    get loading() {
      return data.loading;
    },
    get $el() {
      return vm?.el as HTMLElement;
    },
  };
}
<template>
  <section
    class="full-loading"
    :class="{ absolute, [theme]: !!theme }"
    :style="[background ? `background-color: ${background}` : '']"
    v-show="loading"
  >
    <Spin v-bind="$attrs" :tip="tip" :size="size" :spinning="loading" />
  </section>
</template>
<script lang="ts">
  import { PropType } from 'vue';
  import { defineComponent } from 'vue';
  import { Spin } from 'ant-design-vue';
  import { SizeEnum } from '@/framework/enums/sizeEnum';

  export default defineComponent({
    name: 'Loading',
    components: { Spin },
    props: {
      tip: {
        type: String as PropType<string>,
        default: '',
      },
      size: {
        type: String as PropType<SizeEnum>,
        default: SizeEnum.LARGE,
        validator: (v: SizeEnum): boolean => {
          return [SizeEnum.DEFAULT, SizeEnum.SMALL, SizeEnum.LARGE].includes(v);
        },
      },
      absolute: {
        type: Boolean as PropType<boolean>,
        default: false,
      },
      loading: {
        type: Boolean as PropType<boolean>,
        default: false,
      },
      background: {
        type: String as PropType<string>,
      },
      theme: {
        type: String as PropType<'dark' | 'light'>,
      },
    },
  });
</script>
<style lang="less" scoped>
  .full-loading {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 200;
    display: flex;
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;
    background-color: rgb(240 242 245 / 40%);

    &.absolute {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 300;
    }
  }

  html[data-theme='dark'] {
    .full-loading:not(.light) {
      background-color: @modal-mask-bg;
    }
  }

  .full-loading.dark {
    background-color: @modal-mask-bg;
  }
</style>
import { SizeEnum } from '/@/enums/sizeEnum';

export interface LoadingProps {
  tip: string;
  size: SizeEnum;
  absolute: boolean;
  loading: boolean;
  background: string;
  theme: 'dark' | 'light';
}
import { unref } from 'vue';
import { createLoading } from './createLoading';
import type { LoadingProps } from './typing';
import type { Ref } from 'vue';

export interface UseLoadingOptions {
  target?: any;
  props?: Partial<LoadingProps>;
}

interface Fn {
  (): void;
}

export function useLoading(props: Partial<LoadingProps>): [Fn, Fn, (string) => void];
export function useLoading(opt: Partial<UseLoadingOptions>): [Fn, Fn, (string) => void];

export function useLoading(
  opt: Partial<LoadingProps> | Partial<UseLoadingOptions>,
): [Fn, Fn, (string) => void] {
  let props: Partial<LoadingProps>;
  let target: HTMLElement | Ref<ElRef> = document.body;

  if (Reflect.has(opt, 'target') || Reflect.has(opt, 'props')) {
    const options = opt as Partial<UseLoadingOptions>;
    props = options.props || {};
    target = options.target || document.body;
  } else {
    props = opt as Partial<LoadingProps>;
  }

  const instance = createLoading(props, undefined, true);

  const open = (): void => {
    const t = unref(target as Ref<ElRef>);
    if (!t) return;
    instance.open(t);
  };

  const close = (): void => {
    instance.close();
  };

  const setTip = (tip: string) => {
    instance.setTip(tip);
  };

  return [open, close, setTip];
}
export { default as LocalePicker } from './index.vue';
<template>
  <Dropdown placement="bottomRight">
    <SvgIcon name="locale" />
    <span v-if="showText" class="ml-1">{{ getLocaleText }}</span>
    <template #overlay>
      <Menu v-model:selectedKeys="selectedKeys" @click="handleMenuClick">
        <Menu.Item v-for="item in localeList" :key="item.lang">
          <a href="javascript:;">{{ item.icon }} {{ item.label }}</a>
        </Menu.Item>
      </Menu>
    </template>
  </Dropdown>
</template>
<script lang="ts" setup>
  import { ref, watchEffect, unref, computed } from 'vue';
  import { Dropdown, Menu } from 'ant-design-vue';
  import { useLocale } from '@/locales/useLocale';
  import type { LocaleType } from '@/locales/config';
  import { localeList } from '@/locales/config';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';

  const props = defineProps({
    /**
     * Whether to display text
     */
    showText: { type: Boolean, default: true },
    /**
     * Whether to refresh the interface when changing
     */
    reload: { type: Boolean },
  });

  const selectedKeys = ref<string[]>([]);

  const { changeLocale, getLocale } = useLocale();

  const getLocaleText = computed(() => {
    const key = selectedKeys.value[0];
    if (!key) {
      return '';
    }
    return localeList.find((item) => item.lang === key)?.label;
  });

  watchEffect(() => {
    selectedKeys.value = [unref(getLocale)];
  });

  async function toggleLocale(lang: LocaleType | string) {
    await changeLocale(lang as LocaleType);
    selectedKeys.value = [lang as string];
    props.reload && location.reload();
  }

  function handleMenuClick({ key }) {
    if (unref(getLocale) === key) {
      return;
    }
    toggleLocale(key as string);
  }
</script>
<template>
  <div class="huawei-charge">
    <div class="number">{{ battery.level }}%</div>
    <div class="contrast">
      <div class="circle"></div>
      <ul class="bubbles">
        <li v-for="i in 15" :key="i"></li>
      </ul>
    </div>
    <div class="charging">
      <div>{{ batteryStatus }}</div>
      <div v-show="Number.isFinite(battery.dischargingTime) && battery.dischargingTime != 0">
        剩余可使用时间：{{ calcDischargingTime }}
      </div>
      <span v-show="Number.isFinite(battery.chargingTime) && battery.chargingTime != 0">
        距离电池充满需要：{{ calcDischargingTime }}
      </span>
    </div>
  </div>
</template>

<script lang="ts">
  import { defineComponent } from 'vue';

  export default defineComponent({
    name: 'HuaweiCharge',
    // props: ['batteryStatus', 'battery', 'calcDischargingTime'],
    props: {
      battery: {
        // 电池对象
        type: Object,
        default: () => ({}),
      },
      calcDischargingTime: {
        // 电池剩余时间可用时间
        type: String,
        default: '',
      },
      batteryStatus: {
        // 电池状态
        type: String,
        validator: (val: string) => ['充电中', '已充满', '已断开电源'].includes(val),
      },
    },
  });
</script>

<style lang="less" scoped>
  .huawei-charge {
    .generate-columns(15);

    // @for $i from 0 through 15 {
    //   li:nth-child(#{$i}) {
    //     $width: 15 + random(15) + px;

    //     top: 50%;
    //     left: 15 + random(70) + px;
    //     width: $width;
    //     height: $width;
    //     transform: translate(-50%, -50%);
    //     animation: ~'moveToTop `Math.random(6) + 3`s ease-in-out -`Math.random(5000) / 1000`s infinite';
    //   }
    // }

    @keyframes trotate {
      50% {
        border-radius: 45% / 42% 38% 58% 49%;
      }

      100% {
        transform: translate(-50%, -50%) rotate(720deg);
      }
    }

    @keyframes moveToTop {
      90% {
        opacity: 1;
      }

      100% {
        opacity: 0.1;
        transform: translate(-50%, -180px);
      }
    }

    @keyframes hueRotate {
      100% {
        filter: contrast(15) hue-rotate(360deg);
      }
    }

    position: absolute;
    bottom: 20vh;
    left: 50vw;
    width: 300px;
    height: 400px;
    transform: translateX(-50%);
    .generate-columns(@n, @i: 0) when (@i =< @n) {
      .generate-columns(@n, (@i + 1));
      .column-@{i} {
        width: (@i * 100% / @n);
      }
      li:nth-child(@{i}) {
        @width: unit(~`Math.round(15 + Math.random() * 15) `, px);

        top: 50%;
        left: unit(~`Math.round(Math.random() * 70) `, px);
        width: @width;
        height: @width;
        transform: translate(-50%, -50%);
        animation: moveToTop unit(~`(Math.round(Math.random() * 6) + 3) `, s) ease-in-out
          unit(~`-(Math.random() * 5000 / 1000) `, s) infinite;
      }
    }

    .number {
      position: absolute;
      top: 27%;
      z-index: 10;
      width: 300px;
      font-size: 32px;
      color: #fff;
      text-align: center;
    }

    .contrast {
      width: 300px;
      height: 400px;
      overflow: hidden;
      background-color: #000;
      filter: contrast(15) hue-rotate(0);
      animation: hueRotate 10s infinite linear;

      .circle {
        position: relative;
        width: 300px;
        height: 300px;
        filter: blur(8px);
        box-sizing: border-box;

        &::after {
          position: absolute;
          top: 40%;
          left: 50%;
          width: 200px;
          height: 200px;
          background-color: #00ff6f;
          border-radius: 42% 38% 62% 49% / 45%;
          content: '';
          transform: translate(-50%, -50%) rotate(0);
          animation: trotate 10s infinite linear;
        }

        &::before {
          position: absolute;
          top: 40%;
          left: 50%;
          z-index: 10;
          width: 176px;
          height: 176px;
          background-color: #000;
          border-radius: 50%;
          content: '';
          transform: translate(-50%, -50%);
        }
      }

      .bubbles {
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 100px;
        height: 40px;
        background-color: #00ff6f;
        border-radius: 100px 100px 0 0;
        filter: blur(5px);
        transform: translate(-50%, 0);

        li {
          position: absolute;
          background: #00ff6f;
          border-radius: 50%;
        }
      }
    }

    .charging {
      font-size: 20px;
      text-align: center;
    }
  }
</style>
import LockScreen from './index.vue';

export { LockScreen };
<template>
  <transition name="slide-up">
    <LockScreen v-if="isLock && isMouted && $route.name != LOGIN_NAME" />
  </transition>
</template>

<script setup lang="ts">
  import LockScreen from './lockscreen.vue';
  import { computed, ref, onMounted, onUnmounted } from 'vue';
  import { useRoute } from 'vue-router';
  import { useLockscreenStore } from '@/store/modules/lockscreen';
  import { LOGIN_NAME } from '@/router/constant';

  const lockscreenStore = useLockscreenStore();
  const route = useRoute();
  const isLock = computed(() => lockscreenStore.isLock);
  const lockTime = computed(() => lockscreenStore.lockTime);
  const isMouted = ref(false);

  let timer;

  const timekeeping = () => {
    clearInterval(timer);
    if (route.name === LOGIN_NAME || isLock.value) return;
    // 设置不锁屏
    lockscreenStore.setLock(false);
    // 重置锁屏时间
    lockscreenStore.setLockTime();
    timer = setInterval(() => {
      // 锁屏倒计时递减
      lockscreenStore.setLockTime(lockTime.value - 1);
      if (lockTime.value <= 0) {
        // 设置锁屏
        lockscreenStore.setLock(true);
        return clearInterval(timer);
      }
      // console.log(lockTime.value, '锁屏倒计时')
    }, 1000);
  };

  onMounted(() => {
    document.addEventListener('mousedown', timekeeping);
    setTimeout(() => {
      isMouted.value = true;
    });
  });

  onUnmounted(() => document.removeEventListener('mousedown', timekeeping));
</script>

<style lang="less" scoped>
  .slide-up-enter-active {
    animation: slide-up 0.5s;
  }

  .slide-up-leave-active {
    animation: slide-up 0.5s reverse;
  }
  @keyframes slide-up {
    0% {
      transform: translateY(-100%);
    }

    100% {
      transform: translateY(0);
    }
  }
</style>
<template>
  <div
    :class="{ unLockLogin: state.isShowLogin }"
    class="lockscreen"
    @keyup="unLockLogin(true)"
    @mousedown.stop
    @contextmenu.prevent
  >
    <template v-if="!state.isShowLogin">
      <div class="lock-box">
        <div class="lock">
          <span class="lock-icon" title="解锁屏幕" @click="unLockLogin(true)">
            <lock-outlined />
            <unlock-outlined />
          </span>
        </div>
        <h6 class="tips">点击解锁</h6>
      </div>
      <!-- 小米 / 华为 充电-->
      <component
        :is="randomCompName"
        :battery="battery"
        :battery-status="batteryStatus"
        :calc-discharging-time="calcDischargingTime"
      />
    </template>
    <template v-if="state.isShowLogin">
      <div class="login-box">
        <Avatar :size="128">
          <template #icon>
            <user-outlined />
          </template>
        </Avatar>
        <div class="username">{{ state.loginForm.username }}</div>
        <a-input-search
          v-model:value="state.loginForm.password"
          type="password"
          autofocus
          placeholder="请输入登录密码"
          size="large"
          @search="onLogin"
        >
          <template #enterButton>
            <LoadingOutlined v-if="state.loginLoading" />
            <arrow-right-outlined v-else />
          </template>
        </a-input-search>
        <a style="margin-top: 10px" @click="nav2login">重新登录</a>
      </div>
    </template>
    <template v-if="!state.isShowLogin">
      <div class="local-time">
        <div class="time">{{ hour }}:{{ minute }}</div>
        <div class="date">{{ month }}月{{ day }}号，星期{{ week }}</div>
      </div>
      <div class="computer-status">
        <span :class="{ offline: !online }" class="network">
          <WifiOutlined class="network" />
        </span>
        <ApiOutlined />
      </div>
    </template>
  </div>
</template>

<script setup lang="ts">
  import { reactive } from 'vue';
  import { Avatar, message } from 'ant-design-vue';
  import {
    LockOutlined,
    LoadingOutlined,
    UnlockOutlined,
    UserOutlined,
    ApiOutlined,
    ArrowRightOutlined,
    WifiOutlined,
  } from '@ant-design/icons-vue';

  import { useRouter, useRoute } from 'vue-router';
  import { useOnline } from '@/framework/hooks/useOnline';
  import { useTime } from '@/framework/hooks/useTime';
  // import md5 from 'blueimp-md5'
  import HuaweiCharge from './huawei-charge.vue';
  import XiaomiCharge from './xiaomi-charge.vue';
  import { useBattery } from '@/framework/hooks/useBattery';
  import { useLockscreenStore } from '@/store/modules/lockscreen';
  import { useUserStore } from '@/store/modules/user';
  import { LOGIN_NAME } from '@/router/constant';
  import { Storage } from "@/framework/utils/Storage";
  
  const lockscreenStore = useLockscreenStore();
  const userStore = useUserStore();
  // const isLock = computed(() => lockscreenStore.isLock);
  // 获取本地时间
  const { month, day, hour, minute, week } = useTime();
  const { online } = useOnline();

  const router = useRouter();
  const route = useRoute();

  const { battery, batteryStatus, calcDischargingTime } = useBattery();

  const randomCompName = Math.random() > 0.48 ? XiaomiCharge : HuaweiCharge;

  const state = reactive({
    isShowLogin: false,
    loginLoading: false, // 正在登录
    loginForm: {
      username: userStore.name,
      password: '',
    },
  });

  // 解锁登录
  const unLockLogin = (val: boolean) => (state.isShowLogin = val);

  // 登录
  const onLogin = async () => {
    if (state.loginForm.password.trim() == '') return message.warn('请填写密码');
    // const params = { ...state.loginForm };
    state.loginLoading = true;
    // params.password = md5(params.password)
    // const { code, message: msg } = await userStore.login(params).finally(() => {
    //   state.loginLoading = false;
    //   message.destroy();
    // });
    // if (code == 0) {
    //   Modal.destroyAll();
    //   message.success('登录成功！');
    //   unLockLogin(false);
    //   lockscreenStore.setLock(false);
    // } else {
    //   message.info(msg || '登录失败');
    // }
    console.log(userStore.getRoles[0].id);
    const roleId = userStore.getRoles[0].id
    const Role = {
      1: 'ORG',
      2: 'COMAPNY',
      3: 'LAB',
      4: 'EXPERT'
    }
    let data = {
      password: state.loginForm.password,
      role: Role[roleId],
      username: userStore.userInfo.username,
    }
    try {
      await userStore.login(data, roleId)
      lockscreenStore.setLock(false);
    } catch (error) {
      state.loginLoading = false;
      return Promise.reject(error);
    }
    state.loginLoading = false;
  };

  const nav2login = async () => {
    unLockLogin(false);
    lockscreenStore.setLock(false);
    // 重新登录
    // router.replace({
    //   name: LOGIN_NAME,
    //   query: {
    //     redirect: route.fullPath,
    //   },
    // });
    await userStore.logout()
    message.success('成功退出登录');
    // 移除标签页
    localStorage.clear();
    router.replace({
      name: LOGIN_NAME,
      // query: {
      //   redirect: route.fullPath,
      // },
    });
  };
</script>

<style lang="less" scoped>
  .lockscreen {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 9999;
    display: flex;
    overflow: hidden;
    color: white;
    background: #000;

    &.unLockLogin {
      background-color: rgba(25, 28, 34, 0.78);
      backdrop-filter: blur(7px);
    }

    .login-box {
      position: absolute;
      top: 45%;
      left: 50%;
      display: flex;
      transform: translate(-50%, -50%);
      flex-direction: column;
      justify-content: center;
      align-items: center;

      > * {
        margin-bottom: 14px;
      }

      .username {
        font-size: 30px;
      }
    }

    .lock-box {
      position: absolute;
      top: 12vh;
      left: 50%;
      font-size: 34px;
      transform: translateX(-50%);

      .tips {
        color: white;
        cursor: text;
      }

      .lock {
        display: flex;
        justify-content: center;

        .lock-icon {
          cursor: pointer;

          .anticon-unlock {
            display: none;
          }

          &:hover .anticon-unlock {
            display: initial;
          }

          &:hover .anticon-lock {
            display: none;
          }
        }
      }
    }

    .local-time {
      position: absolute;
      bottom: 60px;
      left: 60px;
      font-family: helvetica;

      .time {
        font-size: 70px;
      }

      .date {
        font-size: 40px;
      }
    }

    .computer-status {
      position: absolute;
      right: 60px;
      bottom: 60px;
      font-size: 24px;

      > * {
        margin-left: 14px;
      }

      .network {
        position: relative;

        &.offline::before {
          position: absolute;
          top: 50%;
          left: 50%;
          z-index: 10;
          width: 2px;
          height: 28px;
          background-color: red;
          content: '';
          transform: translate(-50%, -50%) rotate(45deg);
        }
      }
    }
  }
</style>
<template>
  <div class="xiaomi-charge">
    <div v-for="i in 3" :key="i" class="outer">
      <div class="circle" :style="{ transform: `scale(${1.01 - 0.04 * (i - 1)})` }"></div>
    </div>
    <div class="line-box">
      <div class="line-left"></div>
      <div class="line-left line-right"></div>
      <div class="line-center line-center-left-2"></div>
      <div class="line-center line-center-left-1"></div>
      <div class="line-center"></div>
      <div class="line-center line-center-right-1"></div>
      <div class="line-center line-center-right-2"></div>
    </div>
    <div class="outer" style="transform: scale(0.68)">
      <div class="circle circle-blur" style="padding: 30px"></div>
    </div>
    <div v-for="i in 4" :key="i" class="outer">
      <div
        class="circle-white"
        :style="{
          transform: `scale(${1 - 0.02 * (i - 1)})`,
          animationDuration: `${500 - 20 * (i - 1)}ms`,
        }"
      ></div>
    </div>
    <div class="outer">
      <div class="text">{{ battery.level }}<span class="sub">%</span></div>
    </div>
    <div class="light"></div>
  </div>
</template>

<script lang="ts">
  import { defineComponent } from 'vue';

  export default defineComponent({
    name: 'XiaomiCharge',
    props: {
      battery: {
        // 电池对象
        type: Object,
        default: () => ({}),
      },
    },
  });
</script>

<style lang="less" scoped>
  .xiaomi-charge {
    @keyframes rotate {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    @keyframes up {
      0% {
        transform: translateY(80px);
      }

      100% {
        transform: translateY(-400px);
      }
    }

    @keyframes light {
      0% {
        opacity: 0.3;
        transform: scale(0.3);
      }

      40% {
        opacity: 0.6;
        transform: scale(1);
      }

      100% {
        opacity: 0;
        transform: scale(0.3);
      }
    }

    position: absolute;
    bottom: 0;
    left: 50vw;
    display: flex;
    width: 300px;
    height: 400px;
    transform: translateX(-50%);
    justify-content: center;

    .circle {
      position: absolute;
      width: 286px;
      height: 286px;
      padding: 2px;
      background: linear-gradient(#c71ff1, #2554ea);
      border-radius: 50%;
    }

    .circle::after {
      display: block;
      width: 100%;
      height: 100%;
      background: #000;
      border-radius: 50%;
      content: ' ';
    }

    .circle-blur {
      filter: blur(5px);
      animation: rotate 5s linear infinite;
    }

    .circle-white {
      position: absolute;
      width: 220px;
      height: 220px;
      border-top: solid 1px rgba(255, 255, 255, 0.06);
      border-bottom: solid 1px rgba(255, 255, 255, 0.08);
      border-radius: 50%;
      animation: rotate 500ms linear infinite;
    }

    .outer {
      position: absolute;
      bottom: 400px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .line-box {
      position: absolute;
      bottom: 0;
      width: 80px;
      height: 400px;
      overflow: hidden;
      background: #000;
    }

    .line-left {
      position: absolute;
      bottom: 0;
      left: -15px;
      width: 30px;
      height: 267px;
      border-top: solid 2px #2554ea;
      border-right: solid 2px #2554ea;
      border-top-right-radius: 40px;
      box-sizing: border-box;
    }

    .line-left::before {
      position: absolute;
      top: -8px;
      left: 0;
      width: 30px;
      height: 100%;
      border-top: solid 2px #2554ea;
      border-right: solid 2px #2554ea;
      border-top-right-radius: 50px;
      content: '';
      transform: scaleY(0.96);
      box-sizing: border-box;
      transform-origin: center top;
    }

    .line-left::after {
      position: absolute;
      top: -14px;
      left: 0;
      width: 30px;
      height: 100%;
      border-top: solid 2px #2554ea;
      border-right: solid 2px #2554ea;
      border-top-right-radius: 60px;
      content: '';
      transform: scaleY(0.92);
      box-sizing: border-box;
      transform-origin: center top;
    }

    .line-right {
      transform: scaleX(-1);
      transform-origin: 55px;
    }

    .line-center {
      position: absolute;
      top: 0;
      left: 39px;
      width: 2px;
      height: 100%;
      background: #231779;
    }

    .line-center::before {
      position: absolute;
      bottom: 10px;
      width: 2px;
      height: 80px;
      background: linear-gradient(#79ccea, transparent);
      border-top-right-radius: 2px;
      border-top-left-radius: 2px;
      content: '';
      animation: up 700ms linear infinite;
    }

    .line-center-left-1 {
      transform: translateX(-9px);
    }

    .line-center-left-2 {
      transform: translateX(-18px);
    }

    .line-center-right-1 {
      transform: translateX(9px);
    }

    .line-center-right-2 {
      transform: translateX(18px);
    }

    .line-center-left-1::before {
      animation-delay: -200ms;
    }

    .line-center-left-2::before {
      animation-delay: -400ms;
    }

    .line-center-right-1::before {
      animation-delay: -300ms;
    }

    .line-center-right-2::before {
      animation-delay: -500ms;
    }

    .text {
      position: absolute;
      width: 200px;
      height: 80px;
      font-size: 70px;
      line-height: 80px;
      color: turquoise;
      text-align: center;
    }

    .sub {
      font-size: 30px;
    }

    .light {
      position: absolute;
      bottom: -150px;
      width: 300px;
      height: 350px;
      background: radial-gradient(#2554ea, transparent 60%);
      border-radius: 50%;
      animation: light 1.2s linear 1 forwards;
    }
  }
</style>
<template>
  <Progress v-bind="myProps" />
</template>

<script lang="ts" setup>
  import { computed, PropType } from 'vue';
  import { Progress } from 'ant-design-vue';
  import { progressProps, type ProgressProps } from 'ant-design-vue/lib/progress/props';

  type StrokeColorType = ProgressProps['strokeColor'];
  type StrokeColorFn = (percent) => StrokeColorType;

  const props = defineProps({
    ...progressProps(),
    strokeColor: {
      type: [String, Object, Function] as PropType<StrokeColorType | StrokeColorFn>,
    },
  });

  const myProps = computed(() => {
    if (typeof props.strokeColor === 'function') {
      return {
        ...props,
        strokeColor: props.strokeColor(props.percent),
      };
    } else {
      return {
        ...props,
        strokeColor: props.strokeColor as StrokeColorType,
      };
    }
  });
</script>
import SplitPanel from './index.vue';

export { SplitPanel };
<template>
  <div class="split-wrapper">
    <div ref="scalable" class="scalable">
      <div class="left-content">
        <slot name="left-content"> 右边内容区 </slot>
      </div>
      <div ref="separator" class="separator" @mousedown="startDrag"><i></i><i></i></div>
    </div>
    <div class="right-content">
      <slot name="right-content"> 右边内容区 </slot>
    </div>
  </div>
</template>

<script setup lang="ts">
  import { ref } from 'vue';

  import { throttle } from 'lodash-es';

  const scalable = ref<HTMLDivElement>();

  let startX: number;
  let startWidth: number;

  // 拖拽中
  // @throttle(20)
  const onDrag = throttle(function (e: MouseEvent) {
    scalable.value && (scalable.value.style.width = startWidth + e.clientX - startX + 'px');
  }, 20);

  // 拖拽结束
  const dragEnd = () => {
    document.documentElement.style.userSelect = 'unset';
    document.documentElement.removeEventListener('mousemove', onDrag);
    document.documentElement.removeEventListener('mouseup', dragEnd);
  };

  // 鼠标按下
  const startDrag = (e: MouseEvent) => {
    startX = e.clientX;
    scalable.value && (startWidth = parseInt(window.getComputedStyle(scalable.value).width, 10));

    document.documentElement.style.userSelect = 'none';
    document.documentElement.addEventListener('mousemove', onDrag);
    document.documentElement.addEventListener('mouseup', dragEnd);
  };
</script>

<style lang="less">
  .split-wrapper {
    display: flex;
    width: 100%;
    height: 100%;
    background-color: white;

    .scalable {
      position: relative;
      width: 240px;
      max-width: 50vw;
      min-width: 100px;
      overflow: auto;

      .left-content {
        height: 100%;
        padding: 12px 20px 12px 12px;
      }

      .separator {
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        width: 14px;
        height: 100%;
        cursor: col-resize;
        background-color: white;
        box-shadow: -4px -2px 4px -5px rgba(0, 0, 0, 0.35), 4px 3px 4px -5px rgba(0, 0, 0, 0.35);
        align-items: center;
        justify-content: center;

        i {
          width: 1px;
          height: 14px;
          margin: 0 1px;
          background-color: #e9e9e9;
        }
      }
    }

    .right-content {
      flex: 1;
    }

    .left-content,
    .right-content {
      overflow: auto;
    }
  }
</style>
import SvgIcon from './svg-icon.vue';

export { SvgIcon };
<template>
  <svg v-bind="$attrs" class="svg-icon" :style="getStyle" aria-hidden="true">
    <use :xlink:href="symbolId" />
  </svg>
</template>

<script lang="ts" setup>
  import { computed, type CSSProperties } from 'vue';

  const props = defineProps({
    prefix: {
      type: String,
      default: 'svg-icon',
    },
    name: {
      type: String,
      required: true,
    },
    size: {
      type: [Number, String],
      default: 16,
    },
  });

  const symbolId = computed(() => `#${props.prefix}-${props.name}`);

  const getStyle = computed((): CSSProperties => {
    const { size } = props;
    const s = `${size}`.replace('px', '').concat('px');
    return {
      width: s,
      height: s,
    };
  });
</script>

<style lang="less">
  .svg-icon {
    overflow: hidden;
    vertical-align: -0.15em;
    fill: currentColor;
  }
</style>
export { default as TitleI18n } from './index.vue';
<template>
  <i18n-t tag="span" :keypath="getTitle" scope="global" />
</template>

<script setup lang="ts">
  import type { PropType } from 'vue';
  import { computed } from 'vue';
  import { useLocaleStore } from '@/store/modules/locale';

  const props = defineProps({
    title: {
      type: [String, Object] as PropType<string | Title18n>,
      required: true,
      default: '',
    },
  });

  const localeStore = useLocaleStore();

  const getTitle = computed(() => {
    const { title = '' } = props;
    if (typeof title === 'object') {
      return title?.[localeStore.locale] ?? title;
    }
    return title;
  });
</script>

/**
 * 判断是否处在HCBrowser环境下
 */
export const isHcBrowser = () => {
  if (!window.getPluginObject) {
    return false
  } else {
    return true
  }
}

/**
 * 获取MAC地址
 */
export const getMacAddress = () => {
  if (!isHcBrowser()) {
    return ''
  }
  let util:string = getPluginObject('HC.Plugin.Utility')
  return util.GetMacAddress()
}

/**
 * 打印单张标签
 * @param {String} tmpl
 * @param {Object} data
 */
export const printRFIDTag = (tmpl: string, data: any) => {
  if (!isHcBrowser()) {
    return
  }
  let printer = getPluginObject('HC.Plugin.Print.LabelPrinter')
  return new Promise((resolve, reject) => {
    printer.PrintLabel(tmpl, data).then(function (res) {
      resolve(res)
    }).catch(function (reason) {
      reject(reason)
    })
  })
}

/**
 * 打印标签列表
 * @param {String} tmpl
 * @param {Array} list
 */
export const printRFIDTags = (tmpl: string, list: any[]) => {
  if (!isHcBrowser()) {
    return
  }
  let printer = getPluginObject('HC.Plugin.Print.LabelPrinter')
  return new Promise((resolve, reject) => {
    printer.PrintLabelList(tmpl, list).then(function (res) {
      resolve(res)
    }).catch(function (reason) {
      reject(reason)
    })
  })
}
export { default as DraggableModal } from "./src/index.vue";
export { useFormModal, useModal, install as default } from "./src/useModal";
<template>
  <teleport :to="getContainer()">
    <div ref="modalWrapRef" class="custom-modal" :class="{ fullscreen: fullscreenModel }">
      <Modal
        v-bind="{ ...$attrs, ...props }"
        v-model:visible="visibleModel"
        :maskClosable="false"
        :getContainer="() => modalWrapRef"
        :width="innerWidth || width"
        @ok="emit('ok')"
        @cancel="emit('cancel')"
      >
        <template #title>
          <slot name="title">{{ $attrs.title || "标题" }}</slot>
        </template>
        <template #closeIcon>
          <slot name="closeIcon">
            <Space @click.stop class="ant-modal-operate">
              <FullscreenOutlined @click="fullscreenModel = true" v-if="!fullscreenModel" />
              <FullscreenExitOutlined @click="restore" v-else />
              <CloseOutlined @click="closeModal" />
            </Space>
          </slot>
        </template>
        <slot>
          ① 窗口可以拖动；<br />
          ② 窗口可以通过八个方向改变大小；<br />
          ③ 窗口可以最小化、最大化、还原、关闭；<br />
          ④ 限制窗口最小宽度/高度。
        </slot>
        <template v-if="$slots.footer" #footer>
          <slot name="footer"></slot>
        </template>
      </Modal>
    </div>
  </teleport>
</template>

<script lang="ts" setup>
import { nextTick, ref, watch } from "vue";
import { Modal, Space } from "ant-design-vue";
import { useVModel } from "@vueuse/core";
import { throttle } from "lodash-es";
import { CloseOutlined, FullscreenExitOutlined, FullscreenOutlined } from "@ant-design/icons-vue";

const name = "DraggableModal";

const props = defineProps({
  visible: {
    type: Boolean,
    default: false
  },
  fullscreen: {
    type: Boolean,
    default: false
  },
  width: {
    type: [Number, String],
    default: 520
  },
  getContainer: {
    type: Function,
    default: () => document.body
  },
  destroyOnClose: Boolean
});

const emit = defineEmits(["update:visible", "update:fullscreen", "ok", "cancel"]);

const visibleModel = useVModel(props, "visible");
const fullscreenModel = ref(props.fullscreen);
const innerWidth = ref("");

const cursorStyle = {
  top: "n-resize",
  left: "w-resize",
  right: "e-resize",
  bottom: "s-resize",
  topLeft: "nw-resize",
  topright: "ne-resize",
  bottomLeft: "sw-resize",
  bottomRight: "se-resize",
  auto: "auto"
} as const;

// 是否已经初始化过了
let inited = false;
const modalWrapRef = ref<HTMLDivElement>();

const closeModal = () => {
  visibleModel.value = false;
  emit("cancel");
};

// 居中弹窗
const centerModal = async () => {
  await nextTick();
  const modalEl = modalWrapRef.value?.querySelector<HTMLDivElement>(".ant-modal");

  if (modalEl && modalEl.getBoundingClientRect().left < 1) {
    modalEl.style.left = (document.documentElement.clientWidth - modalEl.offsetWidth) / 2 + "px";
  }
};

const restore = async () => {
  fullscreenModel.value = false;
  centerModal();
};

const registerDragTitle = (dragEl: HTMLDivElement, handleEl: HTMLDivElement) => {
  handleEl.style.cursor = "move";
  handleEl.onmousedown = throttle((e: MouseEvent) => {
    if (fullscreenModel.value) return;
    document.body.style.userSelect = "none";
    const disX = e.clientX - dragEl.getBoundingClientRect().left;
    const disY = e.clientY - dragEl.getBoundingClientRect().top;
    const mousemove = (event: MouseEvent) => {
      if (fullscreenModel.value) return;
      let iL = event.clientX - disX;
      let iT = event.clientY - disY;
      const maxL = document.documentElement.clientWidth - dragEl.offsetWidth;
      const maxT = document.documentElement.clientHeight - dragEl.offsetHeight;

      iL <= 0 && (iL = 0);
      iT <= 0 && (iT = 0);
      iL >= maxL && (iL = maxL);
      iT >= maxT && (iT = maxT);

      dragEl.style.left = iL + "px";
      dragEl.style.top = iT + "px";
    };
    const mouseup = () => {
      document.removeEventListener("mousemove", mousemove);
      document.removeEventListener("mouseup", mouseup);
      document.body.style.userSelect = "auto";
    };

    document.addEventListener("mousemove", mousemove);
    document.addEventListener("mouseup", mouseup);
  }, 20);
};

const initDrag = async () => {
  await nextTick();
  const modalWrapRefEl = modalWrapRef.value!;
  const modalWrapEl = modalWrapRefEl.querySelector<HTMLDivElement>(".ant-modal-wrap");
  const modalEl = modalWrapRefEl.querySelector<HTMLDivElement>(".ant-modal");
  if (modalWrapEl && modalEl) {
    centerModal();
    const headerEl = modalEl.querySelector<HTMLDivElement>(".ant-modal-header");
    headerEl && registerDragTitle(modalEl, headerEl);

    modalWrapEl.onmousemove = throttle((event: MouseEvent) => {
      if (fullscreenModel.value) return;
      const left = event.clientX - modalEl.offsetLeft;
      const top = event.clientY - modalEl.offsetTop;
      const right = event.clientX - modalEl.offsetWidth - modalEl.offsetLeft;
      const bottom = event.clientY - modalEl.offsetHeight - modalEl.offsetTop;
      const isLeft = left <= 0 && left > -8;
      const isTop = top < 5 && top > -8;
      const isRight = right >= 0 && right < 8;
      const isBottom = bottom > -5 && bottom < 8;
      // 向左
      if (isLeft && top > 5 && bottom < -5) {
        modalWrapEl.style.cursor = cursorStyle.left;
        // 向上
      } else if (isTop && left > 5 && right < -5) {
        modalWrapEl.style.cursor = cursorStyle.top;
        // 向右
      } else if (isRight && top > 5 && bottom < -5) {
        modalWrapEl.style.cursor = cursorStyle.right;
        // 向下
      } else if (isBottom && left > 5 && right < -5) {
        modalWrapEl.style.cursor = cursorStyle.bottom;
        // 左上角
      } else if (left > -8 && left <= 5 && top <= 5 && top > -8) {
        modalWrapEl.style.cursor = cursorStyle.topLeft;
        // 左下角
      } else if (left > -8 && left <= 5 && bottom <= 5 && bottom > -8) {
        modalWrapEl.style.cursor = cursorStyle.bottomLeft;
        // 右上角
      } else if (right < 8 && right >= -5 && top <= 5 && top > -8) {
        modalWrapEl.style.cursor = cursorStyle.topright;
        // 右下角
      } else if (right < 8 && right >= -5 && bottom <= 5 && bottom > -8) {
        modalWrapEl.style.cursor = cursorStyle.bottomRight;
      } else {
        modalWrapEl.style.cursor = cursorStyle.auto;
      }
    }, 20);
    modalWrapEl.onmousedown = (e: MouseEvent) => {
      if (fullscreenModel.value) return;
      const iParentTop = modalEl.getBoundingClientRect().top;
      const iParentLeft = modalEl.getBoundingClientRect().left;
      const disX = e.clientX - iParentLeft;
      const disY = e.clientY - iParentTop;
      const iParentWidth = modalEl.offsetWidth;
      const iParentHeight = modalEl.offsetHeight;

      const cursor = modalWrapEl.style.cursor;

      const mousemove = throttle((event: MouseEvent) => {
        if (fullscreenModel.value) return;
        if (cursor !== cursorStyle.auto) {
          document.body.style.userSelect = "none";
        }
        // 向左边拖拽
        if (cursor === cursorStyle.left) {
          modalEl.style.left = event.clientX - disX + "px";
          modalEl.style.width = iParentWidth + iParentLeft - event.clientX + "px";
          // 向上边拖拽
        } else if (cursor === cursorStyle.top) {
          modalEl.style.top = event.clientY - disY + "px";
          modalEl.style.height = iParentHeight + iParentTop - event.clientY + "px";
          // 向右边拖拽
        } else if (cursor === cursorStyle.right) {
          modalEl.style.width = event.clientX - iParentLeft + "px";
          // 向下拖拽
        } else if (cursor === cursorStyle.bottom) {
          modalEl.style.height = event.clientY - iParentTop + "px";
          // 左上角拖拽
        } else if (cursor === cursorStyle.topLeft) {
          modalEl.style.left = event.clientX - disX + "px";
          modalEl.style.top = event.clientY - disY + "px";
          modalEl.style.height = iParentHeight + iParentTop - event.clientY + "px";
          modalEl.style.width = iParentWidth + iParentLeft - event.clientX + "px";
          // 右上角拖拽
        } else if (cursor === cursorStyle.topright) {
          modalEl.style.top = event.clientY - disY + "px";
          modalEl.style.width = event.clientX - iParentLeft + "px";
          modalEl.style.height = iParentHeight + iParentTop - event.clientY + "px";
          // 左下角拖拽
        } else if (cursor === cursorStyle.bottomLeft) {
          modalEl.style.left = event.clientX - disX + "px";
          modalEl.style.width = iParentWidth + iParentLeft - event.clientX + "px";
          modalEl.style.height = event.clientY - iParentTop + "px";
          // 右下角拖拽
        } else if (cursor === cursorStyle.bottomRight) {
          modalEl.style.width = event.clientX - iParentLeft + "px";
          modalEl.style.height = event.clientY - iParentTop + "px";
        }
        innerWidth.value = modalEl.style.width;
      }, 20);

      const mouseup = () => {
        document.removeEventListener("mousemove", mousemove);
        document.removeEventListener("mouseup", mouseup);
        document.body.style.userSelect = "auto";
        modalWrapEl.style.cursor = cursorStyle.auto;
      };

      document.addEventListener("mousemove", mousemove);
      document.addEventListener("mouseup", mouseup);
    };
  }
  inited = true;
};

watch(visibleModel, async (val) => {
  if ((val && Object.is(inited, false)) || props.destroyOnClose) {
    initDrag();
  }
});
</script>

<style lang="less">
.custom-modal {
  &.fullscreen {
    .ant-modal {
      top: 0 !important;
      right: 0 !important;
      bottom: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
    }

    .ant-modal-content {
      width: 100% !important;
      height: 100% !important;
    }
  }

  .ant-modal {
    position: fixed;
    padding: 0;
    min-height: 200px;
    min-width: 200px;

    .ant-modal-close {
      top: 6px;
      right: 6px;

      &:hover,
      &:focus {
        color: rgba(0, 0, 0, 0.45);
      }

      .ant-space-item:hover .anticon,
      .ant-space-item:focus .anticon {
        color: rgba(0, 0, 0, 0.75);
        text-decoration: none;
      }

      .ant-modal-close-x {
        width: 50px;
        height: 50px;
        line-height: 44px;

        .ant-space {
          width: 100%;
          height: 100%;
        }
      }
    }

    .ant-modal-content {
      // width: ~'v-bind("props.width")px';
      display: flex;
      flex-direction: column;
      width: 100%;
      height: 100%;
      min-height: 200px;
      min-width: 200px;
      overflow: hidden;

      .ant-modal-body {
        flex: auto;
        overflow: auto;
        height: 100%;
      }

      .ant-modal-footer {
      }
    }
  }
}
</style>
import type { ModalProps } from 'ant-design-vue';
import { Ref } from "vue";

// 普通模态框
export interface HookModalProps extends Partial<ModalProps> {
  content?: string | JSX.Element | (() => JSX.Element);
  style?: Partial<CSSStyleDeclaration>;
  _closeModal?: () => void;
}

// 表单模态框
export interface FormModalProps<T = any> extends HookModalProps {
  /**
   * 接受返回一个boolean，返回 true 会关掉这个弹窗
   *
   * @name 表单结束后调用
   */
  onFinish?: (formData: T,formRef:Ref) => Promise<boolean | void>;
  /**
   * 接受返回一个boolean，返回 true 会关掉这个弹窗
   *
   * @name 表单验证失败时调用
   */
  onFail?: (formData: T) => any;
}
import type { App, ComponentInternalInstance } from 'vue';
import { createVNode, render, getCurrentInstance, nextTick } from 'vue';
import { MyModal } from './modal';
import type { HookModalProps } from './types';
export { useFormModal } from './useFormModal';

let _app: App;

export const useModal = () => {
  let _modalInstance: ComponentInternalInstance;
  const appContext = _app._context || getCurrentInstance()?.appContext;

  const getModalInstance = () => {
    if (_modalInstance) {
      return _modalInstance;
    }
    const container = document.createElement('div');
    const vnode = createVNode(MyModal);
    vnode.appContext = appContext;
    render(vnode, container);
    _modalInstance = vnode.component!;
    _modalInstance.props._closeModal = hide;
    return _modalInstance;
  };

  const hide = () => {
    Object.assign<any, HookModalProps>(_modalInstance?.props, { visible: false });
  };

  const show = async (props: HookModalProps) => {
    const modalInstance = getModalInstance();

    Object.assign<any, HookModalProps>(modalInstance?.props, {
      ...props,
      visible: true,
    });
    await nextTick();
  };

  return {
    show,
    hide,
  };
};

export type ModalInstance = ReturnType<typeof useModal>;

export const install = (app: App) => {
  _app = app;
};

export default install;
import BasicDrawer from "./src/index.vue";
export { BasicDrawer };

export { useDrawer } from "./src/useDrawer";
export { useFormDrawer } from "./src/useFormDrawer";
export { install as default } from "./src/useDrawer";

export * from "./src/typing";
<template>
  <div :class="prefixCls" :style="getStyle" v-if="showFooter || $slots.footer">
    <template v-if="!$slots.footer">
      <slot name="insertFooter"></slot>
      <a-button v-bind="cancelButtonProps" @click="handleClose" class="mr-2" v-if="showCancelBtn">
        {{ cancelText }}
      </a-button>
      <slot name="centerFooter"></slot>
      <a-button
        :type="okType"
        @click="handleOk"
        v-bind="okButtonProps"
        class="mr-2"
        :loading="confirmLoading"
        v-if="showOkBtn"
      >
        {{ okText }}
      </a-button>
      <slot name="appendFooter"></slot>
    </template>

    <template v-else>
      <slot name="footer"></slot>
    </template>
  </div>
</template>
<script lang="ts">
  import type { CSSProperties } from 'vue';
  import { defineComponent, computed } from 'vue';
  const prefixCls = 'htui-basic-drawer-footer'

  import { footerProps } from '../props';
  export default defineComponent({
    name: 'BasicDrawerFooter',
    props: {
      ...footerProps,
      height: {
        type: String,
        default: '60px',
      },
    },
    emits: ['ok', 'close'],
    setup(props, { emit }) {

      const getStyle = computed((): CSSProperties => {
        const heightStr = `${props.height}`;
        return {
          height: heightStr,
          lineHeight: heightStr,
        };
      });

      function handleOk() {
        emit('ok');
      }

      function handleClose() {
        emit('close');
      }
      return { handleOk, prefixCls, handleClose, getStyle };
    },
  });
</script>

<style lang="less">
  @prefix-cls: ~'@{namespace}-basic-drawer-footer';
  @footer-height: 60px;
  .@{prefix-cls} {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 0 12px 0 20px;
    text-align: right;
    background-color: @component-background;
    border-top: 1px solid @border-color-base;

    > * {
      margin-right: 8px;
    }
  }
</style>
<template>
  <BasicTitle v-if="!isDetail" :class="prefixCls">
    <slot name="title"></slot>
    {{ !$slots.title ? title : "" }}
  </BasicTitle>

  <div :class="[prefixCls, `${prefixCls}--detail`]" v-else>
    <span :class="`${prefixCls}__twrap`">
      <span @click="handleClose" v-if="showDetailBack">
        <ArrowLeftOutlined :class="`${prefixCls}__back`" />
      </span>
      <span v-if="title">{{ title }}</span>
    </span>

    <span :class="`${prefixCls}__toolbar`">
      <slot name="titleToolbar"></slot>
    </span>
  </div>
</template>
<script lang="ts">
import { defineComponent } from "vue";
import BasicTitle from "@/framework/components/basic/basic-title/index.vue";
import { ArrowLeftOutlined } from "@ant-design/icons-vue";
// import { propTypes } from "@/framework/utils/propTypes";

const prefixCls = "htui-basic-drawer-header";

export default defineComponent({
  name: "BasicDrawerHeader",
  components: { BasicTitle, ArrowLeftOutlined },
  props: {
    // isDetail: propTypes.bool,
    // showDetailBack: propTypes.bool,
    // title: propTypes.string
    isDetail: Boolean,
    showDetailBack: Boolean,
    title: String
  },
  emits: ["close"],
  setup(_, { emit }) {

    function handleClose() {
      emit("close");
    }

    return { prefixCls, handleClose };
  }
});
</script>

<style lang="less">
@prefix-cls: ~'@{namespace}-basic-drawer-header';
@footer-height: 60px;
.@{prefix-cls} {
  display: flex;
  height: 100%;
  align-items: center;

  &__back {
    padding: 0 12px;
    cursor: pointer;

    &:hover {
      color: @primary-color;
    }
  }

  &__twrap {
    flex: 1;
  }

  &__toolbar {
    padding-right: 50px;
  }
}
</style>
<template>
  <Drawer :class="prefixCls" @close="onClose" v-model:visible="visibleRef" v-bind="getBindValues">
    <template #title v-if="!$slots.title">
      <DrawerHeader
        :title="getMergeProps.title"
        :isDetail="isDetail"
        :showDetailBack="showDetailBack"
        @close="onClose"
      >
        <template #titleToolbar>
          <slot name="titleToolbar"></slot>
        </template>
      </DrawerHeader>
    </template>
    <template v-else #title>
      <slot name="title"></slot>
    </template>

    <ScrollContainer
      :style="getScrollContentStyle"
      v-loading="getLoading"
      :loading-tip="loadingText || $t('common.loadingText')"
    >
      <slot></slot>
    </ScrollContainer>
    <DrawerFooter v-bind="getProps" @close="onClose" @ok="handleOk" :height="getFooterHeight">
      <template #[item]="data" v-for="item in Object.keys($slots)">
        <slot :name="item" v-bind="data || {}"></slot>
      </template>
    </DrawerFooter>
  </Drawer>
</template>
<script lang="ts">
  import type { DrawerProps } from './typing';
  import type { CSSProperties } from 'vue';
  import {
    defineComponent,
    ref,
    computed,
    watch,
    unref,
    nextTick, toRaw
  } from "vue";
  import { Drawer } from 'ant-design-vue';
  import { isFunction, isNumber } from '@/framework/utils/is';
  import { deepMerge } from '@/framework/utils';
  import DrawerFooter from './components/DrawerFooter.vue';
  import DrawerHeader from './components/DrawerHeader.vue';
  import { ScrollContainer } from '@/framework/components/basic/container';
  import { basicProps } from './props';
  import { useAttrs } from '@/framework/hooks/useAttrs';
  import { useVModel } from "@vueuse/core";

  const prefixVar = 'htui'
  const prefixCls = 'htui-basic-drawer'

  export default defineComponent({
    components: { Drawer, ScrollContainer, DrawerFooter, DrawerHeader },
    inheritAttrs: false,
    props: basicProps,
    emits: ['visible-change', 'ok', 'close', 'register'],
    setup(props, { emit }) {
      // const visibleRef = ref(false);
      const visibleRef = useVModel(props, "visible");
      const attrs = useAttrs();
      const propsRef = ref<Partial<Nullable<DrawerProps>>>(null);

      const getMergeProps = computed((): DrawerProps => {
        return deepMerge(toRaw(props), unref(propsRef));
      });

      const getProps = computed((): DrawerProps => {
        const opt = {
          placement: 'right',
          ...unref(attrs),
          ...unref(props),
          // visible: unref(visibleRef),
        };
        opt.title = undefined;
        const { isDetail, width, wrapClassName, getContainer } = opt;
        if (isDetail) {
          if (!width) {
            opt.width = '100%';
          }
          const detailCls = `${prefixCls}__detail`;
          opt.class = wrapClassName ? `${wrapClassName} ${detailCls}` : detailCls;

          if (!getContainer) {
            // TODO type error?
            opt.getContainer = `.${prefixVar}-layout-content` as any;
          }
        }
        return opt as DrawerProps;
      });

      const getBindValues = computed((): DrawerProps => {
        return {
          ...attrs,
          ...unref(getProps),
        };
      });

      // Custom implementation of the bottom button,
      const getFooterHeight = computed(() => {
        const { footerHeight, showFooter } = unref(getProps);
        if (showFooter && footerHeight) {
          return isNumber(footerHeight)
            ? `${footerHeight}px`
            : `${footerHeight.replace('px', '')}px`;
        }
        return `0px`;
      });

      const getScrollContentStyle = computed((): CSSProperties => {
        const footerHeight = unref(getFooterHeight);
        return {
          position: 'relative',
          height: `calc(100% - ${footerHeight})`,
        };
      });

      const getLoading = computed(() => {
        return !!unref(getProps)?.loading;
      });

      watch(
        () => visibleRef.value,
        (visible) => {
          nextTick(() => {
            emit('visible-change', visible);
            // instance && drawerInstance.emitVisible?.(visible, instance.uid);
          });
        },
      );

      // Cancel event
      async function onClose(e: Recordable) {
        emit('close', e);
      }

      function handleOk() {
        emit('ok');
      }

      return {
        visibleRef,
        onClose,
        prefixCls,
        getMergeProps: getMergeProps as any,
        getScrollContentStyle,
        getProps: getProps as any,
        getLoading,
        getBindValues,
        getFooterHeight,
        handleOk,
      };
    },
  });
</script>
<style lang="less">
  @header-height: 60px;
  @detail-header-height: 40px;
  @prefix-cls: ~'@{namespace}-basic-drawer';
  @prefix-cls-detail: ~'@{namespace}-basic-drawer__detail';

  .@{prefix-cls} {
    .ant-drawer-wrapper-body {
      overflow: hidden;
    }

    .ant-drawer-close {
      &:hover {
        color: @error-color;
      }
    }

    .ant-drawer-body {
      height: calc(100% - @header-height);
      padding: 0;
      background-color: @component-background;

      .scrollbar__wrap {
        padding: 16px !important;
        margin-bottom: 0 !important;
      }

      > .scrollbar > .scrollbar__bar.is-horizontal {
        display: none;
      }
    }
  }

  .@{prefix-cls-detail} {
    position: absolute;

    .ant-drawer-header {
      width: 100%;
      height: @detail-header-height;
      padding: 0;
      border-top: 1px solid @border-color-base;
      box-sizing: border-box;
    }

    .ant-drawer-title {
      height: 100%;
    }

    .ant-drawer-close {
      height: @detail-header-height;
      line-height: @detail-header-height;
    }

    .scrollbar__wrap {
      padding: 0 !important;
    }

    .ant-drawer-body {
      height: calc(100% - @detail-header-height);
    }
  }
</style>
import type { PropType } from "vue";
import { transformI18n } from "@/framework/hooks/useI18n";

export const footerProps = {
  confirmLoading: { type: Boolean },
  /**
   * @description: Show close button
   */
  showCancelBtn: { type: Boolean, default: true },
  cancelButtonProps: Object as PropType<Recordable>,
  cancelText: { type: String, default: ()=>transformI18n("common.cancelText") },
  /**
   * @description: Show confirmation button
   */
  showOkBtn: { type: Boolean, default: true },
  okButtonProps: Object as PropType<Recordable>,
  okText: { type: String, default: ()=>transformI18n("common.okText") },
  okType: { type: String, default: "primary" },
  showFooter: { type: Boolean },
  footerHeight: {
    type: [String, Number] as PropType<string | number>,
    default: 60
  },
};
export const basicProps = {
  isDetail: { type: Boolean },
  title: { type: String, default: "" },
  loadingText: { type: String },
  showDetailBack: { type: Boolean, default: true },
  visible: { type: Boolean },
  loading: { type: Boolean },
  maskClosable: { type: Boolean, default: true },
  getContainer: {
    type: [Object, String] as PropType<any>
  },
  // closeFunc: {
  //   type: [Function, Object] as PropType<any>,
  //   default: null
  // },
  destroyOnClose: { type: Boolean },
  ...footerProps
};
import type { ButtonProps } from 'ant-design-vue/lib/button/buttonTypes';
import type { CSSProperties, VNodeChild, ComputedRef } from 'vue';
import type { ScrollContainerOptions } from "@/framework/components/basic/container";
import { Ref } from "vue";

export interface DrawerInstance {
  setDrawerProps: (props: Partial<DrawerProps> | boolean) => void;
  emitVisible?: (visible: boolean, uid: number) => void;
}

export interface ReturnMethods extends DrawerInstance {
  openDrawer: <T = any>(visible?: boolean, data?: T, openOnSet?: boolean) => void;
  closeDrawer: () => void;
  getVisible?: ComputedRef<boolean>;
}

export type RegisterFn = (drawerInstance: DrawerInstance, uuid?: string) => void;

export interface ReturnInnerMethods extends DrawerInstance {
  closeDrawer: () => void;
  changeLoading: (loading: boolean) => void;
  changeOkLoading: (loading: boolean) => void;
  getVisible?: ComputedRef<boolean>;
}



export type UseDrawerReturnType = [RegisterFn, ReturnMethods];

export type UseDrawerInnerReturnType = [RegisterFn, ReturnInnerMethods];

export interface DrawerFooterProps {
  showOkBtn: boolean;
  showCancelBtn: boolean;
  /**
   * Text of the Cancel button
   * @default 'cancel'
   * @type string
   */
  cancelText: string;
  /**
   * Text of the OK button
   * @default 'OK'
   * @type string
   */
  okText: string;

  /**
   * Button type of the OK button
   * @default 'primary'
   * @type string
   */
  okType: 'primary' | 'danger' | 'dashed' | 'ghost' | 'default';
  /**
   * The ok button props, follow jsx rules
   * @type object
   */
  okButtonProps: { props: ButtonProps; on: {} };

  /**
   * The cancel button props, follow jsx rules
   * @type object
   */
  cancelButtonProps: { props: ButtonProps; on: {} };
  /**
   * Whether to apply loading visual effect for OK button or not
   * @default false
   * @type boolean
   */
  confirmLoading: boolean;

  showFooter: boolean;
  footerHeight: string | number;
}
export interface DrawerProps extends DrawerFooterProps {
  isDetail?: boolean;
  loading?: boolean;
  showDetailBack?: boolean;
  visible?: boolean;
  /**
   * Built-in ScrollContainer component configuration
   * @type ScrollContainerOptions
   */
  scrollOptions?: ScrollContainerOptions;

  triggerWindowResize?: boolean;
  /**
   * Whether a close (x) button is visible on top right of the Drawer dialog or not.
   * @default true
   * @type boolean
   */
  closable?: boolean;

  /**
   * Whether to unmount child components on closing drawer or not.
   * @default false
   * @type boolean
   */
  destroyOnClose?: boolean;

  /**
   * Return the mounted node for Drawer.
   * @default 'body'
   * @type any ( HTMLElement| () => HTMLElement | string)
   */
  getContainer?: () => HTMLElement | string;

  /**
   * Whether to show mask or not.
   * @default true
   * @type boolean
   */
  mask?: boolean;

  /**
   * Clicking on the mask (area outside the Drawer) to close the Drawer or not.
   * @default true
   * @type boolean
   */
  maskClosable?: boolean;

  /**
   * Style for Drawer's mask element.
   * @default {}
   * @type object
   */
  maskStyle?: CSSProperties;

  /**
   * The title for Drawer.
   * @type any (string | slot)
   */
  title?: VNodeChild | JSX.Element;
  /**
   * The class name of the container of the Drawer dialog.
   * @type string
   */
  wrapClassName?: string;
  class?: string;
  /**
   * Style of wrapper element which **contains mask** compare to `drawerStyle`
   * @type object
   */
  wrapStyle?: CSSProperties;

  /**
   * Style of the popup layer element
   * @type object
   */
  drawerStyle?: CSSProperties;

  /**
   * Style of floating layer, typically used for adjusting its position.
   * @type object
   */
  bodyStyle?: CSSProperties;
  headerStyle?: CSSProperties;

  /**
   * Width of the Drawer dialog.
   * @default 256
   * @type string | number
   */
  width?: string | number;

  /**
   * placement is top or bottom, height of the Drawer dialog.
   * @type string | number
   */
  height?: string | number;

  /**
   * The z-index of the Drawer.
   * @default 1000
   * @type number
   */
  zIndex?: number;

  /**
   * The placement of the Drawer.
   * @default 'right'
   * @type string
   */
  placement?: 'top' | 'right' | 'bottom' | 'left';
  afterVisibleChange?: (visible?: boolean) => void;
  keyboard?: boolean;
  /**
   * Specify a callback that will be called when a user clicks mask, close button or Cancel button.
   */
  onClose?: (e?: Event) => void;
}
export interface DrawerActionType {
  scrollBottom: () => void;
  scrollTo: (to: number) => void;
  getScrollWrap: () => Element | null;
}
// 普通模态框
export interface HookDrawerProps extends Partial<DrawerProps> {
  content?: string | JSX.Element | (() => JSX.Element);
  closeFunc?: () => Promise<any>;
  okFunc?: ()=> Promise<any>;
}

// 表单模态框
export interface FormDrawerProps<T = any> extends HookDrawerProps {
  /**
   * 接受返回一个boolean，返回 true 会关掉这个弹窗
   *
   * @name 表单结束后调用
   */
  onFinish?: (formData: T,formRef:Ref) => Promise<boolean | void>;
  /**
   * 接受返回一个boolean，返回 true 会关掉这个弹窗
   *
   * @name 表单验证失败时调用
   */
  onFail?: (formData: T) => any;
}
import type {
  DrawerProps
} from './typing';
import {
  getCurrentInstance,
  nextTick, App, ComponentInternalInstance, createVNode, render
} from "vue";
import { HookDrawerProps } from "./typing";
import { myDrawer } from "./drawer";
let _app: App;

export const useDrawer = ()=>{
  let _modalInstance: ComponentInternalInstance;
  const appContext = _app._context || getCurrentInstance()?.appContext;
  const getModalInstance = () => {
    if (_modalInstance) {
      return _modalInstance;
    }
    const container = document.createElement('div');
    const vnode = createVNode(myDrawer);
    vnode.appContext = appContext;
    render(vnode, container);
    _modalInstance = vnode.component!;
    _modalInstance.props.closeFunc = hide
    return _modalInstance;
  };
  const hide = () => {
    const modalInstance = getModalInstance();
    Object.assign<any, HookDrawerProps>(modalInstance?.props, {
      visible: false,
    });
    return true;
  };

  const show = async (props: HookDrawerProps) => {
    const modalInstance = getModalInstance();
    Object.assign<any, HookDrawerProps>(modalInstance?.props, {
      ...props,
      visible: true,
    });
    await nextTick();
  };
  const setDrawerProps = (props)=>{
    const modalInstance = getModalInstance();
    Object.assign<any, DrawerProps>(modalInstance?.props, props);
  }

  return {
    show,hide,
    setDrawerProps
  }

}

export const install = (app: App) => {
  _app = app;
};
export { default as TableAction } from './table-action.vue';
export { default as QueryForm } from './query-form/index.vue';
export { default as ToolBar } from './tool-bar/index.vue';
<template>
  <div class="table-search">
    <schema-form ref="dynamicFormRef" :form-schema="formSchema">
      <template #operate-button>
        <span class="search-submitButtons" :style="{ float: 'right', overflow: 'hidden' }">
          <span>
            <a-button type="default" style="margin-right: 10px" @click="reset">
              {{ $t('common.resetText') }}
            </a-button>
            <a-button type="primary" @click="query"> {{ $t('common.queryText') }} </a-button>
          </span>
          <template v-if="formItemSchemas.length > 0 && formItemSchemas.length > defaultShowItems">
            <a style="margin-left: 8px" @click="toggleAdvanced">
              {{ advanced ? $t('component.form.putAway') : $t('component.form.unfold') }}
              <DownOutlined class="collapse-icon" />
            </a>
          </template>
        </span>
      </template>
    </schema-form>
  </div>
</template>

<script lang="ts">
  import { defineComponent, reactive, toRefs, computed, ref, nextTick } from 'vue';
  import { DownOutlined } from '@ant-design/icons-vue';
  import type { TableColumn } from '../../typing';
  import SchemaForm from '@/framework/components/core/schema-form/schema-form.vue';
  import type { FormItemSchema, FormProps } from '@/framework/components/core/schema-form/types/form';

  export default defineComponent({
    name: 'QueryForm',
    components: { DownOutlined, SchemaForm },
    props: {
      /** 默认显示个数 */
      defaultShowItems: {
        type: Number,
        default: 3,
      },
      /** 表单属性配置 */
      formProps: {
        type: Object as PropType<FormProps>,
        default: () => ({}),
      },
      columns: {
        type: Object as PropType<TableColumn[]>,
        required: true,
      },
    },
    emits: ['query', 'reset', 'toggle-advanced'],
    setup(props, { slots, emit }) {
      const state = reactive({
        advanced: false,
        labelMap: {},
      });

      const dynamicFormRef = ref<InstanceType<typeof SchemaForm>>();

      // 获取表格列key
      const getColumnKey = (column: TableColumn) => {
        return `${column.key || column.dataIndex || ''}`.split('.').pop() || '';
      };

      /**
       * @description 展开/收起 图标旋转转数
       */
      const turn = computed(() => `${state.advanced ? 0.5 : 0}turn`);

      const formSchema = computed(() => {
        return {
          schemas: !state.advanced
            ? formItemSchemas.value.slice(0, props.defaultShowItems)
            : formItemSchemas.value,
          labelWidth: 80,
          ...props.formProps,
        };
      });

      const formItemSchemas = computed<FormItemSchema[]>(() => {
        return props.columns
          .filter((n) => {
            const field = getColumnKey(n);
            return !n.hideInSearch && !!field && field !== '$action';
          })
          .map((n) => {
            return {
              field: n.formItemProps?.field ?? n.searchField ?? getColumnKey(n),
              component: 'Input',
              label: n.title,
              colProps: {
                span: 8,
              },
              ...n.formItemProps,
            };
          });
      });

      /**
       * @description 切换展开/收起 状态
       */
      const toggleAdvanced = async () => {
        state.advanced = !state.advanced;
        await nextTick();
        emit('toggle-advanced', state.advanced);
      };

      /**
       * @param {number} span 栅格占位格数
       */
      const calcSubBtnOffset = (span: number) => {
        const total = (state.advanced ? Object.keys(slots).length : props.defaultShowItems) * span;
        const remainder = total % 24;
        if (total < 24 || remainder === 0) {
          return 0;
        }
        return 24 - remainder;
      };

      const reset = async () => {
        dynamicFormRef.value?.resetFields();
        await query();
      };
      const query = async () => {
        const formModel = await dynamicFormRef.value?.validate();
        console.log('queryParams', formModel);

        emit('query', formModel);
      };

      return {
        ...toRefs(state),
        dynamicFormRef,
        turn,
        reset,
        query,
        calcSubBtnOffset,
        formSchema,
        formItemSchemas,
        toggleAdvanced,
      };
    },
  });
</script>

<style lang="less" scoped>
  .table-search {
    margin-bottom: 16px;
    padding: 24px 24px 0;
    background: #fff;
  }
  .search-submitButtons {
    display: block;
    margin-bottom: 24px;
    white-space: nowrap;
  }

  :deep(.ant-row) {
    width: 100%;
  }

  :deep(.ant-form-item) {
    margin-right: 0;
    &.operate-button {
      margin-bottom: 0;
    }
  }

  .collapse-icon {
    transform: rotate(v-bind(turn));
    transition: transform 0.3s;
  }
</style>
<template>
  <template v-for="(actionItem, index) in actionFilters" :key="`${index}-${actionItem.label}`">
    <component
      :title="actionItem.title"
      :is="actionItem.popConfirm ? Popconfirm : 'span'"
      v-bind="actionItem.popConfirm"
    >
      <a-button type="link" v-bind="actionItem">{{ actionItem.label }}</a-button>
    </component>
  </template>
</template>

<script lang="ts" setup>
  import { Popconfirm } from 'ant-design-vue';
  import type { PropType } from 'vue';
  import { computed } from 'vue';
  import type { ActionItem } from '../types/tableAction';
  import { verifyAuth } from '@/framework/core/permission/';
  import { isString, isObject } from '@/framework/utils/is';

  const props = defineProps({
    actions: {
      // 表格行动作
      type: Array as PropType<ActionItem[]>,
      default: () => [],
    },
  });

  const actionFilters = computed(() => {
    return props.actions.filter((item) => {
      const auth = item.auth;

      if (Object.is(auth, undefined)) {
        return true;
      }
      if (isString(auth)) {
        const isValid = verifyAuth(auth);
        item.disabled ??= !isValid;
        if (item.disabled && !isValid) {
          item.title = '对不起，您没有该操作权限！';
        }
        return isValid;
      }
      if (isObject(auth)) {
        const isValid = verifyAuth(auth.perm);
        const isDisable = auth.effect !== 'delete';
        item.disabled ??= !isValid && isDisable;
        if (item.disabled && !isValid) {
          item.title = '对不起，您没有该操作权限！';
        }
        return isValid || isDisable;
      }
    });
  });
</script>
<template>
  <Tooltip placement="top">
    <template #title>
      <span>{{ $t('component.table.settingColumn') }}</span>
    </template>
    <Popover
      placement="bottomLeft"
      trigger="click"
      @visible-change="handleVisibleChange"
      overlayClassName="cloumn-list"
    >
      <template #title>
        <div class="popover-title">
          <Checkbox :indeterminate="indeterminate" v-model:checked="checkAll">
            {{ $t('component.table.settingColumnShow') }}
          </Checkbox>
          <Checkbox v-model:checked="checkIndex" @change="handleIndexCheckChange">
            {{ $t('component.table.settingIndexColumnShow') }}
          </Checkbox>
          <Checkbox v-model:checked="checkBordered" @change="handleBorderedCheckChange">
            {{ $t('component.table.settingBordered') }}
          </Checkbox>
          <a-button size="small" type="link" @click="reset">
            {{ $t('common.resetText') }}
          </a-button>
        </div>
      </template>
      <template #content>
        <div ref="columnListRef">
          <template v-for="item in tableColumns" :key="table.getColumnKey(item)">
            <div class="check-item">
              <div style="padding: 4px 16px 8px 0">
                <DragOutlined class="table-column-drag-icon pr-6px cursor-move" />
                <Checkbox
                  v-model:checked="item.hideInTable"
                  :true-value="false"
                  :false-value="true"
                >
                  {{ item.title }}
                </Checkbox>
              </div>
              <div class="column-fixed">
                <Tooltip placement="bottomLeft" :mouseLeaveDelay="0.4">
                  <template #title> {{ $t('component.table.settingFixedLeft') }} </template>
                  <VerticalRightOutlined
                    class="fixed-left"
                    :class="{ active: item.fixed === 'left' }"
                    @click="handleColumnFixed(item, 'left')"
                  />
                </Tooltip>
                <Divider type="vertical" />
                <Tooltip placement="bottomLeft" :mouseLeaveDelay="0.4">
                  <template #title> {{ $t('component.table.settingFixedRight') }} </template>
                  <VerticalLeftOutlined
                    class="fixed-right"
                    :class="{ active: item.fixed === 'right' }"
                    @click="handleColumnFixed(item, 'right')"
                  />
                </Tooltip>
              </div>
            </div>
          </template>
        </div>
      </template>
      <SettingOutlined />
    </Popover>
  </Tooltip>
</template>

<script lang="ts" setup>
  import { computed, nextTick, ref, unref, watchEffect } from 'vue';
  import { Tooltip, Popover, Divider } from 'ant-design-vue';
  import {
    SettingOutlined,
    VerticalRightOutlined,
    VerticalLeftOutlined,
    DragOutlined,
  } from '@ant-design/icons-vue';
  import { useTableContext } from '../../hooks/useTableContext';
  import { cloneDeep } from 'lodash-es';
  import Checkbox from '@/framework/components/basic/check-box/index.vue';
  import type { TableColumn } from '../../typing';
  import { useSortable } from '@/framework/hooks/useSortable';
  import { isNullAndUnDef } from '@/framework/utils/is';

  const table = useTableContext();
  let inited = false;
  const defaultColumns = cloneDeep(table.columns);
  const defaultShowIndex = !!table.showIndex;
  const defaultBordered = table.bordered;

  const tableColumns = ref<TableColumn<any>[]>([]);

  const checkAll = computed<boolean>({
    get() {
      return tableColumns.value.length > 0 && tableColumns.value.every((n) => !n.hideInTable);
    },
    set(value) {
      tableColumns.value.forEach((item) => (item.hideInTable = !value));
    },
  });

  const checkIndex = ref(defaultShowIndex);
  const checkBordered = ref(table.bordered);
  const columnListRef = ref<HTMLDivElement>();

  // 初始化选中状态
  const initCheckStatus = () => {
    tableColumns.value = cloneDeep(defaultColumns);
    checkIndex.value = defaultShowIndex;
    checkBordered.value = defaultBordered;
    tableColumns.value.forEach((item) => (item.hideInTable ??= false));
  };
  initCheckStatus();

  const indeterminate = computed(() => {
    return (
      tableColumns.value.length > 0 &&
      tableColumns.value.some((n) => n.hideInTable) &&
      tableColumns.value.some((n) => !n.hideInTable)
    );
  });

  watchEffect(() => {
    table.setProps({ columns: tableColumns.value });
  });
  // 设置序号列
  const handleIndexCheckChange = (e) => {
    table.setProps({ showIndex: e.target.checked });
  };
  // 设置边框
  const handleBorderedCheckChange = (e) => {
    table.setProps({ bordered: e.target.checked });
  };

  const handleColumnFixed = (columItem: TableColumn<any>, direction: 'left' | 'right') => {
    columItem.fixed = columItem.fixed === direction ? false : direction;
  };

  async function handleVisibleChange() {
    if (inited) return;
    await nextTick();
    const columnListEl = unref(columnListRef);
    if (!columnListEl) return;

    // Drag and drop sort
    const { initSortable } = useSortable(columnListEl, {
      handle: '.table-column-drag-icon',
      onEnd: (evt) => {
        const { oldIndex, newIndex } = evt;

        if (isNullAndUnDef(oldIndex) || isNullAndUnDef(newIndex) || oldIndex === newIndex) {
          return;
        }
        // Sort column
        const columns = tableColumns.value;
        columns.splice(newIndex, 0, columns.splice(oldIndex, 1)[0]);
      },
    });
    initSortable();
    inited = true;
  }

  const reset = () => {
    initCheckStatus();
    table.setProps({ showIndex: defaultShowIndex, bordered: defaultBordered });
  };
</script>

<style lang="less" scoped>
  .check-item {
    @apply flex justify-between;
  }
  .column-fixed {
    .fixed-right,
    .fixed-left {
      &.active,
      &:hover {
        color: #1890ff;
      }
    }
  }
</style>
<template>
  <Space :size="8">
    <RefreshSetting />
    <ColumnSetting />
    <SizeSetting />
  </Space>
</template>

<script lang="ts" setup>
  import { Space } from 'ant-design-vue';
  import SizeSetting from './size-setting.vue';
  import RefreshSetting from './refresh-setting.vue';
  import ColumnSetting from './column-setting.vue';
</script>
<template>
  <Tooltip placement="top">
    <template #title>
      <span>{{ $t('common.redo') }}</span>
    </template>
    <RedoOutlined @click="redo" />
  </Tooltip>
</template>
<script lang="ts" setup>
  import { Tooltip } from 'ant-design-vue';
  import { RedoOutlined } from '@ant-design/icons-vue';
  import { useTableContext } from '../../hooks/useTableContext';

  const table = useTableContext();

  function redo() {
    table.refreshTable();
  }
</script>
<template>
  <Tooltip placement="top">
    <template #title>
      <span>{{ $t('component.table.settingDens') }}</span>
    </template>

    <Dropdown placement="bottomCenter" :trigger="['click']">
      <ColumnHeightOutlined />
      <template #overlay>
        <Menu @click="handleMenuClick" selectable v-model:selectedKeys="selectedKeysRef">
          <Menu.Item key="large">
            <span>{{ $t('component.table.settingDensDefault') }}</span>
          </Menu.Item>
          <Menu.Item key="middle">
            <span>{{ $t('component.table.settingDensMiddle') }}</span>
          </Menu.Item>
          <Menu.Item key="small">
            <span>{{ $t('component.table.settingDensSmall') }}</span>
          </Menu.Item>
        </Menu>
      </template>
    </Dropdown>
  </Tooltip>
</template>
<script lang="ts" setup>
  import { ref } from 'vue';
  import { Tooltip, Dropdown, Menu } from 'ant-design-vue';
  import type { TableProps } from 'ant-design-vue/lib/table/Table';
  import { ColumnHeightOutlined } from '@ant-design/icons-vue';
  import { useTableContext } from '../../hooks/useTableContext';

  type SizeType = NonNullable<TableProps['size']>;

  const table = useTableContext();

  const selectedKeysRef = ref<SizeType[]>([table.getProps?.size || 'large']);

  function handleMenuClick({ key }: { key: SizeType }) {
    selectedKeysRef.value = [key];
    table.setProps({
      size: key,
    });
  }
</script>
<template>
  <div class="flex justify-between p-y-16px">
    <slot name="headerTitle">
      <div class="title">
        {{ title }}
        <BasicHelp v-if="titleTooltip" class="ml-6px pt-3px" :text="titleTooltip" />
      </div>
    </slot>

    <div>
      <slot name="toolbar"></slot>
      <slot></slot>
      <Divider type="vertical" v-if="$slots.toolbar && showTableSetting" />
      <TableSetting v-if="showTableSetting" />
    </div>
  </div>
</template>

<script lang="ts" setup>
  import { Divider } from 'ant-design-vue';
  import BasicHelp from '@/framework/components/basic/basic-help/index.vue';
  import TableSetting from '../table-settings/index.vue';

  defineProps({
    title: {
      type: String,
      default: '',
    },
    titleTooltip: {
      type: String,
      default: '',
    },
    showTableSetting: {
      type: Boolean,
      default: true,
    },
  });
</script>

<style lang="less" scoped>
  .title {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    color: rgba(0, 0, 0, 0.85);
    font-weight: 500;
    font-size: 16px;
  }
</style>
<template>
  <div>
    <QueryForm
      v-if="search"
      ref="queryFormRef"
      :columns="columns"
      :formProps="formProps"
      @toggle-advanced="(e) => $emit('toggle-advanced', e)"
      @query="queryTable"
    />
    <div class="bg-white">
      <ToolBar
        v-if="showToolBar"
        :title="headerTitle"
        :titleTooltip="titleTooltip"
        :showTableSetting="showTableSetting"
      >
        <template #headerTitle v-if="$slots.headerTitle">
          <slot name="headerTitle"></slot>
        </template>
        <span v-if="exportFileName" class="ml-6px" @click="exportData2Excel">
          <slot name="export-button">
            <a-button type="primary">导出</a-button>
          </slot>
        </span>
        <template #toolbar v-if="$slots.toolbar">
          <Space><slot name="toolbar"></slot></Space>
        </template>
      </ToolBar>
      <Table
        ref="tableRef"
        v-bind="getBindValues"
        :dataSource="tableData"
        @change="handleTableChange"
      >
        <template
          v-for="slotName in defaultSlots.filter((name) => Reflect.has($slots, name))"
          #[slotName]="slotData"
          :key="slotName"
        >
          <slot :name="slotName" v-bind="slotData"></slot>
        </template>

        <!-- 个性化单元格 start -->
        <template
          v-for="slotName in ['bodyCell', 'headerCell']"
          #[slotName]="slotData"
          :key="slotName"
        >
          <slot :name="slotName" v-bind="slotData"></slot>
          <!-- 表格行操作start -->
          <template v-if="slotName === 'bodyCell' && getColumnKey(slotData.column) === '$action'">
            <TableAction :actions="slotData.column.actions(slotData)" />
          </template>
          <!-- 表格行操作end -->
          <template
            v-for="slotItem in getBindValues.columns?.filter((item) => item[slotName])"
            :key="getColumnKey(slotItem)"
          >
            <component
              :is="slotItem?.[slotName]?.(slotData)"
              v-if="getColumnKey(slotData.column) === getColumnKey(slotItem)"
            />
          </template>
        </template>
        <!-- 个性化单元格 end -->
      </Table>
    </div>
  </div>
</template>

<script lang="tsx">
  import {
    defineComponent,
    reactive,
    ref,
    toRefs,
    watchEffect,
    getCurrentInstance,
    computed,
    unref,
  } from 'vue';
  import { Table, Space } from 'ant-design-vue';
  import { usePagination, createTableContext, useExportData2Excel } from './hooks/';
  import type { TableColumn, OnChangeCallbackParams } from './typing';
  import { isBoolean, isObject } from '@/framework/utils/is';
  import { omit } from 'lodash-es';
  import { TableAction, QueryForm, ToolBar } from './components';
  import dynamicTableProps, { TableProps } from './props';
  import type { SchemaFormRef } from '@/framework/components/core/schema-form';

  export default defineComponent({
    name: 'DynamicTable',
    components: {
      Table,
      Space,
      TableAction,
      QueryForm,
      ToolBar,
    },
    inheritAttrs: false,
    props: dynamicTableProps,
    emits: ['change', 'toggle-advanced'],
    setup(props, { emit, slots }) {
      createTableContext(getCurrentInstance()!);

      const { exportData2Excel } = useExportData2Excel(getCurrentInstance()!);

      const { paginationRef } = usePagination(props.pagination);

      const tableRef = ref<InstanceType<typeof Table>>();
      const queryFormRef = ref<InstanceType<typeof QueryForm>>();

      const innerPropsRef = ref<Partial<TableProps>>();

      const getProps = computed(() => {
        return { ...props, ...unref(innerPropsRef) };
      });

      // 默认支持的插槽
      const defaultSlots = [
        'emptyText',
        'expandIcon',
        'title',
        'footer',
        'summary',
        'expandedRowRender',
        'customFilterIcon',
        'customFilterDropdown',
      ] as const;

      const state = reactive({
        expandItemRefs: {},
        tableData: [] as any[], // 表格数据
        loading: false, // 表格加载
      });

      // 如果外界设置了dataSource，那就直接用外界提供的数据
      watchEffect(() => {
        if (props.dataSource) {
          state.tableData = props.dataSource;
        }
      });

      const setProps = (props: Partial<TableProps>) => {
        innerPropsRef.value = { ...unref(innerPropsRef), ...props };
      };

      /**
       * @description 表格查询
       */
      const queryTable = (params) => {
        params.page = 1;
        fetchTableData(params);
      };

      /**
       * @param {object} params 表格查询参数
       * @param {boolean} flush 是否将页数重置到第一页
       * @description 获取表格数据
       */
      const fetchTableData = async (params = {}) => {
        // 如果用户没有提供dataSource并且dataRequest是一个函数，那就进行接口请求
        if (
          Object.is(props.dataSource, undefined) &&
          Object.prototype.toString.call(props.dataRequest).includes('Function')
        ) {
          const _pagination = unref(paginationRef)!;
          // 是否启用了分页
          const enablePagination = isObject(_pagination);
          const queryParams = {
            ...params,
          };
          if (enablePagination) {
            Object.assign(queryParams, {
              page: _pagination.current,
              limit: _pagination.pageSize,
              ...queryParams,
            });
          }
          state.loading = true;
          const data = await props
            ?.dataRequest?.(queryParams)
            .finally(() => (state.loading = false));

          if (data?.pagination) {
            const { page, size, total } = data.pagination;

            if (enablePagination && _pagination?.current) {
              // 有分页时,删除当前页最后一条数据时 往前一页查询
              if (data?.list.length === 0 && total > 0 && page > 1) {
                _pagination.current--;
                return refreshTable();
              }
            }

            Object.assign(unref(paginationRef), {
              current: ~~page,
              pageSize: ~~size,
              total: ~~total,
            });
          }
          if (Array.isArray(data?.list)) {
            state.tableData = data!.list;
          } else if (Array.isArray(data)) {
            state.tableData = data;
          } else {
            state.tableData = [];
          }
        }
      };

      /**
       * @description 刷新表格
       */
      const refreshTable = (flush = false) => {
        const pagination = unref(paginationRef);
        if (Object.is(flush, true) && isObject(pagination)) {
          pagination.current = 1;
        }
        fetchTableData();
      };

      fetchTableData();

      const getBindValues = computed(() => {
        const props = unref(getProps);
        const columns = (props.columns as TableColumn[]).filter((n) => !n.hideInTable);
        // 是否添加序号列
        if (props.showIndex) {
          columns.unshift({
            dataIndex: '$$index',
            title: '序号',
            width: 60,
            align: 'center',
            fixed: 'left',
            ...props.indexColumnProps,
            bodyCell: ({ index }) => {
              const getPagination = unref(paginationRef);
              if (isBoolean(getPagination)) {
                return <>{`${index + 1}`}</>;
              }
              const { current = 1, pageSize = 10 } = getPagination!;
              return <>{((current < 1 ? 1 : current) - 1) * pageSize + index + 1}</>;
            },
          });
        }
        let propsData: Recordable = {
          ...props,
          columns,
          rowKey: props.rowKey ?? 'id',
          loading: state.loading,
          tableLayout: 'fixed',
          pagination: unref(paginationRef),
        };
        if (slots.expandedRowRender) {
          propsData = omit(propsData, 'scroll');
        }

        propsData = omit(propsData, ['class', 'onChange']);
        return propsData;
      });

      /**
       * @description 分页改变
       */
      const handleTableChange: OnChangeCallbackParams = (...rest) => {
        // const [pagination, filters, sorter] = rest;
        const [pagination] = rest;
        if (Object.keys(pagination).length) {
          Object.assign(unref(paginationRef), pagination);
        }
        fetchTableData();
        emit('change', ...rest);
      };

      /**
       * 当外部需要动态改变搜索表单的值或选项时，需要调用此方法获取dynamicFormRef实例
       */
      const getQueryFormRef = () => {
        return queryFormRef.value?.dynamicFormRef as SchemaFormRef;
      };

      // dataIndex 可以为 a.b.c
      // const getDataIndexVal = (dataIndex, record) => dataIndex.split('.').reduce((pre, curr) => pre[curr], record)

      // 获取表格列key
      const getColumnKey = (column: TableColumn) => {
        return column?.key || column?.dataIndex;
      };

      return {
        ...toRefs(state),
        tableRef,
        queryFormRef,
        defaultSlots,
        getProps,
        getBindValues,
        getQueryFormRef,
        exportData2Excel,
        queryTable,
        setProps,
        getColumnKey,
        handleTableChange,
        refreshTable,
      };
    },
  });
</script>

<style lang="less" scoped>
  :deep(.ant-table-wrapper) {
    padding: 0 6px 6px 6px;
    .ant-table {
      .ant-table-title {
        display: flex;
      }

      .ant-image:hover {
        cursor: zoom-in;
      }

      .ant-btn {
        margin-right: 10px;
      }
    }
  }

  .actions > * {
    margin-right: 10px;
  }
</style>
export { useTableContext, createTableContext } from './useTableContext';
export { usePagination } from './usePagination';
export { useExportData2Excel } from './useExportData2Excel';
import { isEmpty } from 'lodash-es';
import { export_json_to_excel } from '@/framework/utils/Export2Excel';
import type { DynamicTableInstance } from '../typing';
import type { ComponentInternalInstance } from 'vue';

/**
 * 导出表格Excel
 */
export const useExportData2Excel = (_tableInstance: ComponentInternalInstance) => {
  const tableInstance = _tableInstance.proxy as unknown as DynamicTableInstance;

  const exportData2Excel = () => {
    const { columns, getColumnKey, tableData } = tableInstance;

    const theaders = columns.filter((n) => getColumnKey(n) && getColumnKey(n) !== '$action');

    if (tableInstance.exportFormatter) {
      const { header, data } = tableInstance.exportFormatter(theaders, tableData);
      if (isEmpty(header) || isEmpty(data)) {
        return;
      } else {
        export_json_to_excel({
          header,
          data,
          filename: tableInstance.exportFileName,
          bookType: tableInstance.exportBookType,
          autoWidth: tableInstance.exportAutoWidth,
        });
      }
    } else {
      export_json_to_excel({
        header: theaders.map((n) => n.title),
        data: tableData.map((v) => theaders.map((header) => v[getColumnKey(header)!])),
        filename: tableInstance.exportFileName,
        bookType: tableInstance.exportBookType,
        autoWidth: tableInstance.exportAutoWidth,
      });
    }
  };
  return { exportData2Excel };
};
import { ref } from 'vue';
// import Pagination from 'ant-design-vue/lib/pagination/Pagination'
import type { TableProps } from 'ant-design-vue';
import { useI18n } from 'vue-i18n';

export type Pagination = TableProps['pagination'];

export function usePagination(pageOption: Pagination) {
  const { t } = useI18n();
  // 分页配置参数
  const paginationRef = ref<Pagination>(false);

  if (!Object.is(pageOption, false)) {
    paginationRef.value = {
      current: 1,
      pageSize: 10,
      total: 0,
      pageSizeOptions: ['10', '20', '50', '100'],
      showQuickJumper: true,
      showSizeChanger: true, // 显示可改变每页数量
      showTotal: (total) => t('component.table.total', { total }), // 显示总数
      // onChange: (current, pageSize) => pageOption?.pageChange?.(current, pageSize),
      // onShowSizeChange: (current, pageSize) => pageOption?.pageChange?.(current, pageSize),
      ...pageOption,
    };
  }

  // 提供给ant-pagination组件的参数
  // const state = reactive({
  //     pageOption
  // })

  // 更新分页配置
  // const updatePageOption = (options = {}) => {
  //   Object.assign(pageOptions.value, options);
  //   // Object.keys(options).forEach(key => pageOption.value[key] = options[key])
  //   console.log(pageOptions.value, '更新分页配置');
  // };

  return {
    paginationRef,
  };
}
import type { DynamicTableInstance } from './../typing';
import { provide, inject } from 'vue';
import type {ComponentInternalInstance } from 'vue';

const key = Symbol('dynamic-table');

export function createTableContext(instance: ComponentInternalInstance) {
  provide(key, instance.proxy);
}

export function useTableContext() {
  return inject(key) as DynamicTableInstance;
}
import { Ref } from 'vue';
import DynamicTable from './dynamic-table.vue';
import TableQueryHeader from './components/query-form/index.vue';
export { DynamicTable, TableQueryHeader };

export type { LoadDataParams, TableColumn } from './typing';

export type DynamicTableInstance = InstanceType<typeof DynamicTable>;

export type DynamicTableRef = Ref<DynamicTableInstance>;
import type { PropType, ExtractPropTypes } from 'vue';
import { tableProps } from 'ant-design-vue/lib/table';
import type { FormProps } from 'ant-design-vue';
import type { BookType } from 'xlsx';
import type { LoadDataParams, TableColumn, OnChangeCallbackParams } from './typing';

export const props = {
  ...tableProps(),
  /** 表单属性配置 */
  formProps: {
    type: Object as PropType<FormProps>,
    default: () => ({}),
  },
  /** 表格列配置 */
  columns: {
    type: Array as PropType<TableColumn<any>[]>,
    required: true,
    default: () => [],
  },
  /** 表格数据请求函数 */
  dataRequest: {
    // 获取列表数据函数API
    type: Function as PropType<
      (
        params?: LoadDataParams,
        onChangeParams?: OnChangeCallbackParams,
      ) => Promise<API.TableListResult>
    >,
  },
  /** 是否显示索引号 */
  showIndex: {
    type: Boolean as PropType<boolean>,
    default: false,
  },
  /** 索引列属性配置 */
  indexColumnProps: {
    type: Object as PropType<Partial<TableColumn>>,
    default: () => ({}),
  },
  /** 是否显示表格工具栏 */
  showToolBar: {
    type: Boolean as PropType<boolean>,
    default: true,
  },
  /** 是否显示表格设置 */
  showTableSetting: {
    type: Boolean as PropType<boolean>,
    default: true,
  },
  /** 表格标题 */
  headerTitle: String as PropType<string>,
  /** 表格标题提示信息 */
  titleTooltip: String as PropType<string>,
  /** 是否显示搜索表单 */
  search: {
    type: Boolean as PropType<boolean>,
    default: true,
  },
  // excel导出配置
  /** 导出的文件名 */
  exportFileName: {
    type: String as PropType<string>,
  },
  /** xlsx的booktype */
  exportBookType: {
    type: String as PropType<BookType>,
    default: 'xlsx',
  },
  /** 自动宽度 */
  exportAutoWidth: {
    type: Boolean as PropType<boolean>,
    default: true,
  },
  /** 自定义数据导出格式函数 */
  exportFormatter: {
    type: Function as PropType<
      (columns: TableColumn<any>[], tableData: any[]) => { header: Recordable; data: any[] }
    >,
    default: null,
  },
};

export type TableProps = ExtractPropTypes<typeof props>;

export default props;
import type { PopconfirmProps } from 'ant-design-vue/es/popconfirm';
import type { ButtonProps, TooltipProps } from 'ant-design-vue/lib/components';
import { ColumnParams } from '../typing';
import type { PermissionType } from '@/framework/core/permission/modules/types';

export interface ActionItem extends Omit<ButtonProps, 'onClick'> {
  onClick?: Fn<ColumnParams, any>;
  label?: string;
  color?: 'success' | 'error' | 'warning';
  icon?: string;
  popConfirm?: PopConfirm;
  disabled?: boolean;
  divider?: boolean;
  // 权限编码控制是否显示
  // auth?: RoleEnum | RoleEnum[] | string | string[];
  // 业务控制是否显示
  ifShow?: boolean | ((action: ActionItem) => boolean);
  tooltip?: string | TooltipProps;
  /** 设置按钮权限, effect不传默认为disable */
  auth?:
    | PermissionType
    | {
        perm: PermissionType;
        effect?: 'delete' | 'disable';
      };
}

export interface PopConfirm extends PopconfirmProps {
  title: string;
  okText?: string;
  cancelText?: string;
  onConfirm: Fn<ColumnParams, any>;
  onCancel?: Fn<ColumnParams, any>;
  icon?: string;
  placement?:
    | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'topLeft'
    | 'topRight'
    | 'leftTop'
    | 'leftBottom'
    | 'rightTop'
    | 'rightBottom'
    | 'bottomLeft'
    | 'bottomRight';
}
import type { TableColumnType, TableProps } from 'ant-design-vue';
import type { VNode } from 'vue';
import type { FormItemSchema } from '../schema-form/types/form';
import type { ActionItem } from './types/tableAction';
import type { TableProps as DynamicTableProps } from './props';

/**
 * 加载表格数据的参数
 */
export interface LoadDataParams {
  /** 根据自己业务需求定义页码 */
  page?: number;
  /** 根据自己业务需求定义页数据条数 */
  limit?: number;
}

export type ColumnParams<T = any> = {
  record: T;
  text: string;
  index: number;
  column: TableColumnType;
};

/** 表格onChange事件回调参数 */
export type OnChangeCallbackParams = TableProps['onChange'];

/**
 * 表格属性
 */
export interface TableColumn<T = Indexable> extends Omit<TableColumnType, 'dataIndex' | 'key'> {
  title: string;
  dataIndex: keyof T | '$action';
  key?: keyof T | '$action';
  width?: number;
  /** 指定搜索的字段 */
  searchField?: string;
  /** 在查询表单中不展示此项 */
  hideInSearch?: boolean;
  /** 在 Table 中不展示此列 */
  hideInTable?: boolean;
  /** 传递给 Form.Item 的配置,可以配置 rules */
  formItemProps?: Partial<FormItemSchema<T>>;
  bodyCell?: (params: ColumnParams<T>) => VNode;
  headerCell?: (params: ColumnParams<T>) => VNode;
  actions?: (params: ColumnParams<T>) => ActionItem[];
}

/**
 * 表格实例
 */
export type DynamicTableInstance = {
  [P in keyof DynamicTableProps]: DynamicTableProps[P];
} & {
  tableData: any[];
  setProps(props: Partial<DynamicTableProps>): () => any;
  getProps: DynamicTableProps;
  refreshTable: (...rest: any[]) => any;
  getColumnKey: (column: TableColumn) => string | undefined;
};
/**
 * Component list, register here to setting it in the form
 */
import {
  Input,
  Select,
  Radio,
  Checkbox,
  AutoComplete,
  Cascader,
  DatePicker,
  InputNumber,
  Switch,
  TimePicker,
  TreeSelect,
  Tree,
  Slider,
  Rate,
  Divider,
} from 'ant-design-vue';

import {Grid} from "vxe-table";

// import RadioButtonGroup from './components/RadioButtonGroup.vue';
// import ApiSelect from './components/ApiSelect.vue';
// import ApiTreeSelect from './components/ApiTreeSelect.vue';
// import { BasicUpload } from '/@/framework/components/Upload';
// import { StrengthMeter } from '/@/framework/components/StrengthMeter';
// import { IconPicker } from '/@/framework/components/Icon';
// import { CountdownInput } from '/@/framework/components/CountDown';

const componentMap = {
  Input: Input,
  InputGroup: Input.Group,
  InputPassword: Input.Password,
  InputSearch: Input.Search,
  InputTextArea: Input.TextArea,
  InputNumber: InputNumber,
  AutoComplete: AutoComplete,

  // ApiSelect: ApiSelect,
  // ApiTreeSelect: ApiTreeSelect,
  // RadioButtonGroup: RadioButtonGroup,
  // StrengthMeter: StrengthMeter,
  // IconPicker: IconPicker,
  // InputCountDown: CountdownInput,

  // Upload: BasicUpload,
  Select: Select,
  TreeSelect: TreeSelect,
  Tree: Tree,
  Switch: Switch,
  RadioGroup: Radio.Group,
  Checkbox: Checkbox,
  CheckboxGroup: Checkbox.Group,
  Cascader: Cascader,
  Slider: Slider,
  Rate: Rate,

  DatePicker: DatePicker,
  MonthPicker: DatePicker.MonthPicker,
  RangePicker: DatePicker.RangePicker,
  WeekPicker: DatePicker.WeekPicker,
  TimePicker: TimePicker,

  Divider: Divider,

  Table: Grid
};

export type ComponentMapType = keyof typeof componentMap;

export { componentMap };
import type { ValidationRule } from 'ant-design-vue/lib/form/Form';
import type { ComponentMapType } from './types';
import { isNumber } from '@/framework/utils/is';
import dayjs from 'dayjs';
import { useI18n } from 'vue-i18n';

/**
 * @description: 生成placeholder
 */
export function createPlaceholderMessage(component: ComponentMapType, label = '') {
  const { t } = useI18n();
  if (component.includes('Input') || component.includes('Complete')) {
    return `${t('common.inputText')}${label}`;
  }
  const chooseTypes: ComponentMapType[] = [
    'Select',
    'Cascader',
    'Checkbox',
    'CheckboxGroup',
    'Switch',
    'TreeSelect',
  ];
  if (component.includes('Picker')) {
    return `${t('common.inputText')}${label}`;
  }
  if (chooseTypes.includes(component)) {
    return `${t('common.chooseText')}${label}`;
  }
  return '';
}

const DATE_TYPE = ['DatePicker', 'MonthPicker', 'WeekPicker', 'TimePicker'];

function genType() {
  return [...DATE_TYPE, 'RangePicker'];
}

export function setComponentRuleType(
  rule: ValidationRule,
  component: ComponentMapType,
  valueFormat: string,
) {
  if (['DatePicker', 'MonthPicker', 'WeekPicker', 'TimePicker'].includes(component)) {
    rule.type = valueFormat ? 'string' : 'object';
  } else if (['RangePicker', 'Upload', 'CheckboxGroup', 'TimePicker'].includes(component)) {
    rule.type = 'array';
  } else if (['InputNumber'].includes(component)) {
    rule.type = 'number';
  }
}

export function processDateValue(attr: Recordable, component: string) {
  const { valueFormat, value } = attr;
  if (valueFormat) {
    // attr.value = isObject(value) ? dayjs(value).format(valueFormat) : value
  } else if (DATE_TYPE.includes(component) && value) {
    attr.value = dayjs(attr.value);
  }
}

export function handleInputNumberValue(component?: ComponentMapType, val?: any) {
  if (!component) return val;
  if (['Input', 'InputPassword', 'InputSearch', 'InputTextArea'].includes(component)) {
    return val && isNumber(val) ? `${val}` : val;
  }
  return val;
}

/**
 * 时间字段
 */
export const dateItemType = genType();
import type { FormActionType } from '../types/form';
import { provide, inject, type ComponentInternalInstance } from 'vue';

const key = Symbol('schema-form');

export function createFormContext(instance: ComponentInternalInstance) {
  provide(key, instance.proxy);
}

export function useFormContext() {
  return inject(key) as FormActionType;
}
import type { Ref } from 'vue';
import type { FormItemSchema, FormSchema } from '../types/form';

import { computed, unref } from 'vue';
import { isNumber } from '@/framework/utils/is';

export function useItemLabelWidth(schemaItemRef: Ref<FormItemSchema>, schemaRef: Ref<FormSchema>) {
  return computed(() => {
    const schemaItem = unref(schemaItemRef);
    const { labelCol = {}, wrapperCol = {} } = schemaItem.formItemProps || {};
    const { labelWidth, disabledLabelWidth } = schemaItem;

    const {
      labelWidth: globalLabelWidth,
      labelCol: globalLabelCol,
      wrapperCol: globWrapperCol,
    } = unref(schemaRef);

    // 如果labelWidth是全局设置的，则会设置所有项
    if ((!globalLabelWidth && !labelWidth && !globalLabelCol) || disabledLabelWidth) {
      labelCol.style = {
        textAlign: 'left',
      };
      return { labelCol, wrapperCol };
    }
    let width = labelWidth || globalLabelWidth;
    const col = { ...globalLabelCol, ...labelCol };
    const wrapCol = { ...globWrapperCol, ...wrapperCol };

    if (width) {
      width = isNumber(width) ? `${width}px` : width;
    }

    return {
      labelCol: { style: { width }, ...col },
      wrapperCol: { style: { width: `calc(100% - ${width})` }, ...wrapCol },
    };
  });
}
export * from './types/form';
export * from './types/formItem';

// export { default as SchemaForm } from './schema-form.vue'
import SchemaForm from './schema-form.vue';

export { SchemaForm };

export type SchemaFormRef = InstanceType<typeof SchemaForm>;
<template>
  <Col v-bind="schemaItem.colProps">
    <Form.Item
      v-bind="{ ...schemaItem.formItemProps }"
      :label="renderLabelHelpMessage"
      :name="schemaItem.field"
      :labelCol="itemLabelWidthProp.labelCol"
      :wrapperCol="itemLabelWidthProp.wrapperCol"
      :rules="getRules"
    >
      <slot v-if="schemaItem.slot" :name="schemaItem.slot" v-bind="getValues"> </slot>
      <component
        v-else
        :is="getComponent"
        :ref="setItemRef"
        :key="schemaItem.field"
        :allowClear="true"
        v-bind="getComponentProps"
        v-on="componentEvents"
        v-model:[modelValueType]="modelValue[schemaItem.field]"
      >
        <template v-if="Object.is(schemaItem.loading, true)" #notFoundContent>
          <Spin size="small" />
        </template>
      </component>
    </Form.Item>
  </Col>
</template>

<script setup lang="tsx">
import { nextTick, PropType, Ref, watch } from "vue";
  import { computed, unref, toRefs, onMounted } from 'vue';
  import { Form, Col, Spin } from 'ant-design-vue';
  import type { ValidationRule } from 'ant-design-vue/lib/form/Form';
  import { componentMap, ComponentMapType } from './componentMap';
  import { FormItemSchema, FormSchema } from './types/form';
  import { isFunction, isNull, isString } from '@/framework/utils/is';
  import { useVModel } from '@vueuse/core';
  import { useItemLabelWidth } from './hooks/useLabelWidth';
  import cloneDeep from 'lodash-es/cloneDeep';
  import { createPlaceholderMessage } from './helper';
  import BasicHelp from '@/framework/components/basic/basic-help/index.vue';
  import { AllComponentProps } from './types';
  import { useFormContext } from './hooks/useFormContext';

  const props = defineProps({
    formModel: {
      type: Object as PropType<Record<string, any>>,
      default: () => ({}),
    },
    schemaItem: {
      type: Object as PropType<FormItemSchema>,
      default: () => ({}),
    },
    schema: {
      type: Object as PropType<FormSchema>,
      default: () => ({}),
    },
    setFormModel: {
      type: Function as PropType<(key: string, value: any) => void>,
      default: null,
    },
    /** 将表单组件实例保存起来 */
    setItemRef: {
      type: Function,
      default: () => {},
    },
  });

  const emit = defineEmits(['update:formModel']);

  // const currentInstance = getCurrentInstance();
  // schemaForm组件实例
  const schemaFormRef = useFormContext();

  const modelValue = useVModel(props, 'formModel', emit);

  const { schemaItem, schema } = toRefs(props) as {
    schemaItem: Ref<FormItemSchema>;
    schema: Ref<FormSchema>;
  };

  const itemLabelWidthProp = useItemLabelWidth(schemaItem, schema);
  // eslint-disable-next-line
  const valuesRef = computed(() => {
    const { formModel, schemaItem } = props;
    return { formModel, schemaItem, field: schemaItem.field };
  });

  const modelValueType = computed(() => {
    const { component, componentProps } = schemaItem.value;
    if (typeof componentProps !== 'function' && componentProps?.vModelKey) {
      return componentProps.vModelKey;
    }
    const isCheck = isString(component) && ['Switch', 'Checkbox'].includes(component);
    return isCheck ? 'checked' : 'value';
  });

  const getValues = computed(() => {
    const { formModel, schemaItem } = props;
    const { mergeDynamicData } = props.schema;
    return {
      field: schemaItem.field,
      formModel: formModel,
      values: {
        ...mergeDynamicData,
        ...formModel,
      } as Recordable,
      schemaItem: schemaItem,
    };
  });

  /**
   * @description 当前表单项组件
   */
  const getComponent = computed(() => {
    const component = props.schemaItem.component;
    return isString(component) ? componentMap[component] : component;
  });

  /**
   * @description 表单组件props
   */
  const getComponentProps = computed(() => {

    const { formModel, schemaItem } = props;
    const { componentProps = {}, component, label = '' } = schemaItem;

    if (isFunction(componentProps)) {
      const compProps = componentProps({
        formModel,
        schemaFormRef,
        schemaItem,
      }) as AllComponentProps;

      compProps.placeholder ??= isString(component)
        ? createPlaceholderMessage(component, label)
        : undefined;
      return compProps;
    }
    if (component !== 'RangePicker' && isString(component)) {
      (componentProps as AllComponentProps).placeholder ??= createPlaceholderMessage(
        component,
        label,
      );
    }
    return componentProps as AllComponentProps;
  });

  watch(()=>props.schemaItem,async (schemaItem)=>{
    if (getComponentProps.value?.request) {
      const compProps = getComponentProps.value;
      const compName = schemaItem.value.component;
      schemaItem.value.loading = true;
      try {
        if (['Select', 'RadioGroup', 'CheckBoxGroup'].some((n) => n === compName)) {
          compProps.options = await getComponentProps.value?.request();
          console.log('compProps.options', compProps.options);
        } else if (['TreeSelect', 'Tree'].some((n) => n === compName)) {
          compProps.treeData = await getComponentProps.value?.request();
        }
      } finally {
        schemaItem.value.loading = false;
      }
    }
  })

  /**
   * @description 表单组件事件
   */
  const componentEvents = computed(() => {
    const componentProps = props.schemaItem?.componentProps || {};
    return Object.keys(componentProps).reduce((prev, key) => {
      if (/on([A-Z])/.test(key)) {
        // eg: onChange => change
        const eventKey = key.replace(/on([A-Z])/, '$1').toLocaleLowerCase();
        prev[eventKey] = componentProps[key];
      }
      return prev;
    }, {});
  });

  const renderLabelHelpMessage = computed(() => {
    const { label, helpMessage, helpComponentProps, subLabel } = props.schemaItem;
    const renderLabel = subLabel ? (
      <span>
        {label} <span class="text-secondary">{subLabel}</span>
      </span>
    ) : (
      label
    );
    const getHelpMessage = isFunction(helpMessage) ? helpMessage(unref(getValues)) : helpMessage;
    if (!getHelpMessage || (Array.isArray(getHelpMessage) && getHelpMessage.length === 0)) {
      return renderLabel;
    }
    return (
      <span>
        {renderLabel}
        <BasicHelp placement="top" class="mx-1" text={getHelpMessage} {...helpComponentProps} />
      </span>
    );
  });

  const getComponentsProps = computed(() => {
    const { schemaItem, formModel } = props;
    let { componentProps = {} } = schemaItem;
    if (isFunction(componentProps)) {
      componentProps = componentProps({ schemaItem, schemaFormRef, formModel }) ?? {};
    }
    return componentProps as Recordable;
  });

  function setComponentRuleType(
    rule: ValidationRule,
    component: ComponentMapType,
    valueFormat: string,
  ) {
    if (['DatePicker', 'MonthPicker', 'WeekPicker', 'TimePicker'].includes(component)) {
      rule.type = valueFormat ? 'string' : 'object';
    } else if (['RangePicker', 'Upload', 'CheckboxGroup', 'TimePicker'].includes(component)) {
      rule.type = 'array';
    } else if (['InputNumber'].includes(component)) {
      rule.type = 'number';
    }
  }

  const getRules = computed(() => {
    const {
      rules: defRules = [],
      component,
      rulesMessageJoinLabel,
      label,
      dynamicRules,
      required,
      field,
    } = props.schemaItem;

    if (field == 'field5') {
      console.log('rules', props.schemaItem);
    }

    if (isFunction(dynamicRules)) {
      return dynamicRules(unref(getValues)) as ValidationRule[];
    }

    let rules: ValidationRule[] = cloneDeep(defRules) as ValidationRule[];
    const { rulesMessageJoinLabel: globalRulesMessageJoinLabel } = props.schema;

    const joinLabel = Reflect.has(props.schema, 'rulesMessageJoinLabel')
      ? rulesMessageJoinLabel
      : globalRulesMessageJoinLabel;
    const defaultMsg = isString(component)
      ? `${createPlaceholderMessage(component, label)}${joinLabel ? label : ''}`
      : undefined;

    function validator(rule: any, value: any) {
      const msg = rule.message || defaultMsg;

      if (value === undefined || isNull(value)) {
        // 空值
        return Promise.reject(msg);
      } else if (Array.isArray(value) && value.length === 0) {
        // 数组类型
        return Promise.reject(msg);
      } else if (typeof value === 'string' && value.trim() === '') {
        // 空字符串
        return Promise.reject(msg);
      } else if (
        typeof value === 'object' &&
        Reflect.has(value, 'checked') &&
        Reflect.has(value, 'halfChecked') &&
        Array.isArray(value.checked) &&
        Array.isArray(value.halfChecked) &&
        value.checked.length === 0 &&
        value.halfChecked.length === 0
      ) {
        // 非关联选择的tree组件
        return Promise.reject(msg);
      }
      return Promise.resolve();
    }

    const getRequired = isFunction(required) ? required(unref(getValues)) : required;

    if ((!rules || rules.length === 0) && getRequired) {
      rules = [{ required: getRequired, validator }];
    }

    const requiredRuleIndex: number = rules.findIndex(
      (rule) => Reflect.has(rule, 'required') && !Reflect.has(rule, 'validator'),
    );

    if (requiredRuleIndex !== -1) {
      const rule = rules[requiredRuleIndex];

      if (component && isString(component)) {
        if (!Reflect.has(rule, 'type')) {
          rule.type = component === 'InputNumber' ? 'number' : 'string';
        }

        rule.message = rule.message || defaultMsg;

        if (component.includes('Input') || component.includes('Textarea')) {
          rule.whitespace = true;
        }
        const valueFormat = unref(getComponentsProps)?.valueFormat;
        setComponentRuleType(rule, component, valueFormat);
      }
    }

    // Maximum input length rule check
    const characterInx = rules.findIndex((val) => val.max);
    if (characterInx !== -1 && !rules[characterInx].validator) {
      rules[characterInx].message = rules[characterInx].message;
    }

    return rules;
  });

  onMounted(async () => {
    if (getComponentProps.value?.request) {
      const compProps = getComponentProps.value;
      const compName = schemaItem.value.component;
      schemaItem.value.loading = true;
      try {
        if (['Select', 'RadioGroup', 'CheckBoxGroup'].some((n) => n === compName)) {
          compProps.options = await getComponentProps.value?.request();
          console.log('compProps.options', compProps.options);
        } else if (['TreeSelect', 'Tree'].some((n) => n === compName)) {
          compProps.treeData = await getComponentProps.value?.request();
        }
      } finally {
        schemaItem.value.loading = false;
      }
    }
  });
</script>
<template>
  <Form ref="schemaFormRef" v-bind="getFormProps" :model="formModel">
    <Row v-bind="getRowConfig">
      <template v-for="schemaItem in formSchemaRef.schemas" :key="schemaItem.field">
        <SchemaFormItem v-if="getFormItemIsShow(schemaItem, 'vIf')" v-show="getFormItemIsShow(schemaItem, 'vShow')"
          :schema-item="schemaItem" :schema="formSchemaRef" :set-form-model="setFormModel" :form-model="formModel"
          :setItemRef="setItemRef(schemaItem)" :style="{ paddingRight: layoutMode === 1 ? '8px' : 'unset' }">
          <template v-for="item in Object.keys($slots)" #[item]="data" :key="item">
            <slot :name="item" v-bind="data || {}"></slot>
          </template>
        </SchemaFormItem>
      </template>
      <template v-if="$slots['operate-button']">
        <Col v-bind="searchWrapperCol">
        <FormItem class="operate-button">
          <slot name="operate-button"></slot>
        </FormItem>
        </Col>
      </template>
    </Row>
  </Form>
</template>

<script lang="ts">
import {
  reactive,
  ref,
  PropType,
  unref,
  defineComponent,
  computed,
  watchEffect,
  getCurrentInstance, inject
} from "vue";
import { Form, Row, Col } from 'ant-design-vue';
import { formProps } from 'ant-design-vue/lib/form';
import { isNullOrUnDef, isObject, isArray, isFunction, isBoolean, isString } from '@/framework/utils/is';
import { deepMerge } from '@/framework/utils/';
import SchemaFormItem from './schema-form-item.vue';
import type { FormItemSchema, FormSchema, FormActionType } from './types/form';
import { NamePath } from 'ant-design-vue/lib/form/interface';
import { uniqBy, cloneDeep } from 'lodash-es';
import { dateItemType, handleInputNumberValue } from './helper';
import dayjs from 'dayjs';
import { createFormContext } from './hooks/useFormContext';

export default defineComponent({
  name: 'SchemaForm',
  components: { Form, Row, Col, SchemaFormItem, FormItem: Form.Item },
  props: {
    ...formProps,
    formSchema: {
      // 动态验证表单
      type: Object as PropType<FormSchema>,
      default: () => ({}),
    },
    initialValues: {
      // 预置字段默认值
      type: Object as PropType<Recordable>,
      default: () => ({}),
    },
  },
  emits: ['submit', 'reset'],
  setup(props, { attrs, emit }) {
    // provide schemaForm instance
    createFormContext(getCurrentInstance()!);
    // 考虑和超表整合时，从父组件中拿到布局模式，若是精简模式，应缩小Form-Item大小
    const layoutMode = inject("layoutMode") as Number
    let oldFormSchema: FormSchema;
    // TODO 将formSchema克隆一份，避免修改原有的formSchema
    // TODO 类型为FormSchema 提示：类型实例化过深，且可能无限
    const formSchemaRef = ref<FormSchema>(cloneDeep(props.formSchema));
    // 表单项数据
    const formModel = reactive({ ...props.initialValues });
    // 表单默认数据
    const defaultFormValues = reactive({ ...props.initialValues });
    // 表单实例
    const schemaFormRef = ref<FormActionType>();
    // 表单属性
    const schemaFormPropsRef = ref<Partial<FormSchema>>({});
    // 缓存的表单值，用于恢复form-item v-if为true后的值
    const cacheFormModel = { ...props.initialValues };
    // 将所有的表单组件实例保存起来
    const compRefs = {} as any;

    // 获取表单所有属性
    const getFormProps = computed(() => {
      return {
        ...attrs,
        ...props,
        ...schemaFormPropsRef.value,
      } as FormSchema;
    });

    watchEffect(() => {
      if (Object.is(props.formSchema, oldFormSchema)) {
        // console.log('相同');
        deepMerge(formSchemaRef.value, cloneDeep(props.formSchema));
      } else {
        // console.log('不相同');
        formSchemaRef.value = cloneDeep(props.formSchema);
      }
      oldFormSchema = props.formSchema;
    });

    // 初始化数据
    unref(formSchemaRef).schemas?.forEach((item) => {
      const { defaultValue } = item;
      if (!isNullOrUnDef(defaultValue)) {
        formModel[item.field] = defaultValue;
        defaultFormValues[item.field] = defaultValue;
        cacheFormModel[item.field] = defaultValue;
      }
    });
    // 将所有的表单组件实例保存起来
    const setItemRef = (formItem: FormItemSchema) => {
      return (el) => {
        if (el) {
          compRefs[formItem.field] = el;
        }
      };
    };

    // 暴露组件实例，方便回调使用
    const getItemRef = (field) => {
      return compRefs[field]
    }

    const getFormItemIsShow = (formItem: FormItemSchema, key: 'vIf' | 'vShow') => {
      if (Reflect.has(formItem, key)) {
        const isShow = formItem[key];
        let show = true;
        if (isBoolean(isShow)) {
          show = isShow;
        }
        if (isFunction(isShow)) {
          show = isShow({ schemaItem: formItem, formModel, field: formItem.field });
        }
        if (Object.is(show, false) && key === 'vIf') {
          Reflect.deleteProperty(formModel, formItem.field);
        }
        return show;
      } else {
        return true;
      }
    };

    // 设置表单属性
    const setFormProps = (formProps: Partial<FormSchema>) => {
      Object.assign(schemaFormPropsRef.value, formProps);
    };

    // 设置某个字段的值
    const setFormModel = (key: string, value: any) => {
      formModel[key] = value;
      cacheFormModel[key] = value;
      const { validateTrigger } = unref(getFormProps);
      if (!validateTrigger || validateTrigger === 'change') {
        schemaFormRef.value?.validateFields([key]).catch((_) => { });
      }
    };
    // 获取栅栏Row配置
    const getRowConfig = computed((): Recordable => {
      const { baseRowStyle = {}, rowProps } = unref(getFormProps);
      return {
        style: baseRowStyle,
        ...rowProps,
      };
    });

    const searchWrapperCol = computed((): Recordable => {
      let spans = 0
      unref(formSchemaRef).schemas.forEach(item => {
        spans += parseInt(item.colProps?.span + "")
      })
      let offset = 20 - (spans % 24) // TODO 考虑响应式布局
      if (offset < 0) offset = 20
      // 精简模式
      if (layoutMode === 1) {
        offset = 0;
      }
      console.log(offset)
      return {
        span: 4,
        offset: offset
      }
    })

    /**
     * @description: Is it time
     */
    function itemIsDateType(key: string) {
      return unref(formSchemaRef).schemas.some((item) => {
        return item.field === key && isString(item.component)
          ? dateItemType.includes(item.component)
          : false;
      });
    }

    /**
     * @description: Set form value
     */
    async function setFieldsValue(values: Recordable): Promise<void> {
      const schemas = unref(formSchemaRef).schemas;
      const fields = schemas.map((item) => item.field).filter(Boolean);

      Object.assign(cacheFormModel, values);

      const validKeys: string[] = [];
      Object.keys(values).forEach((key) => {
        const schema = schemas.find((item) => item.field === key);
        let value = values[key];

        const hasKey = Reflect.has(values, key);
        if (isString(schema?.component)) {
          value = handleInputNumberValue(schema?.component, value);
        }
        // 0| '' is allow
        if (hasKey && fields.includes(key)) {
          // time type
          if (itemIsDateType(key)) {
            if (Array.isArray(value)) {
              const arr: any[] = [];
              for (const ele of value) {
                arr.push(ele ? dayjs(ele) : null);
              }
              formModel[key] = arr;
            } else {
              const { componentProps } = schema || {};
              let _props = componentProps as any;
              if (typeof componentProps === 'function') {
                _props = _props({ formModel });
              }
              formModel[key] = value ? (_props?.valueFormat ? value : dayjs(value)) : null;
            }
          } else {
            formModel[key] = value;
          }
          validKeys.push(key);
        }
      });
      validateFields(validKeys).catch((_) => { });
    }

    async function resetSchema(data: Partial<FormItemSchema> | Partial<FormItemSchema>[]) {
      let updateData: Partial<FormItemSchema>[] = [];
      if (isObject(data)) {
        updateData.push(data as FormItemSchema);
      }
      if (isArray(data)) {
        updateData = [...data];
      }
      // @ts-ignore
      unref(formSchemaRef).schemas = updateData as FormItemSchema[];
    }

    /**
     * @description  更新formItemSchema
     */
    async function updateSchema(data: Partial<FormItemSchema> | Partial<FormItemSchema>[]) {
      let updateData: Partial<FormItemSchema>[] = [];
      if (isObject(data)) {
        updateData.push(data as FormItemSchema);
      }
      if (isArray(data)) {
        updateData = [...data];
      }

      const hasField = updateData.every(
        (item) => item.component === 'Divider' || (Reflect.has(item, 'field') && item.field),
      );

      if (!hasField) {
        console.error(
          'All children of the form Schema array that need to be updated must contain the `field` field',
        );
        return;
      }
      const schema: FormItemSchema[] = [];
      updateData.forEach((item) => {
        unref(formSchemaRef).schemas.forEach((val) => {
          if (val.field === item.field) {
            const newSchema = deepMerge(val, item);
            schema.push(newSchema);
          } else {
            schema.push(val);
          }
        });
      });
      unref(formSchemaRef).schemas = uniqBy(schema, 'field');
    }

    async function resetFields(): Promise<void> {
      const { resetFunc, submitOnReset } = unref(getFormProps);
      resetFunc && isFunction(resetFunc) && (await resetFunc());

      Object.keys(formModel).forEach((key) => {
        formModel[key] = defaultFormValues[key];
      });

      emit('reset', formModel);
      submitOnReset && handleSubmit();
      setTimeout(clearValidate);
    }

    async function validateFields(nameList?: NamePath[] | undefined) {
      return schemaFormRef.value?.validateFields(nameList);
    }

    async function validate(nameList?: NamePath[] | undefined) {
      await schemaFormRef.value?.validate(nameList);
      return formModel;
    }

    async function clearValidate(name?: string | string[]) {
      await schemaFormRef.value?.clearValidate(name);
    }

    async function scrollToField(name: NamePath, options?: ScrollOptions | undefined) {
      await schemaFormRef.value?.scrollToField(name, options);
    }

    const handleSubmit = () => {
      emit('submit');
    };

    return {
      schemaFormRef,
      schemaFormPropsRef,
      getFormProps,
      formModel,
      formSchemaRef,
      getRowConfig,
      compRefs,
      searchWrapperCol,
      layoutMode,
      setItemRef,
      getItemRef,
      getFormItemIsShow,
      resetFields,
      setFieldsValue,
      setFormProps,
      setFormModel,
      validateFields,
      resetSchema,
      updateSchema,
      validate,
      clearValidate,
      scrollToField,
    };
  },
});
</script>
import type { NamePath, RuleObject } from 'ant-design-vue/lib/form/interface';
import type { FormItemProps } from './formItem';
import type { Component, VNode } from 'vue';
// import type { ButtonProps as AntdButtonProps } from '/@/framework/components/Button'
import type { ColEx, ComponentMapType, ComponentProps } from './index';
// import type { TableActionType } from '/@/framework/components/Table/src/types/table'
import type { CSSProperties } from 'vue';
import type { RowProps } from 'ant-design-vue/lib/grid/Row';
import type { FormProps } from 'ant-design-vue/lib/form';

export type { FormProps, RowProps };

export type FieldMapToTime = [string, [string, string], string?][];

export type Rule = RuleObject & {
  trigger?: 'blur' | 'change' | ['change', 'blur'];
};
/** 获取所有字段名 */
export type GetFieldKeys<T> = Exclude<keyof T, symbol | number>;

export interface RenderCallbackParams<T = string> {
  schemaItem: FormItemSchema;
  formModel: T extends string ? Recordable : Record<GetFieldKeys<T>, any>;
  field: T extends string ? string : GetFieldKeys<T>;
}

export interface ButtonProps {
  text?: string;
}

export interface FormActionType {
  formModel?: Recordable;
  submit: () => Promise<void>;
  setFieldsValue: <T>(values: T) => Promise<void>;
  resetFields: () => Promise<void>;
  getFieldsValue: () => any;
  clearValidate: (name?: string | string[]) => Promise<void>;
  updateSchema: (data: Partial<FormItemSchema> | Partial<FormItemSchema>[]) => Promise<void>;
  resetSchema: (data: Partial<FormItemSchema> | Partial<FormItemSchema>[]) => Promise<void>;
  setProps: (formProps: Partial<FormSchema>) => Promise<void>;
  removeSchemaByFiled: (field: string | string[]) => Promise<void>;
  appendSchemaByField: (
    schema: FormItemSchema,
    prefixField: string | undefined,
    first?: boolean | undefined,
  ) => Promise<void>;
  validateFields: (nameList?: NamePath[]) => Promise<any>;
  validate: (nameList?: NamePath[]) => Promise<any>;
  scrollToField: (name: NamePath, options?: ScrollOptions) => Promise<void>;
}

export type RegisterFn = (formInstance: FormActionType) => void;

export type UseFormReturnType = [RegisterFn, FormActionType];

/** 表单 */
export interface FormSchema<T = any> extends FormProps {
  // Form value
  model?: any;
  // The width of all items in the entire form
  labelWidth?: number | string;
  //Row configuration for the entire form
  rowProps?: RowProps;
  // Submit form on reset
  submitOnReset?: boolean;

  // General row style
  baseRowStyle?: CSSProperties;

  // General col configuration
  baseColProps?: Partial<ColEx>;

  // Form configuration rules
  schemas: FormItemSchema<T>[];
  // Function values used to merge into dynamic control form items
  mergeDynamicData?: any;
  // Compact mode for search forms
  compact?: boolean;
  // Blank line span
  emptySpan?: number | Partial<ColEx>;
  // Whether to disable
  disabled?: boolean;
  // Time interval fields are mapped into multiple
  fieldMapToTime?: FieldMapToTime;
  // Placeholder is set automatically
  autoSetPlaceHolder?: boolean;
  // Auto submit on press enter on input
  autoSubmitOnEnter?: boolean;
  // Check whether the information is added to the label
  rulesMessageJoinLabel?: boolean;
  // Whether to show collapse and expand buttons
  showAdvancedButton?: boolean;
  // Whether to focus on the first input box, only works when the first form item is input
  autoFocusFirstItem?: boolean;
  // Automatically collapse over the specified number of rows
  autoAdvancedLine?: number;
  // Always show lines
  alwaysShowLines?: number;
  // Whether to show the operation button
  showActionButtonGroup?: boolean;

  // Reset button configuration
  resetButtonOptions?: Partial<ButtonProps>;

  // Confirm button configuration
  submitButtonOptions?: Partial<ButtonProps>;

  // Operation column configuration
  actionColOptions?: Partial<ColEx>;

  // Show reset button
  showResetButton?: boolean;
  // Show confirmation button
  showSubmitButton?: boolean;

  resetFunc?: () => Promise<void>;
  submitFunc?: () => Promise<void>;
  transformDateFunc?: (date: any) => string;
}

/** 表单项 */
export interface FormItemSchema<T = string> {
  /** 字段名 */
  field: T extends string ? string : GetFieldKeys<T>;
  // Event name triggered by internal value change, default change
  changeEvent?: string;
  // Variable name bound to v-model Default value
  valueField?: string;
  // Label name
  label: string;
  // Auxiliary text
  subLabel?: string;
  // Help text on the right side of the text
  helpMessage?:
    | string
    | string[]
    | ((renderCallbackParams: RenderCallbackParams<T>) => string | string[]);
  // BaseHelp component props
  helpComponentProps?: Partial<HelpComponentProps>;
  // Label width, if it is passed, the labelCol and WrapperCol configured by itemProps will be invalid
  labelWidth?: string | number;
  // Disable the adjustment of labelWidth with global settings of formModel, and manually set labelCol and wrapperCol by yourself
  disabledLabelWidth?: boolean;
  // render component
  component: ComponentMapType | Component;
  // 组件参数
  componentProps?:
    | ComponentProps
    | ((opt: {
        /** 当前表单项 */
        schemaItem: FormItemSchema<T>;
        /** 动态表单实例 */
        schemaFormRef: FormActionType;
        /** 当前表单数据模型 */
        formModel: T extends string ? Recordable : Record<GetFieldKeys<T>, any>;
      }) => ComponentProps);

  componentSlots?:
    | ((renderCallbackParams: RenderCallbackParams<T>) => Recordable<(...args) => any>)
    | VNode
    | VNode[]
    | string
    | Recordable<(...args) => any>;
  // Required
  required?: boolean | ((renderCallbackParams: RenderCallbackParams<T>) => boolean);

  suffix?: string | number | ((values: RenderCallbackParams<T>) => string | number);

  // Validation rules
  rules?: Rule[];
  // Check whether the information is added to the label
  rulesMessageJoinLabel?: boolean;
  /** 组件加载状态 */
  loading?: boolean;

  // Reference formModelItem
  formItemProps?: Partial<FormItemProps>;

  // col configuration outside formModelItem
  colProps?: Partial<ColEx>;

  // 默认值
  defaultValue?: any;
  isAdvanced?: boolean;

  // Matching details components
  span?: number;
  /** 作用同v-show */
  vShow?: boolean | ((renderCallbackParams: RenderCallbackParams<T>) => boolean);
  /** 作用同v-if */
  vIf?: boolean | ((renderCallbackParams: RenderCallbackParams<T>) => boolean);

  // Render the content in the form-item tag
  render?: (renderCallbackParams: RenderCallbackParams<T>) => VNode | VNode[] | string;

  // Rendering col content requires outer wrapper form-item
  renderColContent?: (renderCallbackParams: RenderCallbackParams<T>) => VNode | VNode[] | string;

  // Custom slot, in from-item
  slot?: string;

  // Custom slot, similar to renderColContent
  colSlot?: string;

  dynamicDisabled?: boolean | ((renderCallbackParams: RenderCallbackParams<T>) => boolean);

  dynamicRules?: (renderCallbackParams: RenderCallbackParams<T>) => Rule[];
}
export interface HelpComponentProps {
  maxWidth: string;
  // Whether to display the serial number
  showIndex: boolean;
  // Text list
  text: any;
  // colour
  color: string;
  // font size
  fontSize: string;
  icon: string;
  absolute: boolean;
  // Positioning
  position: any;
}
import type { FormItemProps as AntdFormItemProps } from 'ant-design-vue/lib/form/FormItem';
import type { HTMLAttributes } from 'vue';
import type { ColProps } from 'ant-design-vue/lib/grid/Col';

export interface FormItemProps extends AntdFormItemProps {
  labelCol?: ColProps & HTMLAttributes;
}
export interface AdvanceState {
  isAdvanced: boolean;
  hideAdvanceBtn: boolean;
  isLoad: boolean;
  actionSpan: number;
}
import type { CSSProperties } from "vue";
import type {
  CascaderProps,
  DividerProps,
  InputNumberProps,
  RateProps,
  SelectProps,
  SwitchProps,
  TimePickerProps,
  TreeProps,
  TreeSelectProps
} from "ant-design-vue";

import { VxeGridProps } from "vxe-table";

export type { ComponentMapType } from "../componentMap";

type ColSpanType = number | string;

/** 组件属性 */
export type ComponentProps = (
  | InputNumberProps
  | SelectProps
  | CascaderProps
  | SwitchProps
  | RateProps
  | DividerProps
  | TimePickerProps
  | TreeProps
  | TreeSelectProps
  | VxeGridProps
  ) & {
  /** 组件异步请求数据 */
  request?: Fn;
  style?: CSSProperties;
  /** 手动指定v-model绑定的key */
  vModelKey?: string;
  [key: string]: any;
};

/** 所有组件属性集合 */
export type AllComponentProps = UnionToIntersection<ComponentProps>;

export interface ColEx {
  style?: any;
  /**
   * raster number of cells to occupy, 0 corresponds to display: none
   * @default none (0)
   * @type ColSpanType
   */
  span?: ColSpanType;

  /**
   * raster order, used in flex layout mode
   * @default 0
   * @type ColSpanType
   */
  order?: ColSpanType;

  /**
   * the layout fill of flex
   * @default none
   * @type ColSpanType
   */
  flex?: ColSpanType;

  /**
   * the number of cells to offset Col from the left
   * @default 0
   * @type ColSpanType
   */
  offset?: ColSpanType;

  /**
   * the number of cells that raster is moved to the right
   * @default 0
   * @type ColSpanType
   */
  push?: ColSpanType;

  /**
   * the number of cells that raster is moved to the left
   * @default 0
   * @type ColSpanType
   */
  pull?: ColSpanType;

  /**
   * <576px and also default setting, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  xs?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;

  /**
   * ≥576px, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  sm?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;

  /**
   * ≥768px, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  md?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;

  /**
   * ≥992px, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  lg?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;

  /**
   * ≥1200px, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  xl?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;

  /**
   * ≥1600px, could be a span value or an object containing above props
   * @type { span: ColSpanType, offset: ColSpanType } | ColSpanType
   */
  xxl?: { span: ColSpanType; offset: ColSpanType } | ColSpanType;
}
<template>
  <div class="table-search" :class="{ 'table-search-simple': mode === 1 }">
    <schema-form ref="dynamicFormRef" :form-schema="formSchema">
      <template #operate-button>
        <span class="search-submitButtons" :class="{ 'search-submitButtons-simple': mode === 1 }">
          <span>
            <a-button style="margin-right: 10px" @click="reset" :type="resetBtnType">
              {{ $t("common.resetText") }}
            </a-button>
            <a-button :type="searchBtnType" @click="query"> {{ $t("common.queryText") }} </a-button>
          </span>
          <template v-if="formItemSchemas.length > 0 && formItemSchemas.length > defaultShowItems">
            <a style="margin-left: 8px" @click="toggleAdvanced">
              {{ advanced? $t("component.form.putAway"): $t("component.form.unfold") }}
              <DownOutlined class="collapse-icon" />
            </a>
          </template>
        </span>
      </template>
    </schema-form>
  </div>
</template>

<script lang="ts">
import { computed, defineComponent, inject, nextTick, PropType, reactive, ref, toRefs } from "vue";
import { DownOutlined } from "@ant-design/icons-vue";
import type { TableColumn } from "../../typing";
import SchemaForm from "@/framework/components/core/schema-form/schema-form.vue";
import type { FormItemSchema, FormSchema } from "@/framework/components/core/schema-form/types/form";
import { dict } from "@/framework/core/dict";
import { LayoutMode } from "@/framework/components/core/super-table/props";

export default defineComponent({
  name: "NewQueryForm",
  components: { DownOutlined, SchemaForm },
  props: {
    /** 默认显示个数 */
    defaultShowItems: {
      type: Number,
      default: 3
    },
    /** 表单属性配置 */
    formProps: {
      type: Object as PropType<FormSchema>,
      default: () => ({})
    },
    columns: {
      type: Object as PropType<TableColumn[]>,
      required: true
    },
    searchBtnType: {
      type: String,
      default: 'primary'
    },
    resetBtnType: {
      type: String,
      default: 'default'
    }
  },
  emits: ["query", "reset", "toggle-advanced"],
  setup(props, { slots, emit }) {
    const state = reactive({
      advanced: false,
      labelMap: {}
    });
    const mode = inject("layoutMode") as Number;
    console.log("mode", mode);
    const dynamicFormRef = ref<InstanceType<typeof SchemaForm>>();

    // 获取表格列key
    const getColumnKey = (column: TableColumn) => {
      return `${column.field || ""}`.split(".").pop() || "";
    };

    /**
     * @description 展开/收起 图标旋转转数
     */
    const turn = computed(() => `${state.advanced ? 0.5 : 0}turn`);

    const formSchema = computed(() => {
      const result = {
        schemas: !state.advanced
          ? formItemSchemas.value.slice(0, props.defaultShowItems)
          : formItemSchemas.value,
        labelWidth: 80,
        ...props.formProps
      };
      if (mode === LayoutMode.SIMPLE) {
        result.labelCol = { span: 0 };
      }
      return result;
    });

    const formItemSchemas = computed<FormItemSchema[]>(() => {
      let result = props.columns
        .filter((n) => {
          const field = getColumnKey(n);
          return !n.hideInSearch && n.type != "seq" && !!field && field !== "$action";
        })
        .map((n) => {
          if (n.dict) {

            if (!n.formItemProps?.component || n.formItemProps?.component == "Select") {
              return {
                field: n.formItemProps?.field ?? n.searchField ?? getColumnKey(n),
                component: "Select",
                componentProps: {
                  options: dict.get(n.dict).map(item => {
                    return { value: item.value, label: item.name };
                  })
                },
                label: n.title,
                colProps: { // TODO 考虑响应式布局
                  span: Math.floor(24 / props.defaultShowItems)
                },
                ...n.formItemProps
              } as FormItemSchema;
            }
            if (n?.formItemProps?.component == "RadioGroup") {

            }
          }
          return {
            field: n.formItemProps?.field ?? n.searchField ?? getColumnKey(n),
            component: "Input",
            label: n.title,
            colProps: { // TODO 考虑响应式布局
              span: Math.floor(24 / props.defaultShowItems)
            },
            ...n.formItemProps
          };
        });
      console.log("formItemSchemas", result)
      console.log("formItemSchemas", props.defaultShowItems)
      return result;
    });

    /**
     * @description 切换展开/收起 状态
     */
    const toggleAdvanced = async () => {
      state.advanced = !state.advanced;
      await nextTick();
      emit("toggle-advanced", state.advanced);
    };

    /**
     * @param {number} span 栅格占位格数
     */
    const calcSubBtnOffset = (span: number) => {
      const total = (state.advanced ? Object.keys(slots).length : props.defaultShowItems) * span;
      const remainder = total % 24;
      if (total < 24 || remainder === 0) {
        return 0;
      }
      return 24 - remainder;
    };

    const reset = async () => {
      dynamicFormRef.value?.resetFields();
      await query();
    };
    const query = async () => {
      const formModel = await dynamicFormRef.value?.validate();
      console.log("queryParams", formModel);

      emit("query", formModel);
    };

    const getFormModel = () => {
      const formModel = dynamicFormRef.value?.formModel;
      return formModel;
    };

    return {
      ...toRefs(state),
      mode,
      dynamicFormRef,
      turn,
      reset,
      query,
      calcSubBtnOffset,
      formSchema,
      formItemSchemas,
      toggleAdvanced,
      getFormModel
    };
  }
});
</script>

<style lang="less" scoped>
.table-search {
  margin-bottom: 16px;
  padding: 24px 24px 0;
  background: #fff;
}

.table-search-simple {
  padding: 0 !important;
  margin-bottom: 0px;
  line-height: 100%;
}

.table-search-simple:deep(.ant-form-item) {
  margin-bottom: 0px !important;
}

.table-search-simple:deep(.ant-form-item-label label) {
  display: none;
}

.search-submitButtons {
  display: block;
  margin-bottom: 24px;
  white-space: nowrap;
  float: right;
  overflow: hidden;
}

.search-submitButtons-simple {
  margin-bottom: 0px !important;
  float: unset !important;
}

:deep(.ant-row) {
  width: 100%;
}

:deep(.ant-form-item) {
  margin-right: 0;

  &.operate-button {
    margin-bottom: 0;
  }
}

.collapse-icon {
  transform: rotate(v-bind(turn));
  transition: transform 0.3s;
}
</style>
<template>
  <template v-for="(actionItem, index) in actionFilters" :key="`${index}-${actionItem.label}`">
    <component
      :title="actionItem.title"
      :is="actionItem.popConfirm ? Popconfirm : 'span'"
      v-bind="actionItem.popConfirm"
    >
      <a-button type="link" v-bind="actionItem" v-if="vIf(actionItem)">{{ actionItem.label }}</a-button>
    </component>
  </template>
</template>

<script lang="ts" setup>
  import { Popconfirm } from 'ant-design-vue';
  import type { PropType } from 'vue';
  import { computed } from 'vue';
  import type { ActionItem } from '../types/tableAction';
  import { verifyAuth } from '@/framework/core/permission/';
  import { isString, isObject, isBoolean, isFunction } from '@/framework/utils/is';

  const props = defineProps({
    actions: {
      // 表格行动作
      type: Array as PropType<ActionItem[]>,
      default: () => [],
    },
  });
  const vIf = (actionItem) => {
    if (isBoolean(actionItem.ifShow)) {
      return actionItem.ifShow
    }
    if (isFunction(actionItem.ifShow)) {
      return actionItem.ifShow(actionItem)
    }
    return true
  }
  const actionFilters = computed(() => {
    return props.actions.filter((item) => {
      const auth = item.auth;

      if (Object.is(auth, undefined)) {
        return true;
      }
      if (isString(auth)) {
        const isValid = verifyAuth(auth);
        item.disabled ??= !isValid;
        if (item.disabled && !isValid) {
          item.title = '对不起，您没有该操作权限！';
        }
        return isValid;
      }
      if (isObject(auth)) {
        const isValid = verifyAuth(auth.perm);
        const isDisable = auth.effect !== 'delete';
        item.disabled ??= !isValid && isDisable;
        if (item.disabled && !isValid) {
          item.title = '对不起，您没有该操作权限！';
        }
        return isValid || isDisable;
      }
    });
  });
</script>
export { useTableContext, createTableContext } from "./useTableContext";
// export { usePagination } from './usePagination';
// export { useExportData2Excel } from './useExportData2Excel';
import type { SuperTableInstance } from '../typing';
import { provide, inject } from 'vue';
import type {ComponentInternalInstance } from 'vue';

const key = Symbol('super-table');

export function createTableContext(instance: ComponentInternalInstance) {
  provide(key, instance.proxy);
}

export function useTableContext() {
  return inject(key) as SuperTableInstance;
}
import { Ref } from 'vue';
import SuperTable from './super-table.vue';
import TableQueryHeader from './components/query-form/index.vue';
export { SuperTable, TableQueryHeader };

export type { LoadDataParams, TableColumn } from './typing';

export type SuperTableInstance = InstanceType<typeof SuperTable>;

export type SuperTableRef = Ref<SuperTableInstance>;
import type { PropType, ExtractPropTypes } from 'vue';
import tableProps from 'vxe-table/packages/table/src/props';
import { VxeGridPropTypes } from 'vxe-table/types/all';
import GlobalConfig from 'vxe-table/packages/v-x-e-table/src/conf';
import { TableColumn } from './typing';
// import { ProxyAjaxQueryParams } from "vxe-table/types/grid";
import { omit } from 'lodash-es';
import { VxeToolbarProps } from 'vxe-table/types/toolbar';
import { PageSizeItemType } from 'vxe-table/types';
import { FormSchema } from '@/framework/components/core/schema-form';

export enum LayoutMode {
  CLASSIC,
  SIMPLE,
}
export const props = {
  ...omit(tableProps, 'columns'),
  mode: {
    type: Number as PropType<LayoutMode>,
    default: LayoutMode.CLASSIC,
  },
  autoLoad: {
    type: Boolean,
    default: true
  },
  /** 表格列配置 */
  columns: {
    type: Array as PropType<TableColumn<any>[]>,
    required: true,
    default: () => [],
  },

  /** 表格数据请求函数 */
  dataRequest: {
    // 获取列表数据函数API
    type: Function as PropType<
      (params: VxeGridPropTypes.ProxyAjaxQueryParams, data: any) => Promise<API.TableListResult>
    >,
  },
  dataRequestAll: {
    // 获取列表数据函数API
    type: Function as PropType<
      (params: VxeGridPropTypes.ProxyAjaxQueryAllParams, data: any) => Promise<any>
    >,
  },
  search: {
    type: Boolean,
    default: false,
  },
  pager: {
    type: Boolean,
    default: true,
  },
  /** 表格标题 */
  headerTitle: {
    type: String,
    default: '',
  },
  size: {
    type: String as PropType<VxeGridPropTypes.Size>,
    default: () => GlobalConfig.grid.size || GlobalConfig.size,
  },
  /** 工具栏配置 */
  toolbar: {
    type: Object as PropType<VxeToolbarProps>,
    default: () => ({
      custom: true,
      export: true,
    }),
  },
  /** 表单属性配置 */
  formProps: {
    type: Object as PropType<FormSchema>,
    default: () => ({}),
  },
  /** 是否显示表格card title以及action toobar的内容 */
  showCardHeader: {
    type: Boolean,
    default: true,
  },
  remoteFilter: {
    type: Boolean,
    default: false,
  },
  /** 筛选条件表单默认显示的个数 */
  queryFormDefaultShowItemCount: {
    type: Number,
    default: 5,
  },
  pageSizeConfig: {
    type: Array as PropType<PageSizeItemType[]>,
    default: [10, 15, 20, 50, 100],
  },
  /** 搜索框确认按钮类型 */
  searchBtnType: {
    type: String,
    default: 'primary'
  }
};

export type TableProps = ExtractPropTypes<typeof props>;

export default props;
<template>
  <div>
    <NewQueryForm v-if="mode === 0 && search" ref="queryFormRef" :columns="columns" :formProps="formProps"
      :defaultShowItems="getProps.queryFormDefaultShowItemCount" @toggle-advanced="(e) => emit('toggle-advanced', e)"
      @query="refreshTable" :searchBtnType="searchBtnType" />
    <Card :title="mode == 0 && !slots.title ? headerTitle : undefined">
      <template #title v-if="mode === 1">
        <NewQueryForm v-if="search" ref="queryFormRef" :columns="columns" :formProps="formProps"
          :defaultShowItems="getProps.queryFormDefaultShowItemCount" @toggle-advanced="(e) => emit('toggle-advanced', e)"
          @query="refreshTable" :searchBtnType="searchBtnType" />
      </template>
      <template #title v-if="slots.title">
        <slot name="title">{{ headerTitle }}</slot>
      </template>
      <template #extra v-if="showCardHeader">
        <!--        <div class="extra">-->
        <Space>
          <template v-if="slots.action">
            <slot name="action"></slot>
          </template>
          <template v-if="slots.toolbar">
            <slot name="toolbar"></slot>
          </template>
          <template v-else>
            <VxeToolbar ref="toolBarRef" v-bind="toolbar" />
          </template>
        </Space>
        <!--        </div>-->
      </template>
      <VxeGrid ref="tableRef" v-bind="getBindValues" @checkbox-change="checkboxChangeFn" @checkbox-all="checkboxAllFn" />
    </Card>
  </div>
</template>

<script lang="tsx">
import {
  computed,
  defineComponent,
  getCurrentInstance,
  nextTick,
  onMounted,
  provide,
  reactive,
  ref,
  Ref,
  toRefs,
  unref,
} from 'vue';
import {
  VxeGridInstance,
  VxeGridPropTypes,
  VxeTablePropTypes,
  VxeToolbarInstance,
} from 'vxe-table';
import NewQueryForm from './components/query-form/index.vue';
import TableAction from './components/table-action.vue';
import superTableProps, { LayoutMode, TableProps } from './props';
import { createTableContext } from './hooks';
import { Card, Space } from 'ant-design-vue';
import { TableColumn } from './typing';
import { omit } from 'lodash-es';
import { dict } from '@/framework/core/dict';
import { verifyAuth } from '@/framework/core/permission';

export default defineComponent({
  name: 'SuperTable',
  components: {
    Card,
    Space,
    NewQueryForm,
    TableAction,
  },
  inheritAttrs: false,
  props: superTableProps,
  emits: ['toggle-advanced', 'checkbox-change', 'checkbox-all'],
  setup(props, { emit, slots }) {
    createTableContext(getCurrentInstance()!);
    provide('layoutMode', props.mode);
    const tableRef = ref() as Ref<VxeGridInstance>;
    const queryFormRef = ref() as Ref<typeof NewQueryForm>;
    const toolBarRef = ref() as Ref<VxeToolbarInstance>;

    const innerPropsRef = ref<Partial<TableProps>>();

    const getProps = computed(() => {
      const result = { ...props, ...unref(innerPropsRef) };
      if (props.mode === LayoutMode.SIMPLE && props.queryFormDefaultShowItemCount < 5) {
        result.queryFormDefaultShowItemCount = 5;
      }
      return result;
    });

    const state = reactive({
      expandItemRefs: {},
      tableData: [] as any[], // 表格数据
      loading: false, // 表格加载
    });
    const checkboxChangeFn = (params) => {
      emit('checkbox-change', params);
    };
    const checkboxAllFn = (params) => {
      emit('checkbox-all', params);
    };
    const getBindValues = computed(() => {
      const props = unref(getProps);
      const columns = (props.columns as TableColumn[]).filter(
        (n) => !n.hideInTable && (!n.perm || verifyAuth(n.perm)),
      );
      columns.forEach((column) => {
        if (column.dict) {
          column.formatter = (params) => {
            return dict.filter({ key: column.dict, value: params.cellValue, fields: 'name' });
          };
        }
        if (column.slots) {
        } else {
          column.slots = {};
        }
        if (column.bodyCell) {
          column.slots.default = column.bodyCell;
        }

        if (column.headerCell) {
          column.slots.header = column.headerCell;
        }

        if (column.actions && column.field === '$action') {
          const actions = column.actions as Function;
          column.slots.default = (params) => (
            <TableAction actions={actions(params)}></TableAction>
          );
        }
      });
      const proxyConfig: VxeGridPropTypes.ProxyConfig = {};
      const pagerConfig: VxeGridPropTypes.PagerConfig = {
        enabled: false,
        layouts: [
          'PrevJump',
          'PrevPage',
          'Jump',
          'PageCount',
          'NextPage',
          'NextJump',
          'Sizes',
          'Total',
        ],
        currentPage: 1,
        pageSize: 10,
        pagerCount: 5,
        align: 'right',
        border: false,
        background: false,
        perfect: false,
        pageSizes: props.pageSizeConfig,
        autoHidden: false,
      };
      const filterConfig: VxeTablePropTypes.FilterConfig = {};
      if (props.dataRequest) {
        proxyConfig.enabled = true;
        proxyConfig.autoLoad = props.autoLoad;
        if (props.pager) {
          proxyConfig.props = {
            // @Notice 面向HT-Frame框架 BaseResponse 返回体
            result: 'data',
            total: 'total',
          };
        } else {
          proxyConfig.props = {
            list: 'data',
          };
        }

        proxyConfig.ajax = {
          query: props.dataRequest,
        };
        if (props.dataRequestAll) {
          proxyConfig.ajax.queryAll = props.dataRequestAll;
        }
      }

      if (props.remoteFilter) {
        filterConfig.remote = true;
        proxyConfig.filter = true;
      }

      if (props.pager) {
        pagerConfig.enabled = true;
      }

      let propsData: Recordable = {
        ...props, // 继承所有属性
        columns,
        proxyConfig,
        pagerConfig,
        loading: state.loading,
        filterConfig,
      };

      propsData = omit(propsData, ['class', 'onChange']);
      return propsData;
    });

    /**
     * 参数用反射获取
     * @see getFormModel
     */
    const queryTable = () => {
      tableRef.value.commitProxy('query');
    };

    const refreshTable = () => {
      tableRef.value.commitProxy('reload');
    };

    onMounted(() => {
      if (!slots.toolbar && props.showCardHeader) {
        nextTick(() => {
          // 将表格和工具栏进行关联
          const $table = tableRef.value;
          const $toolbar = toolBarRef.value;
          $table.getRefMaps().refTable.value.connect($toolbar);
        });
      }
    });

    /**
     * 方便FetchMethod获取请求参数
     */
    const getFormModel = () => {
      return queryFormRef.value.getFormModel();
    };

    /**
     *
     */
    const getCheckboxRecords = () => {
      return tableRef.value.getCheckboxRecords();
    };
    const getCurrentRecord = () => {
      return tableRef.value.getCurrentRecord();
    };

    const getProxyInfo = () => {
      return tableRef.value.getProxyInfo();
    };

    const openExport = () => {
      return tableRef.value.openExport();
    };
    return {
      ...toRefs(state),
      emit,
      slots,
      tableRef,
      queryFormRef,
      toolBarRef,
      // defaultSlots,
      getProps,
      getBindValues,
      queryTable,
      refreshTable,
      getFormModel,
      getCheckboxRecords,
      getCurrentRecord,
      checkboxChangeFn,
      checkboxAllFn,
      getProxyInfo,
      openExport,
      LayoutMode,
    };
  },
});
</script>

<style scoped lang="less">
:deep(.ant-card-head-title) {
  padding: 0px;
  margin: 0.6em 0;
}

:deep(.ant-card-extra) {
  padding: 0px;
}
</style>
import { ExtractPropTypes } from 'vue'
import type { PopconfirmProps } from 'ant-design-vue/es/popconfirm';
import type { ButtonProps, TooltipProps } from 'ant-design-vue/lib/components';
import { ColumnParams } from '../typing';
import type { PermissionType } from '@/framework/core/permission/modules/types';
import customButtonProps from '@/framework/components/basic/button/types/customButtonProps';
export interface ActionItem extends Omit<Partial<ExtractPropTypes<typeof customButtonProps>>, 'onClick'> {
  onClick?: Fn<ColumnParams, any>;
  label?: string;
  color?: 'success' | 'error' | 'warning';
  icon?: string;
  popConfirm?: PopConfirm;
  disabled?: boolean;
  divider?: boolean;
  // 权限编码控制是否显示
  // auth?: RoleEnum | RoleEnum[] | string | string[];
  // 业务控制是否显示
  ifShow?: boolean | ((action: ActionItem) => boolean);
  tooltip?: string | TooltipProps;
  /** 设置按钮权限, effect不传默认为disable */
  auth?:
    | PermissionType
    | {
        perm: PermissionType;
        effect?: 'delete' | 'disable';
      };
}

export interface PopConfirm extends PopconfirmProps {
  title: string;
  okText?: string;
  cancelText?: string;
  onConfirm: Fn<ColumnParams, any>;
  onCancel?: Fn<ColumnParams, any>;
  icon?: string;
  placement?:
    | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'topLeft'
    | 'topRight'
    | 'leftTop'
    | 'leftBottom'
    | 'rightTop'
    | 'rightBottom'
    | 'bottomLeft'
    | 'bottomRight';
}
import type { VNode } from 'vue';
import type { FormItemSchema } from '../schema-form/types/form';
import type { ActionItem } from './types/tableAction';
import type { TableProps as SuperTableProps } from './props';
import { VxeTableDefines } from "vxe-table/types/table";
import type { PermissionType } from '@/framework/core/permission/modules/types';
/**
 * 加载表格数据的参数
 */
export interface LoadDataParams {
  /** 根据自己业务需求定义页码 */
  page?: number;
  /** 根据自己业务需求定义页数据条数 */
  limit?: number;
}

export type ColumnParams<T = any> = {
  row: T;
  rowIndex: number;
  $rowIndex: number;
  column: VxeTableDefines.ColumnOptions;
  columnIndex: number;
  $columnIndex: number;
  _columnIndex: number;
};

/** 表格onChange事件回调参数 */
// export type OnChangeCallbackParams = VxeTableProps['onChange'];

/**
 * 表格属性
 */
export interface TableColumn<T = Indexable> extends Omit<VxeTableDefines.ColumnOptions, 'field' > {
  title: string;
  field?: keyof T | '$action';
  width?: number;
  /** 指定搜索的字段 */
  searchField?: string;
  /** 在查询表单中不展示此项 */
  hideInSearch?: boolean;
  /** 在 Table 中不展示此列 */
  hideInTable?: boolean;
  /** 传递给 Form.Item 的配置,可以配置 rules */
  formItemProps?: Partial<FormItemSchema<T>>;
  bodyCell?: (params: ColumnParams<T>) => VNode;
  headerCell?: (params: ColumnParams<T>) => VNode;
  actions?: (params: ColumnParams<T>) => ActionItem[];
  /** 字典映射字段 */
  dict?: string;
  /** 自定义字段插槽*/
  slots?: any;
  /** 当前列所需权限 */
  perm?: PermissionType
}

/**
 * 表格实例
 */
export type SuperTableInstance = {
  [P in keyof SuperTableProps]: SuperTableProps[P];
} & {
  tableData: any[];
  setProps(props: Partial<SuperTableProps>): () => any;
  getProps: SuperTableProps;
  refreshTable: (...rest: any[]) => any;
  getColumnKey: (column: TableColumn) => string | undefined;
};
import { AsyncMemo, DictConfig, DictOptions, DictProps, FilterMemo, FilterOptions, ValueType } from "./types";
import Store from "./Store";
import memoize from "mini-memoize";
import { isArray, isFunction, isObject, isPromise } from "@/framework/utils/is";

const defaultProps: DictProps = {
  name: "name",
  value: "value",
  children: "children"
};

export default class Dict {
  private store: Store;
  private readonly config: Record<string, DictConfig>;
  private readonly max: number;
  private asyncMemo: AsyncMemo;
  private readonly filterMemo: FilterMemo;

  constructor(options: DictOptions) {
    const { max, config } = options;
    this.store = new Store();
    this.config = config;
    this.max = max || 100;
    this.asyncMemo = memoize(this.asyncMemoHandler, { max: this.max });
    this.filterMemo = memoize(this.filterMemoHandler, { max: 1000 });
  }

  get reactive() {
    return {
      get: (key: string): any => {
        if (!this.store.has(key)) {
          this.get(key);
          return null;
        }
        return this.store.get(key);
      },
      filter: (options: FilterOptions): any => {
        if (!this.store.has(options.key)) {
          this.get(options.key);
          return null;
        }
        return this.handleFilter(options);
      }
    };
  }

  get(key: string) {
    const { data } = this.config[key];
    if (isArray(data)) {
      this.store.set(key, data);
      return data;
    }
    if (isFunction(data)) {
      return this.asyncMemo(key).then((res: any) => {
        this.store.set(key, res);
        return res;
      });
    }
    if (isObject(data)) {
      this.store.set(key, data);
      return data;
    }
  }

  filter(options: FilterOptions) {
    const data = this.get(options.key);
    if (isArray(data)) {
      return this.handleFilter(options);
    }
    if (isPromise(data)) {
      return data.then(() => {
        return this.handleFilter(options);
      });
    }
  }

  private async asyncMemoHandler(key: string) {
    return await this.config[key].data();
  }

  private filterMemoHandler(key: string, value: ValueType) {
    const data = this.store.get(key);
    const props = Object.assign(defaultProps, this.config[key].props || {});
    return this.getFilterResult(data, value, props);
  }

  private getFilterResult(data: any, value: ValueType, props: DictProps): any {
    for (let i = 0; i < data.length; i++) {
      const item = data[i];
      if (item[props.value!] === value) return item;
      if (item[props.children!]) {
        const result = this.getFilterResult(item[props.children!], value, props);
        if (result) return result;
      }
    }
    return null;
  }

  private handleFilter(options: FilterOptions) {
    const { key, value, fields } = options;
    const result = this.filterMemo(key, value);
    if (result && fields) {
      return Array.isArray(fields) ? fields.map(key => result[key]) : result[fields];
    }
    return result;
  }

  getProps(key: string): DictProps {
    return Object.assign(defaultProps, this.config[key].props);
  }

  deleteCache(key: string): boolean {
    const result = this.asyncMemo.delete(key);
    if (result) {
      this.filterMemo.delete((args: any[]) => args.includes(key));
    }
    return result;
  }

  clearCache() {
    this.filterMemo.clear();
    this.asyncMemo.clear();
  }

  refresh(key: string) {
    this.deleteCache(key);
    this.get(key);
  }
}
import Dict from './Dict'
import type { App } from "vue";
import { DictConfig } from "@/framework/core/dict/types";
import { isFunction, isPromise } from '@/framework/utils/is';
const dictConfig: Record<string, DictConfig> = {}
const dictFiles = import.meta.globEager('/src/**/*.dict.ts');
Object.keys(dictFiles).forEach(async (path) => {
  if (path.startsWith('./index.')) return;
  const dictDefine = dictFiles[path].default;
  if (path.indexOf('allDict') > -1) {
    if (dictDefine['AllDict'] && dictDefine['AllDict'].data) {
      const res = await dictDefine['AllDict'].data()
      Object.keys(res).forEach(dictItem => {
        dictDefine[dictItem] = {
          data: res[dictItem],
          props: { ...(dictDefine['AllDict'].props || {}) }
        }
      })
    }
  }
  Object.keys(dictDefine).forEach(async key => {
    if (key === 'AllDict') {
      return
    }
    const data = dictDefine[key].data
    if (isFunction(data)) {
      const temp = data
      const tempResult = await temp()
      dictDefine[key].data = tempResult
    } else if (isPromise(data)) {
      const res = await data
      dictDefine[key].data = res
    }
    dictConfig[key] = dictDefine[key]
  })
});
export const dict = new Dict({
  // 异步数据最大缓存数
  max: 100,
  config: dictConfig
})

export const install = (app: App) => {
  app.config.globalProperties.$dict = dict;
  // app.config.globalProperties.$dict
};

export default install
// @ts-ignore
import type { Vue } from 'vue'
// @ts-ignore
import { reactive } from 'vue'

const isVue3: boolean = !!reactive

class Store {
  private store: any

  constructor () {
    // @ts-ignore
    this.store = isVue3 ? reactive({}) : Vue.observable({})
  }

  set (key: string, value: any): void {
    // @ts-ignore
    isVue3 ? (this.store[key] = value) : (Vue.set(this.store, key, value))
  }

  get (key: string): any {
    return this.store[key]
  }

  has (key: string): boolean {
    return Reflect.has(this.store, key)
  }

  delete (key: string): boolean {
    return Reflect.deleteProperty(this.store, key)
  }
}

export default Store
import { Memoize } from 'mini-memoize'

type ValueType = string | number | boolean
declare interface DictProps {
  name?: string
  value?: string
  children?: string
}

declare interface DictConfig {
  props?: DictProps,
  data: any | Promise<any>
}

declare interface DictOptions {
  max?: number
  config: Record<string, DictConfig>
}

declare interface ReactiveOptions {
  get (key: string): any
  filter (options: FilterOptions): any
}

declare class Dict {
  constructor (options: DictOptions)
  get reactive (): ReactiveOptions
  getProps (key: string): DictProps
  get (key: string): any | Promise<any>
  filter (options: FilterOptions): any | Promise<any>
  deleteCache (key: string): boolean
  clearCache (): void
  refresh (key: string): void
}

declare interface FilterOptions {
  key: string
  value: ValueType
  fields?: string | string[]
}

declare class Store {
  constructor()
  set (key: string, value: any): void
  get (key: string): any
  has (key: string): boolean
  delete (key: string): boolean
}

declare type AsyncMemo = Memoize<(key: string) => Promise<any>>
declare type FilterMemo = Memoize<(key: string, value: ValueType) => any>

export {
  ReactiveOptions,
  DictConfig,
  DictOptions,
  DictProps,
  FilterOptions,
  Store,
  AsyncMemo,
  FilterMemo,
  ValueType
}

export default Dict
/**
 * example
 * path -> ./modules/user
 * <a-button v-if="$auth('user.add')">Button</a-button>
 * path -> ./modules/sys/user
 * <a-button v-if="$auth('sysUser.add')">Button</a-button>
 */
// import type { DataNode } from 'rc-tree-select/lib/interface'

import type { TreeSelectProps } from 'ant-design-vue';
import type { App } from 'vue';
import { permissions } from './modules/';
import type { PermissionType } from './modules/types';
import { useUserStore } from '@/store/modules/user';

type DataNode = NonNullable<TreeSelectProps['treeData']>[number];

/**
 * @description 将权限列表转成级联选择器要求的数据格式
 */
export const formatPermsToCascader = () => {
  return Object.keys(permissions).reduce<DataNode[]>((prev, moduleKey) => {
    const module = permissions[moduleKey];
    Object.keys(module).forEach((key) => {
      module[key].split(':').reduce((p, k, currentIndex, arr) => {
        const value = arr.slice(0, currentIndex + 1).join(':');
        const index = p.findIndex((item) => item?.value === value);
        if (Number.isInteger(index) && index !== -1) {
          return p[index].children;
        } else {
          const item: DataNode = {
            // key: k,
            title: k,
            label: k,
            value: value,
            children: [],
          };
          p.push(item);
          return item.children!;
        }
      }, prev);
    });
    return prev;
  }, []);
};

/**
 * 验证权限
 * @param {PermissionType} perm  权限码
 * @returns {boolean} true | false
 */
export const verifyAuth = (perm: PermissionType) => {
  const permCode = perm.split('.').join(':');
  const permissionList = useUserStore().perms;

  return permissionList.some((n) => n === permCode);
};

export default {
  install(app: App) {
    app.config.globalProperties.$auth = verifyAuth;
  },
};
interface Permissions {
  [key: string]: {
    [key: string]: string;
  };
}

const modulesPermissionFiles = import.meta.globEager('./**/*.ts');
/**
 * 根据接口路径生成接口权限码, eg: sys/user/add => sys:user:add
 * @param str 接口路径
 * @returns {string}
 */
export const generatePermCode = (str: string) => str.replace(/\//g, ':');

const filterDirs = ['/index.ts', './types.ts'];

/**
 * @description 权限列表
 */
export const permissions: Permissions = Object.keys(modulesPermissionFiles).reduce(
  (modules, modulePath) => {
    if (filterDirs.some((n) => modulePath.includes(n))) return modules;
    // set './app.js' => 'app'
    // set './sys/app.js' => 'sysApp'
    const moduleName = modulePath
      .replace(/^\.\/(.*)\.\w+$/, '$1')
      .replace(/[-_/][a-z]/gi, (s) => s.substring(1).toUpperCase());
    const value = modulesPermissionFiles[modulePath].default;

    // pass sys/user/add => sys:user:add
    const permissionModule = Object.keys(value).reduce((obj, key) => {
      obj[key] = generatePermCode(value[key]);
      return obj;
    }, {});

    modules[moduleName] = permissionModule;
    // console.log('permissions modules', modules);
    return modules;
  },
  {},
);
console.log('permissions', permissions);
import type { NetdiskMangePerms } from './manage';

export type NetdiskPermissionType = NetdiskMangePerms;
export const netdiskMange = {
  list: 'netdisk/manage/list',
  mkdir: 'netdisk/manage/mkdir',
  token: 'netdisk/manage/token',
  rename: 'netdisk/manage/rename',
  download: 'netdisk/manage/download',
  delete: 'netdisk/manage/delete',
  check: 'netdisk/manage/check',
  info: 'netdisk/manage/info',
  mark: 'netdisk/manage/mark',
  cut: 'netdisk/manage/cut',
  copy: 'netdisk/manage/copy',
} as const;

export const values = Object.values(netdiskMange);

export type NetdiskMangePerms = typeof values[number];

export default netdiskMange;
export const sysDept = {
  /** 获取部门列表 */
  list: 'sys/dept/list',
  /** 移动部门 */
  move: 'sys/dept/move',
  /** 更新部门 */
  update: 'sys/dept/update',
  delete: 'sys/dept/delete',
  add: 'sys/dept/add',
  info: 'sys/dept/info',
  transfer: 'sys/dept/transfer',
} as const;

export const values = Object.values(sysDept);

export type SysDeptPerms = typeof values[number];

export default sysDept;
import { SysLogPerms } from './log';
import { SysDeptPerms } from './dept';
import { SysMenuPerms } from './menu';
import { SysOnlinePerms } from './online';
import { SysRolePerms } from './role';
import { SysTaskPerms } from './task';
import { SysUserPerms } from './user';
import { SysServePerms } from './serve';

export type SysPermissionType =
  | SysLogPerms
  | SysDeptPerms
  | SysMenuPerms
  | SysOnlinePerms
  | SysRolePerms
  | SysTaskPerms
  | SysServePerms
  | SysUserPerms;
export const sysLog = {
  req: 'sys/log/req/page',
  login: 'sys/log/login/page',
  task: 'sys/log/task/page',
} as const;

export const values = Object.values(sysLog);

export type SysLogPerms = typeof values[number];

export default sysLog;
export const sysMenu = {
  list: 'sys/menu/list',
  add: 'sys/menu/add',
  update: 'sys/menu/update',
  info: 'sys/menu/info',
  delete: 'sys/menu/delete',
} as const;

export const deptValues = Object.values(sysMenu);

export type SysMenuPerms = typeof deptValues[number];

export default sysMenu;
export const sysOnline = {
  list: 'sys/online/list',
  kick: 'sys/online/kick',
} as const;

export const values = Object.values(sysOnline);

export type SysOnlinePerms = typeof values[number];

export default sysOnline;
export const sysRole = {
  list: 'sys/role/list',
  page: 'sys/role/page',
  add: 'sys/role/add',
  update: 'sys/role/update',
  delete: 'sys/role/delete',
  info: 'sys/role/info',
} as const;

export const values = Object.values(sysRole);

export type SysRolePerms = typeof values[number];

export default sysRole;
export const sysServe = {
  stat: 'sys/serve/stat',
} as const;

export const values = Object.values(sysServe);

export type SysServePerms = typeof values[number];

export default sysServe;
export const sysTask = {
  page: 'sys/task/page',
  add: 'sys/task/add',
  update: 'sys/task/update',
  delete: 'sys/task/delete',
  once: 'sys/task/once',
  start: 'sys/task/start',
  stop: 'sys/task/stop',
  info: 'sys/task/info',
} as const;

export const values = Object.values(sysTask);

export type SysTaskPerms = typeof values[number];

export default sysTask;
export const sysUser = {
  add: 'sys/user/add',
  page: 'sys/user/page',
  info: 'sys/user/info',
  update: 'sys/user/update',
  delete: 'sys/user/delete',
  password: 'sys/user/password',
} as const;

export const values = Object.values(sysUser);

export type SysUserPerms = typeof values[number];

export default sysUser;
import type { SysPermissionType } from './sys';
import type { NetdiskPermissionType } from './netdisk';

export type PermissionType = ReplaceAll<SysPermissionType | NetdiskPermissionType, '/', '.'>;
import type { TreeDataItem as ATreeDataItem } from 'ant-design-vue/lib/tree/Tree';

export interface TreeDataItem extends ATreeDataItem {
  children: any;
}

/**
 * 渲染部门至树形控件
 * @param {Array} depts 所有部门
 * @param {Number | null} parentId 父级部门ID
 * @param {number[]|string[]} keyPath ID路径
 */
export const formatDept2Tree = (
  depts: API.SysDeptListResult[],
  parentId: number | null = null,
  keyPath: (string | number)[] = [],
): TreeDataItem[] => {
  return depts
    .filter((item) => item.parentId === parentId)
    .map((item) => {
      const _keyPath = keyPath.concat(parentId || []);
      const arr = formatDept2Tree(depts, item.id, _keyPath);
      return Object.assign(item, {
        keyPath: _keyPath,
        title: item.name,
        key: item.id,
        value: item.id,
        formData: item,
        children: arr.length ? arr : null,
      });
    });
};

/**
 * 渲染菜单至树形控件
 * @param {Array} menus 所有菜单
 * @param {Number | null} parentId 父级菜单ID
 * @param {number[]|string[]} keyPath ID路径
 */
export const formatMenu2Tree = (
  menus: API.MenuListResult,
  parentId: number | null = null,
  keyPath: (string | number)[] = [],
): TreeDataItem[] => {
  return menus
    .filter((item) => item.parentId === parentId)
    .map((item) => {
      const _keyPath = keyPath.concat(parentId || []);
      const arr = formatMenu2Tree(menus, item.id, _keyPath);
      return Object.assign(item, {
        keyPath: _keyPath,
        title: item.name,
        key: item.id,
        value: item.id,
        formData: item,
        children: arr.length ? arr : null,
      });
    });
};

/**
 * 在树中根据ID找child
 * @param {string|number} id
 * @param {any[]} treeData 树形数据
 * @param {string} keyName 指定ID的属性名，默认是id
 * @param {string} children 指定children的属性名，默认是children
 */
export const findChildById = <T = any>(
  id,
  treeData: T[] = [],
  keyName = 'id',
  children = 'children',
) => {
  return treeData.reduce((prev, curr) => {
    if (curr[keyName] === id) {
      return curr;
    }
    if (prev) {
      return prev;
    }
    if (curr[children]?.length) {
      return findChildById(id, curr[children], keyName, children);
    }
  }, undefined);
};
/**
 * Socket事件名定义
 */

// 强制踢下线
export const EVENT_KICK = 'kick';
import { isEmpty, isFunction } from 'lodash-es';
import IO from 'socket.io-client';
import type { Socket } from 'socket.io-client';
import { useUserStore } from '@/store/modules/user';
import { useWsStore } from '../../store/ws';

/**
 * Socket连接状态
 */
export enum SocketStatus {
  // 连接中
  CONNECTING = 'CONNECTING',
  // 已连接
  CONNECTED = 'CONNECTED',
  // 已关闭
  CLOSE = 'CLOSE',
}

export type SocketStatusType = keyof typeof SocketStatus;

export type SocketIOWrapperType = InstanceType<typeof SocketIOWrapper>;

export class SocketIOWrapper {
  /**
   * socket.io-client reserved event keywords
   * @type {string[]}
   */
  static staticEvents = [
    // socket instance listen
    'connect',
    'connect_error',
    'disconnect',
    'disconnecting',
    'newListener',
    'removeListener',
    // Manager listen
    'error',
    'reconnect',
    'reconnect_attempt',
    'reconnect_error',
    'reconnect_failed',
    'ping',
    'pong',
  ] as const;
  socketInstance: Socket | null;
  emitQueue: any[];
  closeByServer: boolean;
  waiting: boolean;
  flushing: boolean;
  handleIndex: number;
  runningQueue: any[];
  wsStore = useWsStore();

  constructor() {
    // socket io client instance
    this.socketInstance = null;
    // emit cache queue
    this.emitQueue = [];
    // flush will using
    this.runningQueue = [];
    this.handleIndex = 0;
    this.flushing = false;
    this.waiting = false;
    // is server disconnect
    this.closeByServer = false;
    // init
    this._init();
  }

  /**
   * 获取当前连接的clientid
   */
  getClientId() {
    if (this.socketInstance) {
      return this.socketInstance.id;
    }
    return undefined;
  }

  /**
   * 获取真实的Socket连接状态
   */
  isConnected() {
    return this.socketInstance?.connected;
  }

  /**
   * 主动关闭连接
   */
  close() {
    if (this.socketInstance) {
      this.socketInstance.close();
    }
    this.socketInstance = null;
  }

  /**
   * SocketIO 初始化
   */
  _init() {
    if (this.socketInstance && this.socketInstance.connected) {
      throw new Error('socket is connecting');
    }
    // auth token
    const token = useUserStore().token;
    console.log('token', token);
    if (isEmpty(token)) {
      // 未登录状态则直接关闭连接
      this.close();
      return;
    }
    this.changeStatus(SocketStatus.CONNECTING);

    // 初始化SocketIO实例
    this.socketInstance = IO(import.meta.env.VITE_BASE_SOCKET_NSP, {
      path: import.meta.env.VITE_BASE_SOCKET_PATH,
      transports: ['websocket'],
      query: { token },
    });
    // register default event
    this.socketInstance.on(SocketIOWrapper.staticEvents[0], this.handleConnectEvent.bind(this));
    this.socketInstance.on(SocketIOWrapper.staticEvents[1], this.handleErrorEvent.bind(this));
    this.socketInstance.on(SocketIOWrapper.staticEvents[2], this.handleDisconnectEvent.bind(this));
    // reconnecting
    this.socketInstance.io.on(
      SocketIOWrapper.staticEvents[8],
      this.handleReconnectAttemptEvent.bind(this),
    );
  }

  /**
   * on custom event
   */
  subscribe(eventName, fn) {
    if (isEmpty(eventName) || !isFunction(fn)) {
      throw new TypeError('param must correct type');
    }
    // register
    this.socketInstance?.on(eventName, fn);
  }

  /**
   * off custom event
   */
  unsubscribe(eventName, fn) {
    if (isEmpty(eventName)) {
      throw new TypeError('param must correct type');
    }
    if (SocketIOWrapper.staticEvents.includes(eventName) && !isFunction(fn)) {
      throw new Error('default event remove must has second param');
    }
    this.socketInstance?.off(eventName, fn);
  }

  /**
   * 派发事件通知Socket状态
   */
  changeStatus(status) {
    this.wsStore.setStatus(status);
  }

  /**
   * 默认事件处理
   */
  handleConnectEvent() {
    this.changeStatus(SocketStatus.CONNECTED);
    // flush queue
    if (this.emitQueue.length > 0) {
      // copy
      const queue = this.emitQueue.slice();
      // clean
      this.emitQueue = [];
      for (let i = 0; i < queue.length; i++) {
        this.queueEmit(queue[i]);
      }
    }
  }

  /**
   * 默认事件处理
   */
  handleReconnectAttemptEvent() {
    this.changeStatus(SocketStatus.CONNECTING);
  }

  /**
   * 默认事件处理
   */
  handleDisconnectEvent(reason) {
    if (reason === 'io server disconnect') {
      this.closeByServer = true;
      this.changeStatus(SocketStatus.CLOSE);
    }
  }

  /**
   * 默认事件处理
   */
  handleErrorEvent() {
    if (this.closeByServer) {
      this.changeStatus(SocketStatus.CLOSE);
    }
  }

  /**
   * client emit
   * The following events are reserved and should not be used as event names by your application:
   * connect、connect_error、connect_timeout、error、disconnect、
   * disconnecting、newListener、reconnect_attempt、reconnecting、reconnect_error、
   * reconnect_failed、removeListener、ping、pong
   */
  emit(eventName, data) {
    // 检查event名称
    if (isEmpty(eventName) || SocketIOWrapper.staticEvents.includes(eventName)) {
      throw new TypeError('event is not allow emit');
    }
    if (!this.isConnected()) {
      // 未连接状态，则缓存，在重新连接时则会执行该队列
      this.emitQueue.push({ eventName, data });
    } else {
      // 连接成功状态
      this.socketInstance?.emit(eventName, data);
    }
  }

  /**
   * 重置队列标志状态
   */
  resetState() {
    this.handleIndex = 0;
    this.runningQueue = [];
    this.waiting = this.flushing = false;
  }

  queueEmit(item) {
    if (!this.flushing) {
      this.runningQueue.push(item);
    } else {
      // if flushing
      let i = this.runningQueue.length - 1;
      while (i > this.handleIndex) {
        i--;
      }
      this.runningQueue.splice(i + 1, 0, item);
    }
    // queue the flush
    if (!this.waiting) {
      this.waiting = true;
      setTimeout(this.flushQueue.bind(this), 0);
    }
  }

  flushQueue() {
    this.flushing = true;
    let item;
    // emit
    for (this.handleIndex = 0; this.handleIndex < this.runningQueue.length; this.handleIndex++) {
      item = this.runningQueue[this.handleIndex];
      // re emit
      this.emit(item.eventName, item.data);
    }

    this.resetState();
  }
}
import { useWsStore } from '../../store/ws';
import { onMounted, onBeforeUnmount, watch } from 'vue';

export const useSocket = (socketHooks = {}) => {
  const socketClient = useWsStore().client;

  // cache wrapper func
  const socketMap = new Map();

  const registerSocketEvent = () => {
    Object.keys(socketHooks).forEach((e) => {
      if (socketClient) {
        // bind this
        const wrapFunc = socketHooks[e];
        socketMap.set(e, wrapFunc);
        socketClient.subscribe(e, wrapFunc);
      }
    });
  };
  const unregisterSocketEvent = () => {
    Object.keys(socketHooks).forEach((e) => {
      // 增加判断避免被移除掉所有事件
      if (socketClient && socketMap.has(e)) {
        socketClient.unsubscribe(e, socketMap.get(e));
      }
    });
  };
  watch(() => socketClient, registerSocketEvent);
  onMounted(registerSocketEvent);
  onBeforeUnmount(unregisterSocketEvent);
};
import { createLoading } from '@/framework/components/basic/loading';
import type { Directive, App } from 'vue';

const loadingDirective: Directive = {
  mounted(el, binding) {
    const tip = el.getAttribute('loading-tip');
    const background = el.getAttribute('loading-background');
    const size = el.getAttribute('loading-size');
    const fullscreen = !!binding.modifiers.fullscreen;
    const instance = createLoading(
      {
        tip,
        background,
        size: size || 'large',
        loading: !!binding.value,
        absolute: !fullscreen,
      },
      fullscreen ? document.body : el,
    );
    el.instance = instance;
  },
  updated(el, binding) {
    const instance = el.instance;
    if (!instance) return;
    instance.setTip(el.getAttribute('loading-tip'));
    if (binding.oldValue !== binding.value) {
      instance.setLoading?.(binding.value && !instance.loading);
    }
  },
  unmounted(el) {
    el?.instance?.close();
  },
};

export function setupLoadingDirective(app: App) {
  app.directive('loading', loadingDirective);
}

export default loadingDirective;
import type { ObjectDirective } from 'vue';
import { hasPermission } from '@/framework/utils/permission/hasPermission';
import { App } from "vue";

const permission: ObjectDirective = {
  mounted(el: HTMLButtonElement, binding) {
    if (binding.value == undefined) return;

    const { action, effect } = binding.value;
    // 如果action不传，则认为不需要授权认证
    if (action == undefined) {
      return;
    }
    // console.log(vnode.ref.i.ctx.hasPermission(action), '虚拟')
    if (!hasPermission(action)) {
      if (effect == 'disabled') {
        el.disabled = true;
        el.setAttribute('title', '没有权限');
      } else {
        el.remove();
      }
      console.log(action, effect);
    }
  },
};

export function setupPermissionDirective(app: App) {
  app.directive('permission', permission);
}
// 用户token
export const ACCESS_TOKEN_KEY = 'ACCESS_TOKEN';

export const SSO_SUB_SYSTEMS_KEY = 'SSO_SUB_SYSTEMS';

// 国际化
export const LOCALE_KEY = 'LOCALE__';

// 用户信息
export const USER_INFO_KEY = 'USER__INFO__';

// role info key
export const ROLES_KEY = 'ROLES__KEY__';

export const IS_LOCKSCREEN = 'IS_LOCKSCREEN'; // 是否锁屏
export const TABS_ROUTES = 'TABS_ROUTES'; // 标签页

/**
 * @description: 请求结果集
 */
export enum ResultEnum {
  SUCCESS = 0,
  ERROR = -1,
  TIMEOUT = 10042,
  TYPE = 'success',
}

/**
 * @description: 请求方法
 */
export enum RequestEnum {
  GET = 'GET',
  POST = 'POST',
  PATCH = 'PATCH',
  PUT = 'PUT',
  DELETE = 'DELETE',
}

/**
 * @description:  常用的contentTyp类型
 */
export enum ContentTypeEnum {
  // json
  JSON = 'application/json;charset=UTF-8',
  // json
  TEXT = 'text/plain;charset=UTF-8',
  // form-data 一般配合qs
  FORM_URLENCODED = 'application/x-www-form-urlencoded;charset=UTF-8',
  // form-data  上传
  FORM_DATA = 'multipart/form-data;charset=UTF-8',
}
export enum SizeEnum {
  DEFAULT = 'default',
  SMALL = 'small',
  LARGE = 'large',
}

export enum SizeNumberEnum {
  DEFAULT = 48,
  SMALL = 16,
  LARGE = 64,
}

export const sizeMap: Map<SizeEnum, SizeNumberEnum> = (() => {
  const map = new Map<SizeEnum, SizeNumberEnum>();
  map.set(SizeEnum.DEFAULT, SizeNumberEnum.DEFAULT);
  map.set(SizeEnum.SMALL, SizeNumberEnum.SMALL);
  map.set(SizeEnum.LARGE, SizeNumberEnum.LARGE);
  return map;
})();
import { onUnmounted, getCurrentInstance } from 'vue';
import { createContextMenu, destroyContextMenu } from '@/framework/components/basic/context-menu';
import type { ContextMenuItem } from '@/framework/components/basic/context-menu';
export type { ContextMenuItem };

export function useContextMenu(authRemove = true) {
  if (getCurrentInstance() && authRemove) {
    onUnmounted(() => {
      destroyContextMenu();
    });
  }
  return [createContextMenu, destroyContextMenu];
}
// import { useFormModal } from './useFormModal'
import { useModal } from './useModal';

export { useModal };
import { getCurrentInstance, reactive, shallowRef, watchEffect } from 'vue';
import type { Ref } from 'vue';
interface Params {
  excludeListeners?: boolean;
  excludeKeys?: string[];
  excludeDefaultKeys?: boolean;
}

const DEFAULT_EXCLUDE_KEYS = ['class', 'style'];
const LISTENER_PREFIX = /^on[A-Z]/;

export function entries<T>(obj: Recordable<T>): [string, T][] {
  return Object.keys(obj).map((key: string) => [key, obj[key]]);
}

export function useAttrs(params: Params = {}): Ref<Recordable> | {} {
  const instance = getCurrentInstance();
  if (!instance) return {};

  const { excludeListeners = false, excludeKeys = [], excludeDefaultKeys = true } = params;
  const attrs = shallowRef({});
  const allExcludeKeys = excludeKeys.concat(excludeDefaultKeys ? DEFAULT_EXCLUDE_KEYS : []);

  // Since attrs are not reactive, make it reactive instead of doing in `onUpdated` hook for better performance
  instance.attrs = reactive(instance.attrs);

  watchEffect(() => {
    const res = entries(instance.attrs).reduce((acm, [key, val]) => {
      if (!allExcludeKeys.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))) {
        acm[key] = val;
      }

      return acm;
    }, {} as Recordable);

    attrs.value = res;
  });

  return attrs;
}
import { computed, onMounted, reactive, toRefs } from 'vue';

interface Battery {
  charging: boolean; // 当前电池是否正在充电
  chargingTime: number; // 距离充电完毕还需多少秒，如果为0则充电完毕
  dischargingTime: number; // 代表距离电池耗电至空且挂起需要多少秒
  level: number; // 代表电量的放大等级，这个值在 0.0 至 1.0 之间
  [key: string]: any;
}

export const useBattery = () => {
  const state = reactive({
    battery: {
      charging: false,
      chargingTime: 0,
      dischargingTime: 0,
      level: 100,
    },
  });

  // 更新电池使用状态
  const updateBattery = (target) => {
    for (const key in state.battery) {
      state.battery[key] = target[key];
    }
    state.battery.level = state.battery.level * 100;
  };

  // 计算电池剩余可用时间
  const calcDischargingTime = computed(() => {
    const hour = state.battery.dischargingTime / 3600;
    const minute = (state.battery.dischargingTime / 60) % 60;
    return `${~~hour}小时${~~minute}分钟`;
  });

  // 电池状态
  const batteryStatus = computed(() => {
    if (state.battery.charging && state.battery.level >= 100) {
      return '已充满';
    } else if (state.battery.charging) {
      return '充电中';
    } else {
      return '已断开电源';
    }
  });

  onMounted(async () => {
    const BatteryManager: Battery = await (window.navigator as any).getBattery();
    updateBattery(BatteryManager);
    console.log(BatteryManager, '电池');

    // 电池充电状态更新时被调用
    BatteryManager.onchargingchange = ({ target }) => {
      updateBattery(target);
      console.log(target, '电池充电状态改变了');
    };
    // 电池充电时间更新时被调用
    BatteryManager.onchargingtimechange = ({ target }) => {
      updateBattery(target);
      console.log(target, '电池充电了');
    };
    // 电池断开充电时间更新时被调用
    BatteryManager.ondischargingtimechange = ({ target }) => {
      updateBattery(target);
      console.log(target, '电池断开充电了');
    };
    // 电池电量更新时被调用
    BatteryManager.onlevelchange = ({ target }) => {
      updateBattery(target);
      console.log(target, '电量更新了');
    };

    // new Intl.DateTimeFormat('zh', {
    //   year: 'numeric',
    //   month: '2-digit',
    //   day: '2-digit',
    //   hour: '2-digit',
    //   minute: '2-digit',
    //   second: '2-digit',
    //   hour12: false
    // }).format(new Date())
  });

  return {
    ...toRefs(state),
    batteryStatus,
    calcDischargingTime,
  };
};
import {
  InjectionKey,
  provide,
  inject,
  reactive,
  readonly as defineReadonly,
  // defineComponent,
  UnwrapRef,
} from 'vue';

export interface CreateContextOptions {
  readonly?: boolean;
  createProvider?: boolean;
  native?: boolean;
}

type ShallowUnwrap<T> = {
  [P in keyof T]: UnwrapRef<T[P]>;
};

export function createContext<T>(
  context: any,
  key: InjectionKey<T> = Symbol(),
  options: CreateContextOptions = {},
) {
  const { readonly = true, createProvider = false, native = false } = options;

  const state = reactive(context);
  const provideData = readonly ? defineReadonly(state) : state;
  !createProvider && provide(key, native ? context : provideData);

  return {
    state,
  };
}

export function useContext<T>(key: InjectionKey<T>, native?: boolean): T;
export function useContext<T>(key: InjectionKey<T>, defaultValue?: any, native?: boolean): T;

export function useContext<T>(
  key: InjectionKey<T> = Symbol(),
  defaultValue?: any,
): ShallowUnwrap<T> {
  return inject(key, defaultValue || {});
}
import { ref, onMounted, onUnmounted } from 'vue';
import { debounce } from 'lodash-es';

/**
 * description: 获取页面宽度
 */

export function useDomWidth() {
  const domWidth = ref(window.innerWidth);

  function resize() {
    domWidth.value = document.body.clientWidth;
  }

  onMounted(() => {
    window.addEventListener('resize', debounce(resize, 80));
  });
  onUnmounted(() => {
    window.removeEventListener('resize', resize);
  });

  return domWidth;
}
import { onUnmounted } from 'vue';
import mitt from 'mitt';

const emitter: mitt.Emitter = mitt();

// 自定义触发器
const customEmit = (eventName) => {
  emitter.emit(eventName);
};

// 自定义接收器
const customOn = (eventName, callback) => {
  emitter.on(eventName, () => callback());
};

// 通知刷新表格数据
const toRefreshTable = () => {
  emitter.emit('refreshTable');
};

// 刷新表格数据
const refreshTable = (callback) => {
  emitter.on('refreshTable', () => callback());
};

// 通知刷新树结构数据
const toRefreshTree = () => {
  emitter.emit('refreshTree');
};

// 刷新树数据
const refreshTree = (callback) => {
  emitter.on('refreshTree', () => callback());
};

export const useEventbus = () => {
  onUnmounted(() => {
    emitter.all.clear();
  });
  return {
    customEmit,
    customOn,
    toRefreshTable,
    refreshTable,
    toRefreshTree,
    refreshTree,
  };
};
import type { Composer } from 'vue-i18n';
import { i18n } from '@/locales';

type I18nGlobalTranslation = Composer['t'];
type I18nTranslationRestParameters = [string, any];

function getKey(namespace: string | undefined, key: string) {
  if (!namespace) {
    return key;
  }
  if (key.startsWith(namespace)) {
    return key;
  }
  return `${namespace}.${key}`;
}

export function useI18n(namespace?: string): {
  t: I18nGlobalTranslation;
} {
  const normalFn = {
    t: (key: string) => {
      return getKey(namespace, key);
    },
  };

  if (!i18n) {
    return normalFn;
  }

  const { t } = i18n.global;

  const tFn: I18nGlobalTranslation = (key: string, ...arg: any[]) => {
    if (!key) return '';
    if (!key.includes('.') && !namespace) return key;
    // @ts-ignore
    return t(getKey(namespace, key), ...(arg as I18nTranslationRestParameters));
  };
  return Object.assign(i18n.global, { t: tFn });
}

/**
 * 国际化转换工具函数，主要用于处理动态路由的title
 * @param {string | Title18n} message message
 * @param isI18n  默认为true，获取对应的翻译文本,否则返回本身
 * @returns message
 */
export function transformI18n(message: string | Title18n = '', isI18n = true) {
  if (!message) {
    return '';
  }

  // 处理动态路由的title, 格式 {zh_CN:"",en_US:""}
  if (typeof message === 'object') {
    // @ts-ignore
    return message[i18n.global?.locale];
  }

  if (isI18n && typeof message === 'string') {
    // @ts-ignore
    return i18n.global.t(message);
  }
  return message;
}

// 主要用于配合vscode i18nn ally插件的提示。此功能仅用于路由和菜单。请在其他地方使用 vue-i18n 的 useI18n
export const t = (key: string) => key;
import { ref, onMounted, onUnmounted } from 'vue';

/**
 * @description 用户网络是否可用
 * */
export function useOnline() {
  const online = ref(true);

  const showStatus = (val) => {
    online.value = typeof val == 'boolean' ? val : val.target.online;
  };

  // 在页面加载后，设置正确的网络状态
  navigator.onLine ? showStatus(true) : showStatus(false);

  onMounted(() => {
    // 开始监听网络状态的变化
    window.addEventListener('online', showStatus);

    window.addEventListener('offline', showStatus);
  });
  onUnmounted(() => {
    // 移除监听网络状态的变化
    window.removeEventListener('online', showStatus);

    window.removeEventListener('offline', showStatus);
  });

  return { online };
}
import { isFunction, isUnDef } from '@/framework/utils/is';
import { ref, unref } from 'vue';

export interface ScrollToParams {
  el: any;
  to: number;
  duration?: number;
  callback?: () => any;
}

const easeInOutQuad = (t: number, b: number, c: number, d: number) => {
  t /= d / 2;
  if (t < 1) {
    return (c / 2) * t * t + b;
  }
  t--;
  return (-c / 2) * (t * (t - 2) - 1) + b;
};
const move = (el: HTMLElement, amount: number) => {
  el.scrollTop = amount;
};

const position = (el: HTMLElement) => {
  return el.scrollTop;
};
export function useScrollTo({ el, to, duration = 500, callback }: ScrollToParams) {
  const isActiveRef = ref(false);
  const start = position(el);
  const change = to - start;
  const increment = 20;
  let currentTime = 0;
  duration = isUnDef(duration) ? 500 : duration;

  const animateScroll = function () {
    if (!unref(isActiveRef)) {
      return;
    }
    currentTime += increment;
    const val = easeInOutQuad(currentTime, start, change, duration);
    move(el, val);
    if (currentTime < duration && unref(isActiveRef)) {
      requestAnimationFrame(animateScroll);
    } else {
      if (callback && isFunction(callback)) {
        callback();
      }
    }
  };
  const run = () => {
    isActiveRef.value = true;
    animateScroll();
  };

  const stop = () => {
    isActiveRef.value = false;
  };

  return { start: run, stop };
}
import { nextTick, unref } from 'vue';
import type { Ref } from 'vue';
import type { Options } from 'sortablejs';

export function useSortable(el: HTMLElement | Ref<HTMLElement>, options?: Options) {
  function initSortable() {
    nextTick(async () => {
      if (!el) return;

      const Sortable = (await import('sortablejs')).default;
      Sortable.create(unref(el), {
        animation: 500,
        delay: 400,
        delayOnTouchOnly: true,
        ...options,
      });
    });
  }

  return { initSortable };
}
import { ref, onMounted, onUnmounted } from 'vue';

/**
 * @description 获取本地时间
 */
export function useTime() {
  let timer; // 定时器
  const year = ref(0); // 年份
  const month = ref(0); // 月份
  const week = ref(''); // 星期几
  const day = ref(0); // 天数
  const hour = ref<number | string>(0); // 小时
  const minute = ref<number | string>(0); // 分钟
  const second = ref(0); // 秒

  // 更新时间
  const updateTime = () => {
    const date = new Date();
    year.value = date.getFullYear();
    month.value = date.getMonth() + 1;
    week.value = '日一二三四五六'.charAt(date.getDay());
    day.value = date.getDate();
    hour.value =
      (date.getHours() + '')?.padStart(2, '0') ||
      new Intl.NumberFormat(undefined, { minimumIntegerDigits: 2 }).format(date.getHours());
    minute.value =
      (date.getMinutes() + '')?.padStart(2, '0') ||
      new Intl.NumberFormat(undefined, { minimumIntegerDigits: 2 }).format(date.getMinutes());
    second.value = date.getSeconds();
  };

  // 原生时间格式化
  // new Intl.DateTimeFormat('zh', {
  //     year: 'numeric',
  //     month: '2-digit',
  //     day: '2-digit',
  //     hour: '2-digit',
  //     minute: '2-digit',
  //     second: '2-digit',
  //     hour12: false
  // }).format(new Date())

  updateTime();

  onMounted(() => {
    clearInterval(timer);
    timer = setInterval(() => updateTime(), 1000);
  });

  onUnmounted(() => {
    clearInterval(timer);
  });

  return { month, day, hour, minute, second, week };
}
export default {
  okText: 'OK',
  closeText: 'Close',
  cancelText: 'Cancel',
  loadingText: 'Loading...',
  saveText: 'Save',
  delText: 'Delete',
  resetText: 'Reset',
  searchText: 'Search',
  queryText: 'Search',

  inputText: 'Please enter',
  chooseText: 'Please choose',

  redo: 'Refresh',
  back: 'Back',

  light: 'Light',
  dark: 'Dark',
};
export default {
  excel: {
    exportModalTitle: 'Export data',
    fileType: 'File type',
    fileName: 'File name',
  },
  form: {
    putAway: 'Put away',
    unfold: 'Unfold',
    maxTip: 'The number of characters should be less than {0}',
    apiSelectNotFound: 'Wait for data loading to complete...',
  },
  table: {
    settingDens: 'Density',
    settingDensDefault: 'Default',
    settingDensMiddle: 'Middle',
    settingDensSmall: 'Compact',
    settingColumn: 'Column settings',
    settingColumnShow: 'Column display',
    settingIndexColumnShow: 'Index Column',
    settingFixedLeft: 'Fixed Left',
    settingFixedRight: 'Fixed Right',
    settingFullScreen: 'Full Screen',
    settingBordered: 'Bordered',
    index: 'Index',
    total: 'total of {total}',
  },
};
export default {
  footer: { onlinePreview: 'Preview', onlineDocument: 'Document' },
  header: {
    // user dropdown
    dropdownItemDoc: 'Document',
    dropdownItemLoginOut: 'Login Out',

    tooltipErrorLog: 'Error log',
    tooltipLock: 'Lock screen',
    tooltipNotify: 'Notification',

    tooltipEntryFull: 'Full Screen',
    tooltipExitFull: 'Exit Full Screen',

    // lock
    lockScreenPassword: 'Lock screen password',
    lockScreen: 'Lock screen',
    lockScreenBtn: 'Locking',

    home: 'Home',
  },
  multipleTab: {
    reload: 'Refresh current',
    close: 'Close current',
    closeLeft: 'Close Left',
    closeRight: 'Close Right',
    closeOther: 'Close Other',
    closeAll: 'Close All',
  },
  setting: {
    // content mode
    contentModeFull: 'Full',
    contentModeFixed: 'Fixed width',
    // topMenu align
    topMenuAlignLeft: 'Left',
    topMenuAlignRight: 'Center',
    topMenuAlignCenter: 'Right',
    // menu trigger
    menuTriggerNone: 'Not Show',
    menuTriggerBottom: 'Bottom',
    menuTriggerTop: 'Top',
    // menu type
    menuTypeSidebar: 'Left menu mode',
    menuTypeMixSidebar: 'Left menu mixed mode',
    menuTypeMix: 'Top Menu Mix mode',
    menuTypeTopMenu: 'Top menu mode',

    on: 'On',
    off: 'Off',
    minute: 'Minute',

    operatingTitle: 'Successful!',
    operatingContent:
      'The copy is successful, please go to src/settings/projectSetting.ts to modify the configuration!',
    resetSuccess: 'Successfully reset!',

    copyBtn: 'Copy',
    clearBtn: 'Clear cache and to the login page',

    drawerTitle: 'Configuration',

    darkMode: 'Dark mode',
    navMode: 'Navigation mode',
    interfaceFunction: 'Interface function',
    interfaceDisplay: 'Interface display',
    animation: 'Animation',
    splitMenu: 'Split menu',
    closeMixSidebarOnChange: 'Switch page to close menu',

    sysTheme: 'System theme',
    headerTheme: 'Header theme',
    sidebarTheme: 'Menu theme',

    menuDrag: 'Drag Sidebar',
    menuSearch: 'Menu search',
    menuAccordion: 'Sidebar accordion',
    menuCollapse: 'Collapse menu',
    collapseMenuDisplayName: 'Collapse menu display name',
    topMenuLayout: 'Top menu layout',
    menuCollapseButton: 'Menu collapse button',
    contentMode: 'Content area width',
    expandedMenuWidth: 'Expanded menu width',

    breadcrumb: 'Breadcrumbs',
    breadcrumbIcon: 'Breadcrumbs Icon',
    tabs: 'Tabs',
    tabDetail: 'Tab Detail',
    tabsQuickBtn: 'Tabs quick button',
    tabsRedoBtn: 'Tabs redo button',
    tabsFoldBtn: 'Tabs flod button',
    sidebar: 'Sidebar',
    header: 'Header',
    footer: 'Footer',
    fullContent: 'Full content',
    grayMode: 'Gray mode',
    colorWeak: 'Color Weak Mode',

    progress: 'Progress',
    switchLoading: 'Switch Loading',
    switchAnimation: 'Switch animation',
    animationType: 'Animation type',

    autoScreenLock: 'Auto screen lock',
    notAutoScreenLock: 'Not auto lock',

    fixedHeader: 'Fixed header',
    fixedSideBar: 'Fixed Sidebar',

    mixSidebarTrigger: 'Mixed menu Trigger',
    triggerHover: 'Hover',
    triggerClick: 'Click',

    mixSidebarFixed: 'Fixed expanded menu',
  },
};
export default {
  okText: '确认',
  closeText: '关闭',
  cancelText: '取消',
  loadingText: '加载中...',
  saveText: '保存',
  delText: '删除',
  resetText: '重置',
  searchText: '搜索',
  queryText: '查询',

  inputText: '请输入',
  chooseText: '请选择',

  redo: '刷新',
  back: '返回',

  light: '亮色主题',
  dark: '黑暗主题',
};
export default {
  excel: {
    exportModalTitle: '导出数据',
    fileType: '文件类型',
    fileName: '文件名',
  },
  form: {
    putAway: '收起',
    unfold: '展开',

    maxTip: '字符数应小于{0}位',

    apiSelectNotFound: '请等待数据加载完成...',
  },
  table: {
    settingDens: '密度',
    settingDensDefault: '默认',
    settingDensMiddle: '中等',
    settingDensSmall: '紧凑',
    settingColumn: '列设置',
    settingColumnShow: '列展示',
    settingIndexColumnShow: '序号列',
    settingFixedLeft: '固定到左侧',
    settingFixedRight: '固定到右侧',
    settingFullScreen: '全屏',
    settingBordered: '边框',

    index: '序号',

    total: '共 {total} 条数据',
  },
};
export default {
  footer: { onlinePreview: '在线预览', onlineDocument: '在线文档' },
  header: {
    // user dropdown
    dropdownItemDoc: '文档',
    dropdownItemLoginOut: '退出系统',

    // tooltip
    tooltipErrorLog: '错误日志',
    tooltipLock: '锁定屏幕',
    tooltipNotify: '消息通知',

    tooltipEntryFull: '全屏',
    tooltipExitFull: '退出全屏',

    // lock
    lockScreenPassword: '锁屏密码',
    lockScreen: '锁定屏幕',
    lockScreenBtn: '锁定',

    home: '首页',
  },
  multipleTab: {
    reload: '重新加载',
    close: '关闭标签页',
    closeLeft: '关闭左侧标签页',
    closeRight: '关闭右侧标签页',
    closeOther: '关闭其它标签页',
    closeAll: '关闭全部标签页',
  },
  setting: {
    // content mode
    contentModeFull: '流式',
    contentModeFixed: '定宽',
    // topMenu align
    topMenuAlignLeft: '居左',
    topMenuAlignRight: '居中',
    topMenuAlignCenter: '居右',
    // menu trigger
    menuTriggerNone: '不显示',
    menuTriggerBottom: '底部',
    menuTriggerTop: '顶部',
    // menu type
    menuTypeSidebar: '左侧菜单模式',
    menuTypeMixSidebar: '左侧菜单混合模式',
    menuTypeMix: '顶部菜单混合模式',
    menuTypeTopMenu: '顶部菜单模式',

    on: '开',
    off: '关',
    minute: '分钟',

    operatingTitle: '操作成功',
    operatingContent: '复制成功,请到 src/settings/projectSetting.ts 中修改配置！',
    resetSuccess: '重置成功！',

    copyBtn: '拷贝',
    clearBtn: '清空缓存并返回登录页',

    drawerTitle: '项目配置',

    darkMode: '主题',
    navMode: '导航栏模式',
    interfaceFunction: '界面功能',
    interfaceDisplay: '界面显示',
    animation: '动画',
    splitMenu: '分割菜单',
    closeMixSidebarOnChange: '切换页面关闭菜单',

    sysTheme: '系统主题',
    headerTheme: '顶栏主题',
    sidebarTheme: '菜单主题',

    menuDrag: '侧边菜单拖拽',
    menuSearch: '菜单搜索',
    menuAccordion: '侧边菜单手风琴模式',
    menuCollapse: '折叠菜单',
    collapseMenuDisplayName: '折叠菜单显示名称',
    topMenuLayout: '顶部菜单布局',
    menuCollapseButton: '菜单折叠按钮',
    contentMode: '内容区域宽度',
    expandedMenuWidth: '菜单展开宽度',

    breadcrumb: '面包屑',
    breadcrumbIcon: '面包屑图标',
    tabs: '标签页',
    tabDetail: '标签详情页',
    tabsQuickBtn: '标签页快捷按钮',
    tabsRedoBtn: '标签页刷新按钮',
    tabsFoldBtn: '标签页折叠按钮',
    sidebar: '左侧菜单',
    header: '顶栏',
    footer: '页脚',
    fullContent: '全屏内容',
    grayMode: '灰色模式',
    colorWeak: '色弱模式',

    progress: '顶部进度条',
    switchLoading: '切换loading',
    switchAnimation: '切换动画',
    animationType: '动画类型',

    autoScreenLock: '自动锁屏',
    notAutoScreenLock: '不自动锁屏',

    fixedHeader: '固定header',
    fixedSideBar: '固定Sidebar',

    mixSidebarTrigger: '混合菜单触发方式',
    triggerHover: '悬停',
    triggerClick: '点击',

    mixSidebarFixed: '固定展开菜单',
  },
};
/**
 * 获取当前页面查询参数
 * @param variable
 * @returns {string|boolean}
 */
function getQueryVariable(variable) {
  let query = window.location.search.substring(1);
  let vars = query.split("&");
  for (let i = 0; i < vars.length; i++) {
    let pair = vars[i].split("=");
    if (pair[0] == variable) {
      return pair[1];
    }
  }
  return false;
}


/**
 * 抹除当前页面查询参数
 * @param variable
 * @returns {string|boolean}
 */
function removeQueryVariable(variable) {
  let resultUrl = window.location.href.split("?")[0];
  let query = window.location.search.substring(1);
  let vars = query.split("&");
  if (query.indexOf(variable + "=") == -1) {
    return window.location.href;
  }
  // 考虑了要移除的
  if (vars.length > 1) {
    resultUrl += "?";
  }
  for (let i = 0; i < vars.length; i++) {
    let pair = vars[i].split("=");
    if (pair[0] !== variable) {
      resultUrl += vars[i];
      if (i != vars.length - 1) {
        resultUrl += "&";
      }
    }
  }
  return resultUrl;
}

const Base64 = window.BASE64;

function getSubSystemFromToken(token): SSO.SystemInfo {
  let base64 = Base64.urlsafe_decode(token.split(".")[1]); // eslint-disable-line
  let subjectStr = JSON.parse(base64).sub;
  let subject = JSON.parse(subjectStr);
  return subject.ssochildSystemInfos.childSystemInfos.values;
}

// 用于SSO单点登录检验与跳转
import Storage from "@/framework/utils/Storage";
import { ACCESS_TOKEN_KEY, SSO_SUB_SYSTEMS_KEY } from "@/framework/enums/cacheEnum";

const jwt = getQueryVariable("jwt");
if (jwt) {
  Storage.set(ACCESS_TOKEN_KEY, jwt);
  Storage.set(SSO_SUB_SYSTEMS_KEY,getSubSystemFromToken(jwt));
  window.location.replace(removeQueryVariable("jwt"));
}
declare namespace SSO{
  interface SystemInfo {
    systemId: string ;
    systemName: string ;
    systemUserId: string ;
    systemRedirectUrl: string ;
    icon: string ;
  }
}
import { defineStore } from "pinia";

interface PermissionState {
  // Permission code list
  permCodeList: string[] | number[];

  frontMenuList: Menu[];
}

export const usePermissionStore = defineStore({
  id:'frame-permission',
  state:():PermissionState=>({

  })
})
import { defineStore } from 'pinia';
import { store } from '@/store';
import { EVENT_KICK } from '@/framework/core/socket/event-type';
import { SocketIOWrapper, SocketStatus } from '@/framework/core/socket/socket-io';
import type { SocketIOWrapperType, SocketStatusType } from '@/framework/core/socket/socket-io';
import { Modal } from 'ant-design-vue';
import { useUserStore } from '@/store/modules/user';

interface WsState {
  client: SocketIOWrapperType | null;
  status: SocketStatusType;
}

export const useWsStore = defineStore({
  id: 'ws',
  state: (): WsState => ({
    // socket wrapper 实例
    client: null,
    // socket 连接状态
    status: SocketStatus.CLOSE,
  }),
  actions: {
    setClient(client: SocketIOWrapperType | null) {
      this.client = client as any;
    },
    setStatus(status: SocketStatusType) {
      if (this.status === status) {
        return;
      }
      this.status = status;
    },
    // 初始化Socket
    initSocket() {
      // check is init
      if (this.client?.isConnected?.()) {
        return;
      }
      const ws = new SocketIOWrapper();
      ws.subscribe(EVENT_KICK, async (data) => {
        const userStore = useUserStore();
        // reset token
        userStore.resetToken();
        Modal.warning({
          title: '警告',
          content: `您已被管理员${data.operater}踢下线！`,
          centered: true,
          okText: '重新登录',
          onOk() {
            // 刷新页面
            window.location.reload();
          },
        });
      });
      this.setClient(ws);
    },

    // 关闭Socket连接
    closeSocket() {
      this.client?.close?.();
      this.setClient(null);
    },
  },
});

// 在组件setup函数外使用
export function useWsStoreWithOut() {
  return useWsStore(store);
}
export type zh = Record<
'内核' |
'内核版本' |
'平台' |
'载体' |
'载体版本' |
'系统' |
'系统版本', string> & {
  '外壳'?: string,
  '外壳版本'?: string,
}
export type en = Record<
'engine' |
'engineVs' |
'platform' |
'supporter' |
'supporterVs' |
'system' |
'systemVs', string> & {
  'shell'?: string,
  'shellVs'?: string,
}
/**
 * @description 获取用户浏览器版本及系统信息
 * @param {string='zh-cn' | 'en'} lang 返回中文的信息还是英文的
 * @constructor
 */
export default function BrowserType(lang: 'zh-cn' | 'en' = 'en'):zh|en {
  // 权重：系统 + 系统版本 > 平台 > 内核 + 载体 + 内核版本 + 载体版本 > 外壳 + 外壳版本
  const ua = navigator.userAgent.toLowerCase();
  const testUa = (regexp) => regexp.test(ua);
  const testVs = (regexp) =>
    ua
      .match(regexp)
      ?.toString()
      .replace(/[^0-9|_.]/g, '')
      .replace(/_/g, '.');
  // 系统
  const system =
    new Map([
      [testUa(/windows|win32|win64|wow32|wow64/g), 'windows'], // windows系统
      [testUa(/macintosh|macintel/g), 'macos'], // macos系统
      [testUa(/x11/g), 'linux'], // linux系统
      [testUa(/android|adr/g), 'android'], // android系统
      [testUa(/ios|iphone|ipad|ipod|iwatch/g), 'ios'], // ios系统
    ]).get(true) || 'unknow';

  // 系统版本
  const systemVs =
    new Map([
      [
        'windows',
        new Map([
          [testUa(/windows nt 5.0|windows 2000/g), '2000'],
          [testUa(/windows nt 5.1|windows xp/g), 'xp'],
          [testUa(/windows nt 5.2|windows 2003/g), '2003'],
          [testUa(/windows nt 6.0|windows vista/g), 'vista'],
          [testUa(/windows nt 6.1|windows 7/g), '7'],
          [testUa(/windows nt 6.2|windows 8/g), '8'],
          [testUa(/windows nt 6.3|windows 8.1/g), '8.1'],
          [testUa(/windows nt 10.0|windows 10/g), '10'],
        ]).get(true),
      ],
      ['macos', testVs(/os x [\d._]+/g)],
      ['android', testVs(/android [\d._]+/g)],
      ['ios', testVs(/os [\d._]+/g)],
    ]).get(system) || 'unknow';

  // 平台
  let platform = 'unknow';
  if (system === 'windows' || system === 'macos' || system === 'linux') {
    platform = 'desktop'; // 桌面端
  } else if (system === 'android' || system === 'ios' || testUa(/mobile/g)) {
    platform = 'mobile'; // 移动端
  }
  // 内核和载体
  const [engine = 'unknow', supporter = 'unknow'] = new Map([
    [
      testUa(/applewebkit/g),
      [
        'webkit',
        new Map([
          // webkit内核
          [testUa(/safari/g), 'safari'], // safari浏览器
          [testUa(/chrome/g), 'chrome'], // chrome浏览器
          [testUa(/opr/g), 'opera'], // opera浏览器
          [testUa(/edge/g), 'edge'], // edge浏览器
        ]).get(true),
      ] || 'unknow',
    ], // [webkit内核, xxx浏览器]
    [testUa(/gecko/g) && testUa(/firefox/g), ['gecko', 'firefox']], // [gecko内核,firefox浏览器]
    [testUa(/presto/g), ['presto', 'opera']], // [presto内核,opera浏览器]
    [testUa(/trident|compatible|msie/g), ['trident', 'iexplore']], // [trident内核,iexplore浏览器]
  ]).get(true) || ['unknow', 'unknow'];

  // 内核版本
  const engineVs =
    new Map([
      ['webkit', testVs(/applewebkit\/[\d._]+/g)],
      ['gecko', testVs(/gecko\/[\d._]+/g)],
      ['presto', testVs(/presto\/[\d._]+/g)],
      ['trident', testVs(/trident\/[\d._]+/g)],
    ]).get(engine) || 'unknow';

  // 载体版本
  const supporterVs =
    new Map([
      ['firefox', testVs(/firefox\/[\d._]+/g)],
      ['opera', testVs(/opr\/[\d._]+/g)],
      ['iexplore', testVs(/(msie [\d._]+)|(rv:[\d._]+)/g)],
      ['edge', testVs(/edge\/[\d._]+/g)],
      ['safari', testVs(/version\/[\d._]+/g)],
      ['chrome', testVs(/chrome\/[\d._]+/g)],
    ]).get(supporter) || 'unknow';

  // 外壳和外壳版本
  const [shell = 'none', shellVs = 'unknow'] = new Map([
    [testUa(/micromessenger/g), ['wechat', testVs(/micromessenger\/[\d._]+/g)]], // [微信浏览器,]
    [testUa(/qqbrowser/g), ['qq', testVs(/qqbrowser\/[\d._]+/g)]], // [QQ浏览器,]
    [testUa(/ucbrowser/g), ['uc', testVs(/ucbrowser\/[\d._]+/g)]], // [UC浏览器,]
    [testUa(/qihu 360se/g), ['360', 'unknow']], // [360浏览器(无版本),]
    [testUa(/2345explorer/g), ['2345', testVs(/2345explorer\/[\d._]+/g)]], // [2345浏览器,]
    [testUa(/metasr/g), ['sougou', 'unknow']], // [搜狗浏览器(无版本),]
    [testUa(/lbbrowser/g), ['liebao', 'unknow']], // [猎豹浏览器(无版本),]
    [testUa(/maxthon/g), ['maxthon', testVs(/maxthon\/[\d._]+/g)]], // [遨游浏览器,]
  ]).get(true) || ['none', 'unknow'];

  return {
    'zh-cn': Object.assign(
      {
        内核: engine, // 内核: webkit gecko presto trident
        内核版本: engineVs, // 内核版本
        平台: platform, // 平台: desktop mobile
        载体: supporter, // 载体: chrome safari firefox opera iexplore edge
        载体版本: supporterVs, // 载体版本
        系统: system, // 系统: windows macos linux android ios
        系统版本: systemVs, // 系统版本
      },
      shell === 'none'
        ? {}
        : {
            外壳: shell, // 外壳: wechat qq uc 360 2345 sougou liebao maxthon
            外壳版本: shellVs, // 外壳版本
          },
    ),
    en: Object.assign(
      {
        engine, // 内核: webkit gecko presto trident
        engineVs, // 内核版本
        platform, // 平台: desktop mobile
        supporter, // 载体: chrome safari firefox opera iexplore edge
        supporterVs, // 载体版本
        system, // 系统: windows macos linux android ios
        systemVs, // 系统版本
      },
      shell === 'none'
        ? {}
        : {
            shell, // 外壳: wechat qq uc 360 2345 sougou liebao maxthon
            shellVs, // 外壳版本
          },
    ),
  }[lang];
}
import dayjs from 'dayjs';

/**
 * @description 处理首字母大写 abc => Abc
 * @param str
 */
export const changeStr = (str: string) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

/**
 * @description 随机生成颜色
 * @param {string} type
 * @return {string}
 */
export const randomColor = (type: 'rgb' | 'hex' | 'hsl'): string => {
  switch (type) {
    case 'rgb':
      return window.crypto.getRandomValues(new Uint8Array(3)).toString();
    case 'hex':
      return (
        '#' +
        Math.floor(Math.random() * 0xffffff)
          .toString(16)
          .padStart(6, `${Math.random() * 10}`)
      );
    case 'hsl':
      // 在25-95%范围内具有饱和度，在85-95%范围内具有亮度
      return [360 * Math.random(), 100 * Math.random() + '%', 100 * Math.random() + '%'].toString();
  }
};

/**
 * 复制文本
 * @param text
 */
export const copyText = (text: string) => {
  return new Promise((resolve) => {
    const copyInput = document.createElement('input'); //创建一个input框获取需要复制的文本内容
    copyInput.value = text;
    document.body.appendChild(copyInput);
    copyInput.select();
    document.execCommand('copy');
    copyInput.remove();
    resolve(true);
  });
};

/**
 * @description 判断字符串是否是base64
 * @param {string} str
 */
export const isBase64 = (str: string): boolean => {
  if (str === '' || str.trim() === '') {
    return false;
  }
  try {
    return btoa(atob(str)) == str;
  } catch (err) {
    return false;
  }
};
// 对象转JSON
export const toJSON = (obj) => {
  return JSON.stringify(obj, (_, value) => {
    switch (true) {
      case typeof value === 'undefined':
        return 'undefined';
      case typeof value === 'symbol':
        return value.toString();
      case typeof value === 'function':
        return value.toString();
      default:
        break;
    }
    return value;
  });
};

/***
 * @description 是否是生产环境
 */
export const IS_PROD = import.meta.env.PROD;
export const IS_DEV = import.meta.env.DEV;

/***
 * @description 格式化日期
 * @param time
 */
export const formatDate = (time) => dayjs(time).format('YYYY-MM-DD HH:mm:ss');

/**
 *  @description 将一维数组转成树形结构数据
 * @param items
 * @param id
 * @param link
 */
export const generateTree = (items, id = 0, link = 'parent') => {
  return items
    .filter((item) => item[link] == id)
    .map((item) => ({
      ...item,
      slots: { title: 'name' },
      children: generateTree(items, item.departmentid),
    }));
};

/**
 * 将树形结构数转换为一维数组
 * @param treeData
 * @param childrenName
 * @returns 新数组
 */
export const treeToArr = (treeData, childrenName = 'children') => {
  return treeData.reduce((cur, item) => {
    if (Array.isArray(item[childrenName])) {
      const copyItem = { ...item };
      delete copyItem[childrenName];
      return cur.concat(copyItem, treeToArr(item[childrenName]));
    } else {
      return cur.concat(item);
    }
  }, []);
};

/***
 * @description 原生加密明文
 * @param {string} plaintext
 */
// const encryption = (plaintext: string) =>
//   isBase64(plaintext) ? plaintext : window.btoa(window.encodeURIComponent(plaintext));

/**
 * @description 原生解密
 * @param {string} ciphertext
 */
// const decryption = (ciphertext: string) =>
//   isBase64(ciphertext) ? window.decodeURIComponent(window.atob(ciphertext)) : ciphertext;

// const viewsModules = import.meta.glob('../views/**/*.vue');

// /**
//  *
//  * @param {string} viewPath 页面的路径 `@/view/${viewPath}`
//  * @param {string} viewFileName  页面文件 默认 index.vue
//  */
// export const getAsyncPage = (viewPath: string, viewFileName = 'index') => {
//   if (viewPath.endsWith('.vue')) {
//     const p = `../views/${viewPath}`;
//     const pathKey = Object.keys(viewsModules).find((key) => key === p)!;
//     // console.log('viewsModules[pathKey]', viewsModules[pathKey]);
//     return viewsModules[pathKey];
//   } else {
//     const p = `../views/${viewPath}/${viewFileName}.vue`;
//     const pathKey = Object.keys(viewsModules).find((key) => key === p)!;
//     // console.log('viewsModules[pathKey]', viewsModules[pathKey]);
//     return viewsModules[pathKey];
//     // return () => import(/* @vite-ignore */ `../views/${viewPath}/${viewFileName}.vue`);
//   }
// };

/**
 * / _ - 转换成驼峰并将view替换成空字符串
 * @param {*} name name
 */
export const toHump = (name) => {
  return name
    .replace(/[\-\/\_](\w)/g, (_, letter) => {
      return letter.toUpperCase();
    })
    .replace('views', '');
};
/**
 * Independent time operation tool to facilitate subsequent switch to dayjs
 */
import dayjs from 'dayjs';

const DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';
const DATE_FORMAT = 'YYYY-MM-DD';

export function formatToDateTime(
  date: dayjs.Dayjs | undefined = undefined,
  format = DATE_TIME_FORMAT,
): string {
  return dayjs(date).format(format);
}

export function formatToDate(
  date: dayjs.Dayjs | undefined = undefined,
  format = DATE_FORMAT,
): string {
  return dayjs(date).format(format);
}

export const dateUtil = dayjs;
import type { FunctionArgs } from '@vueuse/core';
import { upperFirst } from 'lodash-es';

export interface ViewportOffsetResult {
  left: number;
  top: number;
  right: number;
  bottom: number;
  rightIncludeBody: number;
  bottomIncludeBody: number;
}

export function getBoundingClientRect(element: Element): DOMRect | number {
  if (!element || !element.getBoundingClientRect) {
    return 0;
  }
  return element.getBoundingClientRect();
}

function trim(string: string) {
  return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
}

/* istanbul ignore next */
export function hasClass(el: Element, cls: string) {
  if (!el || !cls) return false;
  if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
  }
}

/* istanbul ignore next */
export function addClass(el: Element, cls: string) {
  if (!el) return;
  let curClass = el.className;
  const classes = (cls || '').split(' ');

  for (let i = 0, j = classes.length; i < j; i++) {
    const clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += ' ' + clsName;
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}

/* istanbul ignore next */
export function removeClass(el: Element, cls: string) {
  if (!el || !cls) return;
  const classes = cls.split(' ');
  let curClass = ' ' + el.className + ' ';

  for (let i = 0, j = classes.length; i < j; i++) {
    const clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(' ' + clsName + ' ', ' ');
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}
/**
 * Get the left and top offset of the current element
 * left: the distance between the leftmost element and the left side of the document
 * top: the distance from the top of the element to the top of the document
 * right: the distance from the far right of the element to the right of the document
 * bottom: the distance from the bottom of the element to the bottom of the document
 * rightIncludeBody: the distance between the leftmost element and the right side of the document
 * bottomIncludeBody: the distance from the bottom of the element to the bottom of the document
 *
 * @description:
 */
export function getViewportOffset(element: Element): ViewportOffsetResult {
  const doc = document.documentElement;

  const docScrollLeft = doc.scrollLeft;
  const docScrollTop = doc.scrollTop;
  const docClientLeft = doc.clientLeft;
  const docClientTop = doc.clientTop;

  const pageXOffset = window.pageXOffset;
  const pageYOffset = window.pageYOffset;

  const box = getBoundingClientRect(element);

  const { left: retLeft, top: rectTop, width: rectWidth, height: rectHeight } = box as DOMRect;

  const scrollLeft = (pageXOffset || docScrollLeft) - (docClientLeft || 0);
  const scrollTop = (pageYOffset || docScrollTop) - (docClientTop || 0);
  const offsetLeft = retLeft + pageXOffset;
  const offsetTop = rectTop + pageYOffset;

  const left = offsetLeft - scrollLeft;
  const top = offsetTop - scrollTop;

  const clientWidth = window.document.documentElement.clientWidth;
  const clientHeight = window.document.documentElement.clientHeight;
  return {
    left: left,
    top: top,
    right: clientWidth - rectWidth - left,
    bottom: clientHeight - rectHeight - top,
    rightIncludeBody: clientWidth - left,
    bottomIncludeBody: clientHeight - top,
  };
}

export function hackCss(attr: string, value: string) {
  const prefix: string[] = ['webkit', 'Moz', 'ms', 'OT'];

  const styleObj: any = {};
  prefix.forEach((item) => {
    styleObj[`${item}${upperFirst(attr)}`] = value;
  });
  return {
    ...styleObj,
    [attr]: value,
  };
}

/* istanbul ignore next */
export function on(
  element: Element | HTMLElement | Document | Window,
  event: string,
  handler: EventListenerOrEventListenerObject,
): void {
  if (element && event && handler) {
    element.addEventListener(event, handler, false);
  }
}

/* istanbul ignore next */
export function off(
  element: Element | HTMLElement | Document | Window,
  event: string,
  handler: Fn,
): void {
  if (element && event && handler) {
    element.removeEventListener(event, handler, false);
  }
}

/* istanbul ignore next */
export function once(el: HTMLElement, event: string, fn: EventListener): void {
  const listener = function (this: any, ...args: unknown[]) {
    if (fn) {
      fn.apply(this, args);
    }
    off(el, event, listener);
  };
  on(el, event, listener);
}

export function useRafThrottle<T extends FunctionArgs>(fn: T): T {
  let locked = false;
  // @ts-ignore
  return function (...args: any[]) {
    if (locked) return;
    locked = true;
    window.requestAnimationFrame(() => {
      // @ts-ignore
      fn.apply(this, args);
      locked = false;
    });
  };
}
/**
 * URL方式保存文件到本地
 * @param data 文件的blob数据
 * @param name 文件名
 */
// function saveAs(data, name) {
//   const urlObject = window.URL || window.webkitURL || window;
//   const export_blob = new Blob([data]);
//   const save_link = document.createElement('a');
//   save_link.href = urlObject.createObjectURL(export_blob);
//   save_link.download = name;
//   save_link.click();
//   urlObject.revokeObjectURL(save_link.href);
// }

/**
 * 根据文件url获取文件名
 * @param url 文件url
 */
function getFileName(url) {
  const num = url.lastIndexOf('/') + 1;
  let fileName = url.substring(num);
  //把参数和文件名分割开
  fileName = decodeURI(fileName.split('?')[0]);
  return fileName;
}

/**
 * 根据文件地址下载文件
 * @param {*} sUrl
 */
export function downloadByUrl({
  url,
  target = '_blank',
  fileName,
}: {
  url: string;
  target?: '_self' | '_blank';
  fileName?: string;
}): Promise<boolean> {
  // 是否同源
  const isSameHost = new URL(url).host == location.host;
  return new Promise<boolean>((resolve, reject) => {
    if (isSameHost) {
      const link = document.createElement('a');
      link.href = url;
      link.target = target;

      if (link.download !== undefined) {
        link.download = fileName || getFileName(url);
      }

      if (document.createEvent) {
        const e = document.createEvent('MouseEvents');
        e.initEvent('click', true, true);
        link.dispatchEvent(e);
        return resolve(true);
      }

      if (url.indexOf('?') === -1) {
        url += '?download';
      }

      window.open(url, target);
      return resolve(true);
    } else {
      const canvas = document.createElement('canvas');
      const img = document.createElement('img');
      img.setAttribute('crossOrigin', 'Anonymous');
      img.src = url;
      img.onload = (_) => {
        canvas.width = img.width;
        canvas.height = img.height;
        const context = canvas.getContext('2d')!;
        context.drawImage(img, 0, 0, img.width, img.height);
        // window.navigator.msSaveBlob(canvas.msToBlob(),'image.jpg');
        // saveAs(imageDataUrl, '附件');
        canvas.toBlob((blob) => {
          const link = document.createElement('a');
          link.href = window.URL.createObjectURL(blob!);
          link.download = getFileName(url);
          link.click();
          URL.revokeObjectURL(link.href);
          resolve(true);
        }, 'image/jpeg');
      };
      img.onerror = (e) => reject(e);
    }
  });
}

/**
 * @description: Development mode
 */
export const devMode = 'development';

/**
 * @description: Production mode
 */
export const prodMode = 'production';

/**
 * @description: Get environment variables
 * @returns:
 * @example:
 */
export function getEnv(): string {
  return import.meta.env.MODE;
}

/**
 * @description: Is it a development mode
 * @returns:
 * @example:
 */
export function isDevMode(): boolean {
  return import.meta.env.DEV;
}

/**
 * @description: Is it a production mode
 * @returns:
 * @example:
 */
export function isProdMode(): boolean {
  return import.meta.env.PROD;
}
import type { App } from 'vue';
import { isObject } from './is';

/**
 *
 * byte to size
 * formatBytes(1024);       // 1 KB
 * formatBytes('1024');     // 1 KB
 * formatBytes(1234);       // 1.21 KB
 * formatBytes(1234, 3);    // 1.205 KB
 * @param {number} bytes file size
 */
export function formatSizeUnits(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

export function deepMerge<T = any>(src: any = {}, target: any = {}): T {
  let key: string;
  for (key in target) {
    src[key] = isObject(src[key]) ? deepMerge(src[key], target[key]) : (src[key] = target[key]);
  }
  return src;
}

export const withInstall = <T>(component: T, alias?: string) => {
  const comp = component as any;
  comp.install = (app: App) => {
    app.component(comp.name || comp.displayName, component);
    if (alias) {
      app.config.globalProperties[alias] = component;
    }
  };
  return component as T & Plugin;
};
const toString = Object.prototype.toString;

export function is(val: unknown, type: string) {
  return toString.call(val) === `[object ${type}]`;
}

export function isDef<T = unknown>(val?: T): val is T {
  return typeof val !== 'undefined';
}

export function isUnDef<T = unknown>(val?: T): val is T {
  return !isDef(val);
}

export function isObject(val: any): val is Record<any, any> {
  return val !== null && is(val, 'Object');
}

export function isEmpty<T = unknown>(val: T): val is T {
  if (isArray(val) || isString(val)) {
    return val.length === 0;
  }

  if (val instanceof Map || val instanceof Set) {
    return val.size === 0;
  }

  if (isObject(val)) {
    return Object.keys(val).length === 0;
  }

  return false;
}

export function isDate(val: unknown): val is Date {
  return is(val, 'Date');
}

export function isNull(val: unknown): val is null {
  return val === null;
}

export function isNullAndUnDef(val: unknown): val is null | undefined {
  return isUnDef(val) && isNull(val);
}

export function isNullOrUnDef(val: unknown): val is null | undefined {
  return isUnDef(val) || isNull(val);
}

export function isNumber(val: unknown): val is number {
  return is(val, 'Number');
}

export function isPromise<T = any>(val: unknown): val is Promise<T> {
  // @ts-ignore
  return is(val, 'Promise') && typeof val === 'object' && isFunction(val.then) && isFunction(val.catch);
}

export function isString(val: unknown): val is string {
  return is(val, 'String');
}

export function isFunction(val: unknown): val is Function {
  return typeof val === 'function';
}

export function isBoolean(val: unknown): val is boolean {
  return is(val, 'Boolean');
}

export function isRegExp(val: unknown): val is RegExp {
  return is(val, 'RegExp');
}

export function isArray(val: any): val is Array<any> {
  return val && Array.isArray(val);
}

export function isWindow(val: any): val is Window {
  return typeof window !== 'undefined' && is(val, 'Window');
}

export function isElement(val: unknown): val is Element {
  return isObject(val) && !!val.tagName;
}

export function isMap(val: unknown): val is Map<any, any> {
  return is(val, 'Map');
}

export const isServer = typeof window === 'undefined';

export const isClient = !isServer;

export function isUrl(path: string): boolean {
  const reg =
    /(((^https?:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+(?::\d+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)$/;
  return reg.test(path);
}
const projectName = import.meta.env.VITE_GLOB_APP_TITLE;

export function warn(message: string) {
  console.warn(`[${projectName} warn]:${message}`);
}

export function error(message: string) {
  throw new Error(`[${projectName} error]:${message}`);
}
/*
 * 格式化参数
 */
function formatParams(data = {}) {
  const arr: any[] = [];
  for (const name in data) {
    arr.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
  }
  return arr.join('&');
}

/**
 * 性能监控
 */
class PerformanceMonitor {
  // 任务列表，存放所有任务
  private reqDataList: any[] = [];
  private options = {
    reportUrl: location.href, // 上报地址
    appId: '', // 项目ID
    appName: '', // 项目名称,
    env: 'dev', // 环境：dev、test、uat、pro
    infoType: 'preformance', // 信息类别
    timeSpan: Date.now(), // 发送数据时的时间戳
    userAgent: navigator.userAgent,
    isSendBeacon: false,
  };

  constructor(ops) {
    Object.assign(this.options, ops);

    this.init();
  }

  init() {
    this.listenOnLoad();
  }

  listenOnLoad() {
    window.addEventListener('load', () => {
      setTimeout(() => {
        this.delaySetPerformanceData({
          currenPagetUrl: location.href,
        });
      });
    });
  }

  delaySetPerformanceData(obj) {
    this.savePerformanceData(obj);
  }

  getPerformanceData() {
    const { timing } = window.performance as any;
    const {
      navigationStart = 0, // 准备加载页面的起始时间
      //   unloadEventStart = 0, // 如果前一个文档和当前文档同源,返回前一个文档开始unload的时间
      //   unloadEventEnd = 0, // 如果前一个文档和当前文档同源,返回前一个文档开始unload结束的时间
      //   redirectStart = 0, // 如果有重定向,这里是重定向开始的时间.
      //   redirectEnd = 0, // 如果有重定向,这里是重定向结束的时间.
      fetchStart = 0, // 开始检查缓存或开始获取资源的时间
      domainLookupStart = 0, //  开始进行dns查询的时间
      domainLookupEnd = 0, //  dns查询结束的时间
      connectStart = 0, // 开始建立连接请求资源的时间
      connectEnd = 0, // 建立连接成功的时间.
      //   secureConnectionStart = 0, // 如果是https请求.返回ssl握手的时间
      //   requestStart = 0, // 开始请求文档时间(包括从服务器,本地缓存请求)
      responseStart = 0, // 接收到第一个字节的时间
      responseEnd = 0, // 接收到最后一个字节的时间.
      //   domLoading = 0, // ‘current document readiness’ 设置为 loading的时间 (这个时候还木有开始解析文档)
      domInteractive = 0, // 文档解析结束的时间
      //   domContentLoadedEventStart = 0, // DOMContentLoaded事件开始的时间
      domContentLoadedEventEnd = 0, // DOMContentLoaded事件结束的时间
      domComplete = 0, // current document readiness被设置 complete的时间
      //   loadEventStart = 0, // 触发onload事件的时间
      loadEventEnd = 0, // onload事件结束的时间
    } = timing;

    // const {
    //     usedJSHeapSize = 0, // JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize，否则可能出现内存泄漏
    //         totalJSHeapSize = -1 // 可使用的内存
    // } = memory;

    // 准备新页面时间耗时
    const prepareNewPageTime = fetchStart - navigationStart;
    // DNS查询耗时
    const queryDNSTime = domainLookupEnd - domainLookupStart;
    // TCP链接耗时
    const connectionTCPTime = connectEnd - connectStart;
    // request请求耗时
    const requestTime = responseEnd - responseStart;
    // 解析dom树耗时
    const analysisDOMTime = domComplete - domInteractive;
    // 白屏时间
    const whiteScreenTime = responseStart - navigationStart;
    // domready时间
    const domReadyTime = domContentLoadedEventEnd - navigationStart;
    // onload执行完成时间
    const onloadSuccessTime = loadEventEnd - navigationStart;

    // 内存是否溢出
    // const memoryOverFlow = totalJSHeapSize > usedJSHeapSize ? 0 : 1;

    // 页面的加载方式
    // const pageLoadType = navigation.type;
    // const pageLoadTypeStr = this.pageLoadMethod(navigation.type);

    return {
      prepareNewPageTime,
      queryDNSTime,
      connectionTCPTime,
      requestTime,
      analysisDOMTime,
      whiteScreenTime,
      domReadyTime,
      onloadSuccessTime,
      // memoryOverFlow,
      // pageLoadTypeStr
      // pageLoadType
    };
  }

  async savePerformanceData(obj) {
    const performanceInfo = this.getPerformanceData();
    await Object.assign(performanceInfo, obj, {
      timeSpan: Date.now(),
    });
    this.reqDataList.push(Object.assign({}, this.options, performanceInfo));
    await this.asyncSendReport();
  }

  /**
   * 页面的加载方式
   * @param {*} type  navigation.type
   */
  pageLoadMethod(type) {
    switch (type) {
      case 0:
        return '点击链接、地址栏输入、表单提交、脚本操作等方式加载';
      case 1:
        return '通过“重新加载”按钮或者location.reload()方法加载';
      case 2:
        return '网页通过“前进”或“后退”按钮加载';
      default:
        return '任何其他来源的加载';
    }
  }

  asyncSendReport() {
    const { isSendBeacon = false, reportUrl = '' } = this.options;
    const repDataList = this.reqDataList;

    while (repDataList.length > 0) {
      const reqData = repDataList.shift();
      ((data) => {
        setTimeout(() => {
          this.sendReport(data, reportUrl, isSendBeacon);
        });
      })(reqData);
    }
  }

  /**
   * 高级浏览器还支持 navigator.sendBeacon方法。
   * 这个方法可以用来发送一些小量数据，该方法是异步的，且在浏览器关闭请求也照样能发，特别适合上报统计的场景。
   * 不支持时使用img的方式上报
   */
  sendReport(performance, reportUrl, isSendBeacon = false) {
    if (isSendBeacon && navigator.sendBeacon) {
      this.sendBeacon(performance, reportUrl);
      return;
    }
    this.sendImage(performance, reportUrl);
  }

  sendBeacon(data, reportUrl) {
    navigator.sendBeacon(reportUrl, JSON.stringify(data));
  }

  sendImage(data, reportUrl) {
    const image = new Image();
    image.src = `${reportUrl}?${formatParams(data)}`;
  }
}

export default new PerformanceMonitor({
  reportUrl: 'http://localhost:10300/performanceMonitor', // 性能上报地址
  appId: 'performanceMonitor-1559318109525', // 项目ID
  appName: 'performanceMonitor', // 项目名称
  env: 'dev', // 环境：dev、test、uat、pro
});
// @ts-nocheck
import { App } from 'vue';
import { store } from '@/store';

/**
 * 第二种权限验证形式
 */

/**
 * @description 每一个服务模块的权限的名称做以下约定：
 * 'service.read'
 * 形如 '服务模块名称.权限'
 */

/**
 * 验证路由权限
 * @param route
 * @param accessMap
 */
export const validateAccess = (route, accessMap) => {
  const { meta } = route;
  if (meta && meta.access) {
    return meta.access.every((access) => !!accessMap[access]);
  }

  if (meta && meta.optionalAccess) {
    return meta.optionalAccess.some((access) => !!accessMap[access]);
  }
};

/**
 * @description 按钮（元素）级权限控制，下面未在当前项目中实践，只提供一种做法
 */

/**
 * 是否有某个权限
 * @param access
 * @param accessMap
 */
export const hasAccess = (access, accessMap = store.getters['login/accessMap']) => {
  return !!accessMap[access];
};

/**
 * 是否包含指定的所有权限
 * @param accesses
 * @param accessMap
 */
export const hasEveryAccess = (accesses, accessMap = store.getters['login/accessMap']): boolean => {
  if (Array.isArray(accesses)) {
    return accesses.every((access) => !!accessMap[access]);
  }
  throw new Error(`[hasEveryAccess]: ${accesses} should be a array !`);
};

/**
 * 是否包含其中某个权限
 * @param accesses
 * @param accessMap
 */
export const hasSomeAccess = (accesses, accessMap = store.getters['login/accessMap']): boolean => {
  if (Array.isArray(accesses)) {
    return accesses.some((access) => !!accessMap[access]);
  }
  throw new Error(`[hasSomeAccess]: ${accesses} should be a array !`);
};

export default {
  install(app: App) {
    app.config.globalProperties.$_hasAccess = hasAccess;
    app.config.globalProperties.$_hasEveryAccess = hasEveryAccess;
    app.config.globalProperties.$_hasSomeAccess = hasSomeAccess;

    /**
     * @description Support .some .every directive modifiers
     * @usage
     *    <element v-access="admin.device.read" />
     *    <element v-access.some="['admin.device.read']" />
     *    <element v-access.every="['admin.device.read']" />
     */
    app.directive('access', {
      mounted: function (el: HTMLElement, { value, modifiers }) {
        if (value === undefined) throw new Error('[v-access]: should input an access list.');
        let isVerified = hasAccess(value);

        if (modifiers.some) {
          isVerified = hasSomeAccess(Array.isArray(value) ? value : [value]);
        }

        if (modifiers.every) {
          isVerified = hasEveryAccess(Array.isArray(value) ? value : [value]);
        }

        if (!isVerified) {
          el.parentNode && el.parentNode.removeChild(el);
        }
      },
    });
  },
};
import router from "@/router";
import { App } from "vue";

/**
 * 第一种权限验证形式
 */

/**
 * 判断是否拥有某种权限
 * @param {string} action
 * @param {boolean} include
 */
export const hasPermission = (action: string) => {
  const currentRoute = router.currentRoute.value;

  // 下面只是为了方便演示，不建议这么做
  action =
    currentRoute.path
      .split("/")
      .filter((m) => m.trim() != "")
      .join(".") +
    "." +
    action;
  // console.log(action, currentRoute.meta.permission, '当前路由权限')
  // @ts-ignore
  return currentRoute.meta?.permission?.includes(action);

  // const permissions = currentRoute.meta.permission || []
  // if (include) {
  //     return permissions.some(item => item.action.includes(action))
  // } else {
  //     return permissions.some(item => item.action == action)
  // }
};

// 暴露一个插件 API
const install = (app: App) => {
  // 在 this 上挂载一个贯穿方法，用 provider 也行
  app.config.globalProperties.$hasPermission = hasPermission;
};
export default install;
import { CSSProperties, VNodeChild } from 'vue';
import { createTypes, VueTypeValidableDef, VueTypesInterface } from 'vue-types';

export type VueNode = VNodeChild | JSX.Element;

type PropTypes = VueTypesInterface & {
  readonly style: VueTypeValidableDef<CSSProperties>;
  readonly VNodeChild: VueTypeValidableDef<VueNode>;
  // readonly trueBool: VueTypeValidableDef<boolean>;
};

const propTypes = createTypes({
  func: undefined,
  bool: undefined,
  string: undefined,
  number: undefined,
  object: undefined,
  integer: undefined,
}) as PropTypes;

propTypes.extend([
  {
    name: 'style',
    getter: true,
    type: [String, Object],
    default: undefined,
  },
  {
    name: 'VNodeChild',
    getter: true,
    type: undefined,
  },
]);
export { propTypes };
import axios, { AxiosRequestConfig } from 'axios';
// import { useUserStore } from "@/store/modules/user";
import { message as $message, Modal } from 'ant-design-vue';
import { ACCESS_TOKEN_KEY } from '@/framework/enums/cacheEnum';
import { Storage } from '@/framework/utils/Storage';
import qs from 'qs';

// import {ExclamationCircleOutlined} from '@ant-design/icons'

export interface RequestOptions {
  /** 当前接口权限, 不需要鉴权的接口请忽略， 格式：sys:user:add */
  permCode?: string;
  /** 是否直接获取data，而忽略message等 */
  isGetDataDirectly?: boolean;
  /** 请求成功是提示信息 */
  successMsg?: string;
  /** 请求失败是提示信息 */
  errorMsg?: string;
  /** 是否mock数据请求 */
  isMock?: boolean;
}

const UNKNOWN_ERROR = '未知错误，请重试';

/** 真实请求的路径前缀 */
const baseApiUrl = import.meta.env.VITE_BASE_API;
/** mock请求路径前缀 */
const baseMockUrl = import.meta.env.VITE_MOCK_API;

const service = axios.create({
  baseURL: '',
  timeout: 12000,
});

service.interceptors.request.use(
  (config) => {
    const token = Storage.get(ACCESS_TOKEN_KEY);
    if (token && config.headers) {
      // 请求头token信息，请根据实际情况进行修改
      config.headers['Authorization'] = token;
    }

    // 针对get请求进行qs处理
    if (config.method === 'get' || config.method === 'GET') {
      if (config.params) {
        config.params = qs.stringify(config.params, { arrayFormat: 'indices', allowDots: true });
        config.params = decodeURI(config.params);
        var result = {};
        config.params.split('&').forEach((item) => {
          if (!item) return;
          let s = item.split('=');
          result[s[0]] = s[1].replace(/%2C/g, ',');
        });
        config.params = result;
      }
    }
    return config;
  },
  (error) => {
    Promise.reject(error);
  },
);

service.interceptors.response.use(
  (response) => {
    const res = response.data;

    // if the custom code is not 200, it is judged as an error.
    if (res.code && res.code !== 200) {
      $message.error(res.message || UNKNOWN_ERROR);
      if (res.code === 401) {
        // 401 会话超时清除token
        Storage.clear();
        Storage.removeCookie('token');
        let failData = res.data;
        if (failData) {
        }

        // 重新登录
        Modal.confirm({
          title: '警告',
          content: res.message || '账号异常，您可以取消停留在该页上，或重新登录',
          okText: '重新登录',
          cancelText: '取消',
          onOk: () => {
            Storage.removeCookie('token');
            localStorage.clear();
            window.location.reload();
          },
        });
      }

      // throw other
      const error = new Error(res.message || UNKNOWN_ERROR) as Error & { code: any };
      error.code = res.code;
      return Promise.reject(error);
    }
    // 兼容菌毒种
    else if (res.status && res.status !== 200) {
      $message.error(res.message || UNKNOWN_ERROR);
      if (res.status === 401) {
        // 401 会话超时清除token
        Storage.clear();
        Storage.removeCookie('token');
        let failData = res.data;
        if (failData) {
        }

        // 重新登录
        Modal.confirm({
          title: '警告',
          content: res.message || '账号异常，您可以取消停留在该页上，或重新登录',
          okText: '重新登录',
          cancelText: '取消',
          onOk: () => {
            Storage.removeCookie('token');
            localStorage.clear();
            window.location.reload();
          },
        });
      }

      // throw other
      const error = new Error(res.message || UNKNOWN_ERROR) as Error & { status: any };
      error.status = res.status;
      return Promise.reject(error);
    } else {
      return res;
    }
  },
  (error) => {
    // 处理 422 或者 500 的错误异常提示
    const errMsg = error?.response?.data?.message ?? UNKNOWN_ERROR;
    $message.error(errMsg);
    error.message = errMsg;
    return Promise.reject(error);
  },
);

export type Response<T = any> = {
  code: number;
  message: string;
  data: T;
  success: boolean;
};

export type BaseResponse<T = any> = Promise<Response<T>>;

/**
 *
 * @param method - request methods
 * @param url - request url
 * @param data - request data or params
 */
export const request = async <T = any>(
  config: AxiosRequestConfig,
  options: RequestOptions = {},
): Promise<T> => {
  try {
    const { successMsg, errorMsg, isMock, isGetDataDirectly = true } = options;
    // const fullUrl = `${(isMock ? baseMockUrl : baseApiUrl) + config.url}`;
    config.baseURL ??= isMock ? baseMockUrl : baseApiUrl;
    config.url = config.url;

    const res = await service.request(config);
    successMsg && $message.success(successMsg);
    errorMsg && $message.error(errorMsg);
    return isGetDataDirectly ? res.data : res;
  } catch (error: any) {
    return Promise.reject(error);
  }
};
// 默认缓存期限为7天
const DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7 * 1000;

/**
 * 创建本地缓存对象
 * @param {string=} prefixKey -
 * @param {Object} [storage=localStorage] - sessionStorage | localStorage
 */
export const createStorage = ({ prefixKey = '', storage = localStorage } = {}) => {
  /**
   * 本地缓存类
   * @class Storage
   */
  const Storage = class {
    private storage = storage;
    private prefixKey?: string = prefixKey;

    private getKey(key: string) {
      return `${this.prefixKey}${key}`.toUpperCase();
    }

    /**
     * @description 设置缓存
     * @param {string} key 缓存键
     * @param {*} value 缓存值
     * @param expire
     */
    set(key: string, value: any, expire: number | null = DEFAULT_CACHE_TIME) {
      const stringData = JSON.stringify({
        value,
        expire: expire !== null ? new Date().getTime() + expire : null,
      });
      this.storage.setItem(this.getKey(key), stringData);
    }

    /**
     * 读取缓存
     * @param {string} key 缓存键
     * @param {*=} def 默认值
     */
    get<T = any>(key: string, def: any = null): T {
      const item = this.storage.getItem(this.getKey(key));
      if (item) {
        try {
          const data = JSON.parse(item);
          const { value, expire } = data;
          // 在有效期内直接返回
          if (expire === null || expire >= Date.now()) {
            return value;
          }
          this.remove(this.getKey(key));
        } catch (e) {
          return def;
        }
      }
      return def;
    }

    /**
     * 从缓存删除某项
     * @param {string} key
     */
    remove(key: string) {
      console.log(key, '搜索');
      this.storage.removeItem(this.getKey(key));
    }

    /**
     * 清空所有缓存
     * @memberOf Cache
     */
    clear(): void {
      this.storage.clear();
    }

    /**
     * 设置cookie
     * @param {string} name cookie 名称
     * @param {*} value cookie 值
     * @param {number=} expire 过期时间
     * 如果过期时间为设置，默认关闭浏览器自动删除
     * @example
     */
    setCookie(name: string, value: any, expire: number | null = DEFAULT_CACHE_TIME) {
      document.cookie = `${name}=${value}; Max-Age=${expire}`;
    }

    /**
     * 根据名字获取cookie值
     * @param name
     */
    getCookie(name: string): string {
      const cookieArr = document.cookie.split('; ');
      for (let i = 0, length = cookieArr.length; i < length; i++) {
        const kv = cookieArr[i].split('=');
        // this.getKey(name) 登录后设置的cookie token字段是小写
        if (kv[0] === name) {
          return kv[1];
        }
      }
      return '';
    }

    /**
     * 根据名字删除指定的cookie
     * @param {string} key
     */
    removeCookie(key: string) {
      this.setCookie(key, 1, -1);
    }

    /**
     * 清空cookie，使所有cookie失效
     */
    clearCookie(): void {
      const keys = document.cookie.match(/[^ =;]+(?==)/g);
      const regex = /[`~!@#$%^&*()\+\={}|:\"?><【】\r\n]/
      if (keys) {
        for (let i = keys.length; i--; ) {
          if (!regex.test(keys[i])) {
            document.cookie = keys[i] + '=0;expire=' + new Date(0).toUTCString();
          } else {
            throw new Error('cookie key中包含特殊字符')
          }
        }
      }
    }
  };
  return new Storage();
};

export const Storage = createStorage();

export default Storage;
/**
 * 将对象添加当作参数拼接到URL上面
 * @param baseUrl 需要拼接的url
 * @param obj 参数对象
 * @returns {string} 拼接后的对象
 * 例子:
 *  let obj = {a: '3', b: '4'}
 *  setObjToUrlParams('www.baidu.com', obj)
 *  ==>www.baidu.com?a=3&b=4
 */
export function setObjToUrlParams(baseUrl: string, obj: object): string {
  let parameters = '';
  let url = '';
  for (const key in obj) {
    parameters += key + '=' + encodeURIComponent(obj[key]) + '&';
  }
  parameters = parameters.replace(/&$/, '');
  if (/\?$/.test(baseUrl)) {
    url = baseUrl + parameters;
  } else {
    url = baseUrl.replace(/\/?$/, '?') + parameters;
  }
  return url;
}

/**
 * 将路径中重复的正斜杆替换成单个斜杆隔开的字符串
 * @param path 要处理的路径
 * @returns {string} 将/去重后的结果
 */
export const uniqueSlash = (path: string) => path.replace(/(?<!:)\/{2,}/g, '/');
/**
 * @param {string} path
 * @returns {Boolean}
 */
export function isExternal(path: string) {
  return /^(https?:|mailto:|tel:)/.test(path);
}
<template>
  <Tooltip :title="getTitle" placement="bottom" :mouseEnterDelay="0.5">
    <span @click="toggle">
      <FullscreenOutlined v-if="!isFullscreen" />
      <FullscreenExitOutlined v-else />
    </span>
  </Tooltip>
</template>
<script lang="ts" setup>
  import { computed, unref } from 'vue';
  import { Tooltip } from 'ant-design-vue';
  import { useI18n } from 'vue-i18n';
  import { useFullscreen } from '@vueuse/core';

  import { FullscreenExitOutlined, FullscreenOutlined } from '@ant-design/icons-vue';
  const { t } = useI18n();
  const { toggle, isFullscreen } = useFullscreen();

  const getTitle = computed(() => {
    return unref(isFullscreen)
      ? t('layout.header.tooltipExitFull')
      : t('layout.header.tooltipEntryFull');
  });
</script>
export { default as Search } from './search/index.vue';
export { default as FullScreen } from './fullscreen/index.vue';
<template>
  <div class="flex items-center">
    <span class="mr-14px">
      <EnterOutlined class="icon text-15px p-2px mr-3px" />
      确认
    </span>
    <span class="mr-14px">
      <ArrowUpOutlined class="icon text-15px p-2px mr-5px" />
      <ArrowDownOutlined class="icon text-15px p-2px mr-3px" />
      切换
    </span>
    <span>
      <CloseOutlined class="icon text-15px p-2px mr-3px" />
      关闭
    </span>
  </div>
</template>

<script lang="ts" setup>
  import {
    EnterOutlined,
    ArrowDownOutlined,
    ArrowUpOutlined,
    CloseOutlined,
  } from '@ant-design/icons-vue';
</script>
<style lang="less" scoped>
  .icon {
    box-shadow: inset 0 -2px #cdcde6, inset 0 0 1px 1px #fff, 0 1px 2px 1px #1e235a66;
  }
</style>
<template>
  <div>
    <div class="pb-12px">
      <template v-for="item in options" :key="item.name">
        <div
          class="bg-[#e5e7eb] h-56px mt-8px px-14px rounded-4px flex items-center justify-justify-between"
          style="cursor: pointer"
          :style="{
            background: item.name === active ? '#1890ff' : '',
            color: item.name === active ? '#fff' : '',
          }"
          @click="handleTo"
          @mouseenter="handleMouse(item)"
        >
          <BookOutlined />
          <TitleI18n class="flex-1 ml-5px" :title="item.meta?.title" />
          <EnterOutlined class="icon text-20px p-2px mr-3px" />
        </div>
      </template>
    </div>
  </div>
</template>

<script lang="ts" setup>
  import { computed } from 'vue';
  import type { RouteRecordRaw } from 'vue-router';
  import { EnterOutlined, BookOutlined } from '@ant-design/icons-vue';
  import { TitleI18n } from '@/framework/components/basic/title-i18n';

  interface Props {
    value: string;
    options: RouteRecordRaw[];
  }

  interface Emits {
    (e: 'update:value', val: string): void;
    (e: 'enter'): void;
  }

  const props = withDefaults(defineProps<Props>(), {});
  const emit = defineEmits<Emits>();

  const active = computed({
    get() {
      return props.value;
    },
    set(val: string) {
      emit('update:value', val);
    },
  });
  /** 鼠标移入 */
  async function handleMouse(item: RouteRecordRaw) {
    active.value = item.name as string;
  }

  function handleTo() {
    emit('enter');
  }
</script>
<style lang="less" scoped></style>
<template>
  <Tooltip :title="$t('common.searchText')" placement="bottom" :mouseEnterDelay="0.5">
    <slot><SearchOutlined @click="visible = true" /></slot>
    <DraggableModal
      title="搜索菜单"
      v-model:visible="visible"
      :keyboard="false"
      @cancel="handleClose"
    >
      <a-input
        ref="inputRef"
        v-model:value="keyword"
        clearable
        placeholder="请输入关键词搜索"
        @change="handleSearch"
      >
        <template #prefix>
          <SearchOutlined class="text-15px text-[#c2c2c2]" />
        </template>
      </a-input>
      <div class="mt-20px">
        <Empty v-if="resultOptions.length === 0" description="暂无搜索结果" />
        <search-result
          v-else
          v-model:value="activePath"
          :options="resultOptions"
          @enter="handleEnter"
        />
      </div>
      <template #footer>
        <search-footer />
      </template>
    </DraggableModal>
  </Tooltip>
</template>

<script lang="ts" setup>
  import { ref, shallowRef, computed, watch, nextTick } from 'vue';
  import { useRouter } from 'vue-router';
  import type { RouteRecordRaw } from 'vue-router';
  import { Empty, Tooltip } from 'ant-design-vue';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import { useDebounceFn, onKeyStroke } from '@vueuse/core';
  import { useUserStore } from '@/store/modules/user';
  import { SearchOutlined } from '@ant-design/icons-vue';
  import SearchResult from './components/SearchResult.vue';
  import SearchFooter from './components/SearchFooter.vue';
  import { transformI18n } from '@/framework/hooks/useI18n';

  const userStore = useUserStore();
  const router = useRouter();
  const keyword = ref('');
  const activePath = ref('');
  const menusList = computed(() => transformRouteToList(userStore.menus));
  const resultOptions = shallowRef<RouteRecordRaw[]>([]);
  const inputRef = ref<HTMLInputElement | null>(null);
  const handleSearch = useDebounceFn(search, 300);

  const visible = ref(false);

  watch(visible, async (val) => {
    if (val) {
      /** 自动聚焦 */
      await nextTick();
      inputRef.value?.focus();
    }
  });

  /** 查询 */
  function search() {
    resultOptions.value = menusList.value.filter((menu) => {
      const title = transformI18n(menu.meta?.title);
      return (
        keyword.value &&
        title?.toLocaleLowerCase().includes(keyword.value.toLocaleLowerCase().trim())
      );
    });
    if (resultOptions.value?.length > 0) {
      activePath.value = resultOptions.value[0].name as string;
    } else {
      activePath.value = '';
    }
  }

  /** 将路由转换成菜单列表 */
  function transformRouteToList(routes: RouteRecordRaw[], treeMap: RouteRecordRaw[] = []) {
    if (routes && routes.length === 0) return [];
    return routes.reduce((acc, cur) => {
      /** 允许在菜单内显示并且无子路由 */
      if (!cur.meta?.hideInMenu && !cur.children) {
        acc.push(cur);
      }
      if (cur.children && cur.children.length > 0) {
        transformRouteToList(cur.children, treeMap);
      }
      return acc;
    }, treeMap);
  }

  function handleClose() {
    visible.value = false;
    /** 延时处理防止用户看到某些操作 */
    setTimeout(() => {
      resultOptions.value = [];
      keyword.value = '';
    }, 200);
  }

  /** key up */
  function handleUp() {
    const { length } = resultOptions.value;
    if (length === 0) return;
    const index = resultOptions.value.findIndex((item) => item.name === activePath.value);
    if (index === 0) {
      activePath.value = resultOptions.value[length - 1].name as string;
    } else {
      activePath.value = resultOptions.value[index - 1].name as string;
    }
  }

  /** key down */
  function handleDown() {
    const { length } = resultOptions.value;
    if (length === 0) return;
    const index = resultOptions.value.findIndex((item) => item.name === activePath.value);
    if (index + 1 === length) {
      activePath.value = resultOptions.value[0].name as string;
    } else {
      activePath.value = resultOptions.value[index + 1].name as string;
    }
  }

  /** key enter */
  function handleEnter() {
    const { length } = resultOptions.value;
    if (length === 0 || activePath.value === '') return;
    if (/http(s)?:/.test(activePath.value)) {
      window.open(activePath.value);
    } else {
      router.push({ name: activePath.value });
      handleClose();
    }
  }

  onKeyStroke('Escape', handleClose);
  onKeyStroke('Enter', handleEnter);
  onKeyStroke('ArrowUp', handleUp);
  onKeyStroke('ArrowDown', handleDown);
</script>
<style lang="less" scoped></style>
<template>
  <Layout.Header class="layout-header">
    <Space :size="20">
      <slot/>
      <span class="menu-fold" @click="() => emit('update:collapsed', !collapsed)">
        <component :is="collapsed ? MenuUnfoldOutlined : MenuFoldOutlined"/>
      </span>
      <Breadcrumb>
        <template v-for="(routeItem, rotueIndex) in menus" :key="routeItem.name">
          <Breadcrumb.Item>
            <TitleI18n :title="routeItem?.meta?.title"/>
            <template v-if="routeItem?.children?.length" #overlay>
              <Menu :selectedKeys="[menus[rotueIndex + 1]?.name]">
                <template v-for="childItem in routeItem?.children" :key="childItem.name">
                  <Menu.Item
                      v-if="!childItem.meta?.hideInMenu && !childItem.meta?.hideInBreadcrumb"
                      :key="childItem.name"
                      @click="clickMenuItem(childItem)"
                  >
                    <TitleI18n :title="childItem.meta?.title"/>
                  </Menu.Item>
                </template>
              </Menu>
            </template>
          </Breadcrumb.Item>
        </template>
      </Breadcrumb>
    </Space>
    <Space :size="20">
      <Space :size="20">
        <Search/>
        <Tooltip :title="$t('layout.header.tooltipLock')" placement="bottom">
          <LockOutlined @click="lockscreenStore.setLock(true)"/>
        </Tooltip>
        <FullScreen/>
        <LocalePicker/>
        <Dropdown>
          <Avatar :src="userInfo.headImg" :alt="userInfo.name">{{ userInfo.name }}</Avatar>
          <template #overlay>
            <Menu>
              <Menu.Item>
                <div>个人中心</div>
              </Menu.Item>
              <Menu.Divider/>
              <Menu.Item>
                <div @click.prevent="doLogout">
                  <poweroff-outlined/>
                  {{ $t('layout.header.dropdownItemLoginOut') }}
                </div>
              </Menu.Item>
            </Menu>
          </template>
        </Dropdown>
        <SettingOutlined/>
      </Space>
    </Space>
  </Layout.Header>
</template>

<script lang="tsx" setup>
import {computed} from 'vue';
import {useRouter, useRoute, RouteRecordRaw} from 'vue-router';
import {
  Layout,
  message,
  Modal,
  Dropdown,
  Menu,
  Space,
  Breadcrumb,
  Avatar,
  Tooltip,
} from 'ant-design-vue';
import {
  QuestionCircleOutlined,
  SettingOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  PoweroffOutlined,
  LockOutlined,
} from '@ant-design/icons-vue';
import {Search, FullScreen} from './components';
import {LocalePicker} from '@/framework/components/basic/locale-picker';
import {useUserStore} from '@/store/modules/user';
import {useLockscreenStore} from '@/store/modules/lockscreen';
import {LOGIN_NAME} from '@/router/constant';
import {TitleI18n} from '@/framework/components/basic/title-i18n';

defineProps({
  collapsed: {
    type: Boolean,
  },
});
const emit = defineEmits(['update:collapsed']);
const userStore = useUserStore();
const lockscreenStore = useLockscreenStore();

const router = useRouter();
const route = useRoute();
const userInfo = computed(() => userStore.userInfo);

const menus = computed(() => {
  if (route.meta?.namePath) {
    let children = userStore.menus;
    const paths = route.meta?.namePath?.map((item) => {
      const a = children.find((n) => n.name === item);
      children = a?.children || [];
      return a;
    });
    return [
      {
        name: '__index',
        meta: {
          title: '首页',
        },
        children: userStore.menus,
      },
      ...paths,
    ];
  }
  return route.matched;
});

const findLastChild = (route?: RouteRecordRaw) => {
  if (typeof route?.redirect === 'object') {
    const redirectValues = Object.values(route.redirect);
    if (route?.children?.length) {
      const target = route.children.find((n) =>
          redirectValues.some((m) => [n.name, n.path, n.meta?.fullPath].some((v) => v === m)),
      );
      return findLastChild(target);
    }
    return redirectValues.find((n) => typeof n === 'string');
  } else if (typeof route?.redirect === 'string') {
    if (route?.children?.length) {
      const target = route.children.find((n) =>
          [n.name, n.path, n.meta?.fullPath].some((m) => m === route?.redirect),
      );
      return findLastChild(target);
    }
    return route?.redirect;
  }
  return route;
};

// 点击菜单
const clickMenuItem = (menuItem: RouteRecordRaw) => {
  const lastChild = findLastChild(menuItem);
  console.log('lastChild', menuItem, lastChild);

  if (lastChild?.name === route.name) return;
  if (/http(s)?:/.test(lastChild?.name)) {
    window.open(lastChild?.name);
  } else if (lastChild?.name) {
    router.push({name: lastChild.name});
  }
};

// 退出登录
const doLogout = () => {
  Modal.confirm({
    title: '您确定要退出登录吗？',
    icon: <QuestionCircleOutlined/>,
    centered: true,
    onOk: async () => {
      // 如果不是rootadmin，则退出登录
      if (userStore.userInfo.phone !== '13553550634') {
        // logout({})
        await userStore.logout();
      }
      message.success('成功退出登录');
      // 移除标签页
      // localStorage.clear();
      router.replace({
        name: LOGIN_NAME,
        query: {
          redirect: route.fullPath,
        },
      });
    },
  });
};
</script>

<style lang="less" scoped>
//@import '@/styles/index.less';
.layout-header {
  position: sticky;
  top: 0;
  z-index: 10;
  display: flex;
  height: @header-height;
  padding: 0 20px;
  background-color: @primary-color;
  color: #fff;
  justify-content: space-between;
  align-items: center;

  * {
    cursor: pointer;
  }

  .ant-breadcrumb {
    color: #fff;

    a {
      color: #fff;
    }

    & > span:last-child {
      color: #fff;

      a {
        color: #fff;
      }
    }
  }
}
</style>
export {LayoutDefaut} from './layout-default'
export {LayoutModule} from './layout-module'
<template>
  <a-layout class="layout">
    <a-layout-sider
      v-model:collapsed="collapsed"
      :width="asiderWidth"
      :trigger="null"
      collapsible
      class="layout-sider"
    >
      <!--      网站logo start-->
      <logo :collapsed="collapsed" />
      <!--      网站logo end-->
      <!--      侧边菜单栏start-->
      <aside-menu :collapsed="collapsed" />
      <!--      侧边菜单栏end-->
    </a-layout-sider>
    <a-layout>
      <!--      页头 start-->
      <page-header v-model:collapsed="collapsed" />
      <!--      页头end-->
      <!--      内容区域start-->
      <a-layout-content class="layout-content">
        <tabs-view />
      </a-layout-content>
      <!--      内容区域end-->
      <!--      页脚start-->
      <page-footer />
      <!--      页脚end-->
    </a-layout>
  </a-layout>
</template>

<script lang="ts">
  import { defineComponent, ref, computed } from 'vue';
  import { Layout } from 'ant-design-vue';
  import Logo from './logo/index.vue';
  import { TabsView } from '../tabs';
  import AsideMenu from './menu/menu.vue';
  import PageHeader from './header/index.vue';
  import PageFooter from '../footer';

  export default defineComponent({
    name: 'LayoutComp',
    components: {
      TabsView,
      PageHeader,
      AsideMenu,
      Logo,
      PageFooter,
      [Layout.name]: Layout,
      [Layout.Content.name]: Layout.Content,
      [Layout.Sider.name]: Layout.Sider,
    },
    setup() {
      const collapsed = ref<boolean>(false);
      // 自定义侧边栏菜单收缩和展开时的宽度
      const asiderWidth = computed(() => (collapsed.value ? 80 : 220));

      return {
        collapsed,
        asiderWidth,
      };
    },
  });
</script>

<style lang="less" scoped>
  .layout {
    display: flex;
    height: 100vh;
    overflow: hidden;

    .ant-layout {
      overflow: hidden;
    }

    .layout-content {
      flex: none;
    }
  }
</style>
<template>
  <Layout.Header class="layout-header">
    <Space :size="20">
      <logo :collapsed="collapsed"/>
      <span class="menu-fold" @click="() => emit('update:collapsed', !collapsed)">
        <component :is="collapsed ? MenuUnfoldOutlined : MenuFoldOutlined"/>
      </span>
      <!--      <Breadcrumb>-->
      <!--        <template v-for="(routeItem, rotueIndex) in menus" :key="routeItem.name">-->
      <!--          <Breadcrumb.Item>-->
      <!--            <TitleI18n :title="routeItem?.meta?.title" />-->
      <!--            <template v-if="routeItem?.children?.length" #overlay>-->
      <!--              <Menu :selectedKeys="[menus[rotueIndex + 1]?.name]">-->
      <!--                <template v-for="childItem in routeItem?.children" :key="childItem.name">-->
      <!--                  <Menu.Item-->
      <!--                    v-if="!childItem.meta?.hideInMenu && !childItem.meta?.hideInBreadcrumb"-->
      <!--                    :key="childItem.name"-->
      <!--                    @click="clickMenuItem(childItem)"-->
      <!--                  >-->
      <!--                    <TitleI18n :title="childItem.meta?.title" />-->
      <!--                  </Menu.Item>-->
      <!--                </template>-->
      <!--              </Menu>-->
      <!--            </template>-->
      <!--          </Breadcrumb.Item>-->
      <!--        </template>-->
      <!--      </Breadcrumb>-->
    </Space>
    <Space :size="20">
      <Space :size="20">
        <ModuleItems/>
        <Search/>
        <!-- <Tooltip :title="$t('layout.header.tooltipLock')" placement="bottom">
          <LockOutlined @click="lockscreenStore.setLock(true)" />
        </Tooltip> -->
        <FullScreen/>
        <!-- <LocalePicker /> -->
        <Dropdown>
          <Avatar :src="userInfo.headImg" :alt="userInfo.name">{{ userInfo.name }}</Avatar>
          <template #overlay>
            <Menu>
              <Menu.Item>
                <div>个人中心</div>
              </Menu.Item>
              <Menu.Divider/>
              <Menu.Item>
                <div @click.prevent="doLogout">
                  <poweroff-outlined/>
                  {{ $t('layout.header.dropdownItemLoginOut') }}
                </div>
              </Menu.Item>
            </Menu>
          </template>
        </Dropdown>
        <!--        <SettingOutlined />-->
      </Space>
    </Space>
  </Layout.Header>
</template>

<script lang="tsx" setup>
import {computed} from 'vue';
import {useRouter, useRoute, RouteRecordRaw} from 'vue-router';
import {
  Layout,
  message,
  Modal,
  Dropdown,
  Menu,
  Space,
  Breadcrumb,
  Avatar,
  Tooltip,
} from 'ant-design-vue';
import {
  QuestionCircleOutlined,
  SettingOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  PoweroffOutlined,
  LockOutlined,
} from '@ant-design/icons-vue';
import {Search, FullScreen} from '../header/components';
import {LocalePicker} from '@/framework/components/basic/locale-picker';
import {useUserStore} from '@/store/modules/user';
import {useLockscreenStore} from '@/store/modules/lockscreen';
import {LOGIN_NAME} from '@/router/constant';
import {TitleI18n} from '@/framework/components/basic/title-i18n';
import Logo from '../logo/index.vue';
import ModuleItems from './module-items.vue'

defineProps({
  collapsed: {
    type: Boolean,
  },
});
const emit = defineEmits(['update:collapsed']);
const userStore = useUserStore();
const lockscreenStore = useLockscreenStore();

const router = useRouter();
const route = useRoute();
const userInfo = computed(() => userStore.userInfo);

const menus = computed(() => {
  if (route.meta?.namePath) {
    let children = userStore.menus;
    const paths = route.meta?.namePath?.map((item) => {
      const a = children.find((n) => n.name === item);
      children = a?.children || [];
      return a;
    });
    return [
      {
        name: '__index',
        meta: {
          title: '首页',
        },
        children: userStore.menus,
      },
      ...paths,
    ];
  }
  return route.matched;
});

const findLastChild = (route?: RouteRecordRaw) => {
  if (typeof route?.redirect === 'object') {
    const redirectValues = Object.values(route.redirect);
    if (route?.children?.length) {
      const target = route.children.find((n) =>
          redirectValues.some((m) => [n.name, n.path, n.meta?.fullPath].some((v) => v === m)),
      );
      return findLastChild(target);
    }
    return redirectValues.find((n) => typeof n === 'string');
  } else if (typeof route?.redirect === 'string') {
    if (route?.children?.length) {
      const target = route.children.find((n) =>
          [n.name, n.path, n.meta?.fullPath].some((m) => m === route?.redirect),
      );
      return findLastChild(target);
    }
    return route?.redirect;
  }
  return route;
};

// 点击菜单
const clickMenuItem = (menuItem: RouteRecordRaw) => {
  const lastChild = findLastChild(menuItem);
  console.log('lastChild', menuItem, lastChild);

  if (lastChild?.name === route.name) return;
  if (/http(s)?:/.test(lastChild?.name)) {
    window.open(lastChild?.name);
  } else if (lastChild?.name) {
    router.push({name: lastChild.name});
  }
};

// 退出登录
const doLogout = () => {
  Modal.confirm({
    title: '您确定要退出登录吗？',
    icon: <QuestionCircleOutlined/>,
    centered: true,
    onOk: async () => {
      // 如果不是rootadmin，则退出登录
      if (userStore.userInfo.phone !== '13553550634') {
        // logout({})
        await userStore.logout();
      }
      message.success('成功退出登录');
      // 移除标签页
      // localStorage.clear();
      router.replace({
        name: LOGIN_NAME,
        // query: {
        //   redirect: route.fullPath,
        // },
      });
    },
  });
};
</script>

<style lang="less" scoped>
//@import '@/styles/index.less';
.layout-header {
  position: sticky;
  top: 0;
  z-index: 10;
  display: flex;
  height: @header-height;
  padding: 0 20px;
  background-color: @primary-color;
  color: #fff;
  justify-content: space-between;
  align-items: center;

  * {
    cursor: pointer;
  }

  .ant-breadcrumb {
    color: #fff;

    a {
      color: #fff;
    }

    & > span:last-child {
      color: #fff;

      a {
        color: #fff;
      }
    }
  }
}
</style>
<template>
  <a-layout class="layout">
    <!--      页头 start-->
    <page-header v-model:collapsed="collapsed" v-if="headerShow">

    </page-header>

    <a-layout>
      <a-layout-sider v-model:collapsed="collapsed" :width="asiderWidth" :trigger="null" collapsible
        class="layout-sider" theme="light">
        <!--      侧边菜单栏start-->
        <aside-menu :collapsed="collapsed" />
        <!--      侧边菜单栏end-->
      </a-layout-sider>
      <a-layout>
        <!--      内容区域start-->
        <a-layout-content>
          <tabs-view :showTabs="false" />
        </a-layout-content>
        <!--      内容区域end-->
        <!--      页脚start-->
        <!-- <page-footer /> -->
        <!--      页脚end-->
      </a-layout>
    </a-layout>
  </a-layout>
</template>

<script lang="ts">
import { defineComponent, ref, computed } from 'vue';
import { Layout, SettingDraw } from 'ant-design-vue';
import Logo from '../logo/index.vue';
import { TabsView } from '../tabs';
import AsideMenu from '../menu/menu.vue';
import PageHeader from './header.vue';
import PageFooter from '../footer';



export default defineComponent({
  name: 'LayoutModule',
  components: {
    TabsView,
    PageHeader,
    AsideMenu,
    Logo,
    PageFooter,
    [Layout.name]: Layout,
    [Layout.Content.name]: Layout.Content,
    [Layout.Sider.name]: Layout.Sider,
  },
  setup() {
    const headerShow = !window.__POWERED_BY_WUJIE__
    const collapsed = ref<boolean>(false);
    // 自定义侧边栏菜单收缩和展开时的宽度
    const asiderWidth = computed(() => (collapsed.value ? 80 : 220));

    return {
      collapsed,
      asiderWidth,
      headerShow
    };
  },
});
</script>

<style lang="less" scoped>
.layout {
  display: flex;
  height: 100vh;
  overflow: hidden;

  .ant-layout {
    overflow: hidden;
  }

  .layout-content {
    flex: none;
  }
}
</style>
<template>
  <div>
    <ul class="header-menu">
      <template v-for="(menu,index) in systemList">
        <li class="header-menu-item " :class="[curModuleName==menu.name?'header-menu-item-selected':'']"
            @click="gotoSystem(menu)">
          <!-- <Icon :type="menu.icon" /> -->
          {{ menu.name === "default" ? "所有功能" : menu.name }}
        </li>
      </template>
    </ul>
  </div>

</template>

<script lang="ts">
import { computed, defineComponent, onMounted, ref, watch } from "vue";
import { subSysFromLocal, subSysFromSSO } from "@/modules/layout";
import { useUserStore } from "@/store/modules/user";
import { useModulesViewStore } from "@/store/modules/moduleView";
import { Divider } from "ant-design-vue";
import { generateMenu } from "@/router/generator-router";
import { useRoute } from "vue-router";
import { includes } from "lodash-es";
import Icon from "@ant-design/icons-vue";

type SystemInfo = {
  id: string;
  type: "Local" | "SSO";
  name: string;
  redirect?: string;
  icon?: string;
  modules?: string[];
}
export default defineComponent({
  name: "ModuleItems",
  components: {
    Divider, Icon
  },
  setup(props) {
    const systemList = ref([] as SystemInfo[]);
    const moduleStore = useModulesViewStore();
    const userStore = useUserStore();
    // 当前路由
    const currentRoute = useRoute();

    onMounted(() => {
      let i = 0;
      // 如果只有一个，那个就不显示模块名
      if (subSysFromLocal.length > 1 && subSysFromSSO.length == 0) {
        subSysFromLocal.forEach(system => {
          systemList.value.push({
            id: `Local-${i}`,
            type: "Local",
            name: system.name,
            modules: system.subModules
          });
          i++;
        });
      }

      subSysFromLocal.length == 0 && subSysFromSSO.forEach(system => {
        systemList.value.push({
          id: `SSO-${i}`,
          type: "SSO",
          name: system.systemName,
          redirect: system.systemRedirectUrl
        });
        i++;
      });

      if (subSysFromLocal.length <= 1) return;
      const meta = currentRoute.meta;
      let module = systemList.value.filter(item => includes(item.modules, meta.moduleName));
      moduleStore.setCurModule(module[0]);
    });

    const curModuleName = computed(() => moduleStore.curModuleName);

    watch(
      () => moduleStore.curModuleName,
      (n) => {
        const subSystem = moduleStore.curModule;
        if (subSystem === null) return;
        if (subSystem.type === "Local") {
          userStore.menus = generateMenu(userStore.funcs).menus;
        }
        if (subSystem.redirect) {
          let toUrl = subSystem.redirect || "";
          if (toUrl.indexOf("?") === -1) {
            toUrl += "?";
          }
          toUrl += "&jwt=";
          toUrl += userStore.token;
          window.location.replace(toUrl);
        }
      }
    );

    // const localSys = systemList.value.filter(item=>item.type==='Local');
    // watch(
    //   () => currentRoute.fullPath,
    //   () => {
    //     if (currentRoute.name === LOGIN_NAME ) return;
    //     if (localSys.length<=0) return;
    //     const meta = currentRoute.meta;
    //     if(meta?.moduleName !== curModuleName){
    //       const module = systemList.value.filter(item=>item.name === meta.moduleName);
    //       moduleStore.setCurModule(module[0])
    //     }
    //   },
    //   {
    //     immediate: true,
    //   },
    // );

    const gotoSystem = (menu: SystemInfo) => {
      moduleStore.setCurModule(menu);
    };
    return {
      systemList,
      curModuleName,
      gotoSystem
    };
  }
});
</script>

<style lang="less" scoped>
.header-menu {
  line-height: @header-height;
  font-size: 18px;
  margin-right: 18px;
  margin-bottom: 0px;
  list-style: none;

  &-item {
    display: inline-block;
    color: white !important;
    padding: 0 18px;
    //margin-right: 18px;

    &-selected {
      background-color: #57a4f5;
      line-height: @header-height;
    }

    &:hover {
      background-color: #57a4f5;
      line-height: @header-height;
      cursor: pointer;
    }
  }
}
</style>
<template>
  <div class="logo">
    <img src="@/assets/images/logo-min.png" alt="" title="基于国产操作系统的病原微生物实验室备案系统" />
    <!--    <h2 v-show="!collapsed" class="title">One Piece</h2>-->
    <!-- <span class="logo-text" v-show="!collapsed">病原微生物实验室备案系统</span> -->
    <span :class="{ 'logo-text': true, collapsed: collapsed }">基于国产操作系统的病原微生物实验室备案系统</span>
  </div>
</template>

<script setup>
defineProps({
  collapsed: {
    type: Boolean,
  },
});
</script>

<style lang="less" scoped>
.logo {
  @apply flex overflow-hidden whitespace-nowrap items-center;

  height: @header-height;
  padding-left: 4px;
  line-height: @header-height;

  img {
    height: calc(@header-height - 15px);
    margin-right: 8px;
    // background-color: #fff;
    // border-radius: 50%;
  }

  &-text {
    font-size: 18px;
    display: inline-block;
  }

  .collapsed {
    width: 0;
  }

  .title {
    @apply mb-0 text-white text-xl;
  }
}
</style>
<template>
  <template v-if="!props.menuInfo?.meta?.hideInMenu">
    <!-- 目录 -->
    <Menu.SubMenu
      v-if="props.menuInfo?.children?.length"
      :key="props.menuInfo?.name"
      v-bind="$attrs"
    >
      <template #title>
        <span>
          <icon-font :type="props.menuInfo.meta?.icon" />
          <TitleI18n :title="props.menuInfo?.meta?.title" />
        </span>
      </template>
      <template v-for="item in props.menuInfo?.children" :key="item.name">
        <!-- 递归生成菜单 -->
        <MyMenuItem :menuInfo="item" />
      </template>
    </Menu.SubMenu>
    <!-- 菜单 -->
    <template v-else>
      <Menu.Item :key="props.menuInfo?.name">
        <icon-font :type="props.menuInfo?.meta?.icon" />
        <TitleI18n :title="props.menuInfo?.meta?.title" />
      </Menu.Item>
    </template>
  </template>
</template>

<script lang="ts">
  export default {
    name: 'MyMenuItem',
  };
</script>

<script setup lang="ts">
  import { PropType } from 'vue';
  import { Menu } from 'ant-design-vue';
  import type { RouteRecordRaw } from 'vue-router';
  import { IconFont } from '@/framework/components/basic/iconfont';
  import { TitleI18n } from '@/framework/components/basic/title-i18n';

  const props = defineProps({
    menuInfo: {
      type: Object as PropType<RouteRecordRaw>,
    },
  });
</script>

<style scoped></style>
<template>
  <div class="menu-container">
    <Menu
      v-model:open-keys="state.openKeys"
      v-model:selected-keys="state.selectedKeys"
      mode="inline"
      theme="light"
      :collapsed="props.collapsed"
      collapsible
      @click="clickMenuItem"
    >
      <template v-for="item in menus" :key="item.name">
        <MenuItem :menu-info="item" />
      </template>
    </Menu>
  </div>
</template>

<script setup lang="ts">
  import { reactive, computed, watch, ref } from "vue";
  import { Menu } from 'ant-design-vue';
  import MenuItem from './menu-item.vue';
  import { useUserStore } from '@/store/modules/user';
  import { RouteRecordRaw, useRoute, useRouter } from "vue-router";
  import { LOGIN_NAME } from '@/router/constant';

  const props = defineProps({
    collapsed: {
      // 侧边栏菜单是否收起
      type: Boolean,
    },
  });
  const userStore = useUserStore();
  // 当前路由
  const currentRoute = useRoute();
  const router = useRouter();

  // 根据activeMenu获取指定的menu
  const getTargetMenuByActiveMenuName = (activeMenu: string) => {
    return router.getRoutes().find((n) => [n.name, n.path].includes(activeMenu));
  };

  // 获取当前打开的子菜单
  const getOpenKeys = () => {
    const meta = currentRoute.meta;
    if (meta?.activeMenu) {
      const targetMenu = getTargetMenuByActiveMenuName(meta.activeMenu);
      return targetMenu?.meta?.namePath ?? [meta?.activeMenu];
    }
    return currentRoute.meta?.namePath ?? currentRoute.matched.slice(1).map((n) => n.name);
  };

  const state = reactive({
    openKeys: getOpenKeys(),
    selectedKeys: [currentRoute.name],
  });

  const menus = ref<RouteRecordRaw[]>(userStore.menus);
  watch(
    ()=>userStore.menus,
    (n)=>{
      menus.value = n
    }
  )

  // 监听菜单收缩状态
  watch(
    () => props.collapsed,
    (newVal) => {
      state.openKeys = newVal ? [] : getOpenKeys();
      state.selectedKeys = [currentRoute.name];
    },
  );

  // 跟随页面路由变化，切换菜单选中状态
  watch(
    () => currentRoute.fullPath,
    () => {
      if (currentRoute.name === LOGIN_NAME || props.collapsed) return;
      state.openKeys = getOpenKeys();
      const meta = currentRoute.meta;
      if (meta?.activeMenu) {
        const targetMenu = getTargetMenuByActiveMenuName(meta.activeMenu);
        state.selectedKeys = [targetMenu?.name ?? meta?.activeMenu];
      } else {
        state.selectedKeys = [currentRoute.meta?.activeMenu ?? currentRoute.name];
      }
    },
    {
      immediate: true,
    },
  );

  // 点击菜单
  const clickMenuItem = ({ key }) => {
    if (key === currentRoute.name) return;
    if (/http(s)?:/.test(key)) {
      window.open(key);
    } else {
      router.push({ name: key });
    }
  };
</script>

<style lang="less" scoped>
  .menu-container {
    height: calc(100vh - 64px);
    overflow: auto;

    &::-webkit-scrollbar {
      width: 0;
      height: 0;
    }
  }
</style>
<template>
  <div>
    <router-view v-slot="{ Component }">
      <template v-if="Component">
        <transition mode="out-in">
          <suspense>
            <component :is="Component" />
            <template #fallback>
              <div> Loading... </div>
            </template>
          </suspense>
        </transition>
      </template>
    </router-view>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'LayoutParentView',
  };
</script>
import TabsView from './tabs-view.vue';

export { TabsView };
<template>
  <div class="tabs-view">
    <Tabs :active-key="activeKey" hide-add type="editable-card" class="tabs" @change="changePage" @edit="editTabItem"
      v-if="showTabs">
      <Tabs.TabPane v-for="pageItem in tabsList" :key="pageItem.fullPath">
        <template #tab>
          <Dropdown :trigger="['contextmenu']">
            <div style="display: inline-block">
              <TitleI18n :title="pageItem.meta?.title" />
            </div>
            <template #overlay>
              <Menu style="user-select: none">
                <Menu.Item key="1" :disabled="activeKey !== pageItem.fullPath" @click="reloadPage">
                  <reload-outlined />
                  {{ $t('layout.multipleTab.reload') }}
                </Menu.Item>
                <Menu.Item key="2" @click="removeTab(pageItem)">
                  <close-outlined />
                  {{ $t('layout.multipleTab.close') }}
                </Menu.Item>
                <Menu.Divider />
                <Menu.Item key="3" @click="closeLeft(pageItem)">
                  <vertical-right-outlined />
                  {{ $t('layout.multipleTab.closeLeft') }}
                </Menu.Item>
                <Menu.Item key="4" @click="closeRight(pageItem)">
                  <vertical-left-outlined />
                  {{ $t('layout.multipleTab.closeRight') }}
                </Menu.Item>
                <Menu.Divider />
                <Menu.Item key="5" @click="closeOther(pageItem)">
                  <column-width-outlined />
                  {{ $t('layout.multipleTab.closeOther') }}
                </Menu.Item>
                <Menu.Item key="6" @click="closeAll">
                  <minus-outlined />
                  {{ $t('layout.multipleTab.closeAll') }}
                </Menu.Item>
              </Menu>
            </template>
          </Dropdown>
        </template>
      </Tabs.TabPane>

      <template #rightExtra>
        <Dropdown :trigger="['click']">
          <a class="ant-dropdown-link" @click.prevent>
            <down-outlined :style="{ fontSize: '20px' }" />
          </a>
          <template #overlay>
            <Menu style="user-select: none">
              <Menu.Item key="1" :disabled="activeKey !== route.fullPath" @click="reloadPage">
                <reload-outlined />
                {{ $t('layout.multipleTab.reload') }}
              </Menu.Item>
              <Menu.Item key="2" @click="removeTab(route)">
                <close-outlined />
                {{ $t('layout.multipleTab.close') }}
              </Menu.Item>
              <Menu.Divider />
              <Menu.Item key="5" @click="closeOther(route)">
                <column-width-outlined />
                {{ $t('layout.multipleTab.closeOther') }}
              </Menu.Item>
              <Menu.Item key="6" @click="closeAll">
                <minus-outlined />
                {{ $t('layout.multipleTab.closeAll') }}
              </Menu.Item>
            </Menu>
          </template>
        </Dropdown>
      </template>
    </Tabs>
    <div class="tabs-view-content">
      <router-view v-slot="{ Component }">
        <template v-if="Component">
          <!-- <transition name="fade" mode="out-in" appear> -->
          <keep-alive :include="keepAliveComponents">
            <component :is="Component" :key="route.fullPath" />
          </keep-alive>
          <!-- </transition> -->
        </template>
      </router-view>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, unref, watch, defineProps } from 'vue';
import { useRoute, useRouter, RouteLocation } from 'vue-router';
import { Storage } from '@/framework/utils/Storage';
import { TABS_ROUTES } from '@/framework/enums//cacheEnum';
import { useTabsViewStore, blackList } from '@/store/modules/tabsView';
import { useKeepAliveStore } from '@/store/modules/keepAlive';
import {
  DownOutlined,
  ReloadOutlined,
  CloseOutlined,
  VerticalRightOutlined,
  VerticalLeftOutlined,
  ColumnWidthOutlined,
  MinusOutlined,
} from '@ant-design/icons-vue';
import { Dropdown, Tabs, message, Menu } from 'ant-design-vue';
import { REDIRECT_NAME } from '@/router/constant';
import { TitleI18n } from '@/framework/components/basic/title-i18n';
defineProps({
  showTabs: {
    type: Boolean,
    default: true
  }
})
type RouteItem = Omit<RouteLocation, 'matched' | 'redirectedFrom'>;

const route = useRoute();
const router = useRouter();
const tabsViewStore = useTabsViewStore();
const keepAliveStore = useKeepAliveStore();

const activeKey = computed(() => route.fullPath);

// 标签页列表
const tabsList = computed(() => tabsViewStore.getTabsList);

// 缓存的路由组件列表
const keepAliveComponents = computed(() => keepAliveStore.list);

// 获取简易的路由对象
const getSimpleRoute = (route): RouteItem => {
  const { fullPath, hash, meta, name, params, path, query } = route;
  return { fullPath, hash, meta, name, params, path, query };
};

let routes: RouteItem[] = [];

try {
  const routesStr = Storage.get(TABS_ROUTES) as string | null | undefined;
  routes = routesStr ? JSON.parse(routesStr) : [getSimpleRoute(route)];
} catch (e) {
  routes = [getSimpleRoute(route)];
}

// 初始化标签页
tabsViewStore.initTabs(routes);

// tabsViewMutations.initTabs(routes)

// 将当前组件从keep-alive缓存中移除
const delCurrCompFromKeepAlive = () => {
  if (route.meta.keepAlive) {
    const name = router.currentRoute.value.matched.find((item) => item.name == route.name)
      ?.components?.default.name;
    if (name) {
      keepAliveStore.remove(name);
    }
  }
};

watch(
  () => route.fullPath,
  () => {
    if (blackList.some((n) => n === route.name)) return;
    // tabsViewMutations.addTabs(getSimpleRoute(route))
    tabsViewStore.addTabs(getSimpleRoute(route));
  },
  { immediate: true },
);

// 在页面关闭或刷新之前，保存数据
window.addEventListener('beforeunload', () => {
  Storage.set(TABS_ROUTES, JSON.stringify(tabsList.value));
});

// 目标路由是否等于当前路由
const isCurrentRoute = (route) => {
  return router.currentRoute.value.matched.some((item) => item.name === route.name);
};

// 关闭当前页面
const removeTab = (route) => {
  if (tabsList.value.length === 1) {
    return message.warning('这已经是最后一页，不能再关闭了！');
  }
  delCurrCompFromKeepAlive();
  // tabsViewMutations.closeCurrentTabs(route)
  tabsViewStore.closeCurrentTab(route);
  // 如果关闭的是当前页
  if (activeKey.value === route.fullPath) {
    const currentRoute = tabsList.value[Math.max(0, tabsList.value.length - 1)];
    router.push(currentRoute);
  }
};
// tabs 编辑（remove || add）
const editTabItem = (targetKey, action: string) => {
  if (action == 'remove') {
    removeTab(tabsList.value.find((item) => item.fullPath == targetKey));
  }
};
// 切换页面
const changePage = (key) => {
  router.push(key);
};

// 刷新页面
const reloadPage = () => {
  delCurrCompFromKeepAlive();
  router.replace({
    name: REDIRECT_NAME,
    params: {
      path: unref(route).fullPath,
    },
  });
};

// 关闭左侧
const closeLeft = (route) => {
  // tabsViewMutations.closeLeftTabs(route)
  tabsViewStore.closeLeftTabs(route);
  !isCurrentRoute(route) && router.replace(route.fullPath);
};

// 关闭右侧
const closeRight = (route) => {
  // tabsViewMutations.closeRightTabs(route)
  tabsViewStore.closeRightTabs(route);
  !isCurrentRoute(route) && router.replace(route.fullPath);
};

// 关闭其他
const closeOther = (route) => {
  // tabsViewMutations.closeOtherTabs(route)
  tabsViewStore.closeOtherTabs(route);
  !isCurrentRoute(route) && router.replace(route.fullPath);
};

// 关闭全部
const closeAll = () => {
  localStorage.removeItem('routes');
  // tabsViewMutations.closeAllTabs()
  tabsViewStore.closeAllTabs();
  router.replace('/');
};
</script>

<style lang="less" scoped>
.tabs-view {
  border-top: 1px solid #eee;

  :deep(.tabs) {
    .ant-tabs-nav {
      padding: 4px 20px 0 10px;
      margin: 0;
      background-color: white;
      user-select: none;
    }

    .ant-tabs-tabpane {
      display: none;
    }

    .ant-tabs-tab-remove {
      display: flex;
      padding: 0;
      margin: 0;

      .anticon-close {
        padding-left: 6px;
      }
    }

    .ant-tabs-tab:not(.ant-tabs-tab-active) {
      .ant-tabs-tab-remove {
        width: 0;
      }

      .anticon-close {
        width: 0;
        visibility: hidden;
        transition: width 0.3s;
      }

      &:hover {
        .anticon-close {
          width: 16px;
          visibility: visible;
          padding-left: 6px;
        }

        .ant-tabs-tab-remove {
          width: unset;
        }
      }
    }
  }

  .tabs-view-content {
    /* height: calc(100vh - #{$header-height}); */
    height: calc(100vh - 106px);
    // padding: 20px 14px 0;
    margin: 20px 14px;
    overflow: auto;
  }
}
</style>
export type LocaleType = keyof typeof localeMap;

export const localeMap = {
  zh_CN: 'zh_CN',
  en_US: 'en_US',
} as const;

export const localeList = [
  {
    lang: localeMap.en_US,
    label: 'English',
    icon: '🇺🇸',
    title: 'Language',
  },
  {
    lang: localeMap.zh_CN,
    label: '简体中文',
    icon: '🇨🇳',
    title: '语言',
  },
] as const;
import type { LocaleType } from './config';

import { merge } from 'lodash-es';

export const loadLocalePool: LocaleType[] = [];

export function setHtmlPageLang(locale: LocaleType) {
  document.querySelector('html')?.setAttribute('lang', locale);
}

export function setLoadLocalePool(cb: (loadLocalePool: LocaleType[]) => void) {
  cb(loadLocalePool);
}

export function genMessage(langs: Record<string, Record<string, any>>, prefix = 'lang') {
  const obj: Recordable = {};

  Object.keys(langs).forEach((key) => {
    const langFileModule = langs[key].default;
    let fileName
    if(key.startsWith('/')){
      let langIndex = key.indexOf("lang");
      if(langIndex!=-1){
        fileName = key.substring(langIndex+6+prefix.length)
        console.log(fileName)
      }
    }else if(key.startsWith('./')){
      fileName = key.replace(`./${prefix}/`, '').replace(/^\.\//, '');
      // console.log(fileName)
    }
    const lastIndex = fileName.lastIndexOf('.');
    fileName = fileName.substring(0, lastIndex);
    const keyList = fileName.split('/');
    const moduleName = keyList.shift();
    const objKey = keyList.join('.');

    if (moduleName) {
      let newObj: Recordable = {}
      if (objKey) {
        newObj[moduleName] = {}
        newObj[moduleName][objKey] = langFileModule || {}
        merge(obj, newObj)
      } else {
        newObj[moduleName] = langFileModule || {}
        merge(obj, newObj)
      }
    }
  });
  console.log('t',obj)
  return obj;
}
import type { App } from 'vue';
import { localeMap } from './config';
import { createI18n } from 'vue-i18n';
import type { I18n } from 'vue-i18n';
import { setHtmlPageLang, setLoadLocalePool } from './helper';
import { useLocaleStoreWithOut } from '@/store/modules/locale';

export let i18n: ReturnType<typeof createI18n>;

async function createI18nOptions() {
  const localeStore = useLocaleStoreWithOut();
  const locale = localeStore.getLocale;
  const defaultLocal = await import(`./lang/${locale}.ts`);
  // TODO 考虑来自服务端或外部的翻译文件,可以覆盖当前预研
  const message = defaultLocal.default?.message ?? {};

  setHtmlPageLang(locale);
  setLoadLocalePool((loadLocalePool) => {
    loadLocalePool.push(locale);
  });

  return {
    legacy: false,
    locale,
    // legacy: false,
    fallbackLocale: localeMap.zh_CN, // set fallback locale
    messages: {
      [locale]: message as { [key: string]: string },
    },
    globalInjection: true,
    silentTranslationWarn: true, // true - warning off
    missingWarn: false,
    silentFallbackWarn: true,
  };
}

// setup i18n instance with global
export async function setupI18n(app: App) {
  const options = await createI18nOptions();
  i18n = createI18n(options) as I18n;
  app.use(i18n);
}
export default {
  login: 'Login',
  errorLogList: 'Error Log',
};
export default {
  dashboard: 'Dashboard',
  about: 'About',
  workbench: 'Workbench',
  analysis: 'Analysis',
};
export default {
  home: 'Home'
}import { genMessage } from '../helper';
import antdLocale from 'ant-design-vue/es/locale/en_US';
import vxeTableLocale from 'vxe-table/lib/locale/lang/en-US';
import { merge } from 'lodash-es';


const modulesFiles = import.meta.globEager("./en-US/**/*.ts");
const everyModulesFiles = import.meta.globEager("/src/modules/**/en-US/**/*.ts");
const frameworkFiles = import.meta.globEager("/src/framework/lang/en-US/**/*.ts");

const message = genMessage(modulesFiles, "en-US");
const moduleMessage = genMessage(everyModulesFiles, "en-US");
const frameworkMessage = genMessage(frameworkFiles, "en-US");
merge(message, moduleMessage, frameworkMessage);
export default {
  message: {
    ...message,
    ...vxeTableLocale,
    antdLocale,
  },
  dateLocale: null,
  dateLocaleName: 'en-US',
};
export default {
  login: '登录',
  errorLogList: '错误日志列表',
};
export default {
  dashboard: '仪表盘',
  about: '关于',
  workbench: '工作台',
  analysis: '分析页',
};
export default {
  home: '首页'
}
import { genMessage } from "../helper";
import antdLocale from "ant-design-vue/es/locale/zh_CN";
import vxeTableLocale from "vxe-table/lib/locale/lang/zh-CN";
import { merge } from "lodash-es";

const modulesFiles = import.meta.globEager("./zh-CN/**/*.ts");
const everyModulesFiles = import.meta.globEager("/src/modules/**/zh-CN/**/*.ts");
const frameworkFiles = import.meta.globEager("/src/framework/lang/zh-CN/**/*.ts");

const message = genMessage(modulesFiles, "zh-CN");
const moduleMessage = genMessage(everyModulesFiles, "zh-CN");
const frameworkMessage = genMessage(frameworkFiles, "zh-CN");
merge(message, moduleMessage, frameworkMessage);

export default {
  message: {
    ...message,
    ...vxeTableLocale,
    antdLocale,
  },
};
/**
 * Multi-language related operations
 */
import type { LocaleType } from './config';
import type { Locale } from 'ant-design-vue/es/locale-provider';

import { i18n } from './';
import { useLocaleStoreWithOut } from '@/store/modules/locale';
import { unref, computed } from 'vue';
import { loadLocalePool, setHtmlPageLang } from './helper';

interface LangModule {
  message: Recordable;
  dateLocale: Recordable;
  dateLocaleName: string;
}

function setI18nLanguage(locale: LocaleType) {
  const localeStore = useLocaleStoreWithOut();

  if (i18n.mode === 'legacy') {
    i18n.global.locale = locale;
  } else {
    (i18n.global.locale as any).value = locale;
  }
  localeStore.setLocale(locale);
  setHtmlPageLang(locale);
}

export function useLocale() {
  const localeStore = useLocaleStoreWithOut();
  const getLocale = computed(() => localeStore.getLocale);

  const getAntdLocale = computed<Locale>((): any => {
    return i18n.global.getLocaleMessage<{ antdLocale: Locale }>(unref(getLocale)).antdLocale;
  });

  // Switching the language will change the locale of useI18n
  // And submit to configuration modification
  async function changeLocale(locale: LocaleType) {
    const globalI18n = i18n.global;
    const currentLocale = unref(globalI18n.locale);
    if (currentLocale === locale) {
      return locale;
    }

    if (loadLocalePool.includes(locale)) {
      setI18nLanguage(locale);
      return locale;
    }
    const langModule = ((await import(`./lang/${locale}.ts`)) as any).default as LangModule;
    if (!langModule) return;

    const { message } = langModule;

    globalI18n.setLocaleMessage(locale, message);
    loadLocalePool.push(locale);

    setI18nLanguage(locale);
    return locale;
  }

  return {
    getLocale,
    changeLocale,
    getAntdLocale,
  };
}
// import './publicPath'
import '@/framework/plugins/sso/sso'; // SSO自动跳转
import { createApp } from 'vue';
import App from './App.vue';
import { setupRouter } from './router';
import { setupStore } from '@/store';
import { setupI18n } from '@/locales';
import {
  setupAntd,
  setupAssets,
  setupDirectives,
  setupGlobalMethods,
  setupCustomComponents,
  setupVxeTable,
  setupCKEditor,
} from '@/plugins';

const app = createApp(App);

function setupPlugins() {
  // 注册全局常用的ant-design-vue组件
  setupAntd(app);
  // 注册全局常用的vxe-table组件
  setupVxeTable(app);
  // 引入静态资源
  setupAssets();
  // 注册全局自定义组件,如：<svg-icon />
  setupCustomComponents(app);
  // 注册全局自定义指令，如：v-permission权限指令
  setupDirectives(app);
  // 注册全局方法，如：app.config.globalProperties.$message = message
  setupGlobalMethods(app);
  // 注册CKEditor
  setupCKEditor(app);
}

async function setupApp() {
  // 挂载vuex状态管理
  setupStore(app);
  // Multilingual configuration
  // Asynchronous case: language files may be obtained from the server side
  await setupI18n(app);
  // 挂载路由
  await setupRouter(app);

  app.mount('#app');
}

setupPlugins();

setupApp();
import { request } from '@/framework/utils/request';

export const getAlarmTempData = (params) => {
  return request<API.TempColumnsItem[]>({
    url: '/warnLogEnv/page',
    method: 'get',
    params,
  });
};
import { request } from '@/framework/utils/request';

// 分页查询
export const getLabActivityPage = (params: API.PageParams) => {
  return request({
    url: '/activity/page',
    method: 'get',
    params,
  })
}

export const getLabActivityById = (id: string) => {
  return request({
    url: '/activity/' + id,
    method: 'get',
  })
}declare namespace API {
  type TempColumnsItem = {
    city: string,
    county: string,
    companyName: string,
    labName: string,
    id: string,

    alarmTime: string,
    pointName: string,
    roomName: string,
    warnRule: string,
    warnValue: string,
    warnType: string,
    warnTime: string,
    handleStatus: number,
  };
  type CompanyStatisticsListItem = {
    id: string,
    name: string,
    createTime: string,
    nature: string,
    representative: string,
    contacts: string,
    phone: string | number,
    state: string | number,
  };
  type LabStatisticsListItem = {
    id: string,
    name: string,
    createTime: string,
    nature: string | number,
    contacts: string,
    phone: string | number,
    state: string | number,
  };
  type PersonStatisticsListItem = {
    id: string,
    name: string,
    sex: string | number,
    birthday: string,
    workDate: string,
    title: string,
    education: string | number,
    major: string | number,
    job: string | number,
    bioSafeNo: string | number,
    idCardNo: string | number,
  };
  type DeviceStatisticsListItem = {
    id: string,
    type: string | number,
    name: string,
    manufactor: string,
    model: string | number,
    purchaseDate: string,
    testDay: string,
    justPurchaseDate: string,
    code: string | number,
    state: string | number,
  };
  type CityUserManagementListItem = {
    id: string,
    name: string,
    username: string,
    createTime: string,
    phone: string,
    roles: string,
    status: number
    divideId: string,
    divideNames?: string,
    parentId?: string,
  }
}import { request } from '@/framework/utils/request';

// 分页查询
export const getLabStatisticPage = (params: API.PageParams<API.LabStatisticsListItem>) => {
  return request({
    url: '/labInfo/page',
    method: 'get',
    params,
  })
}

export const getCompanyStatisticPage = (params: API.PageParams<API.CompanyStatisticsListItem>) => {
  return request({
    url: '/companyInfo/page',
    method: 'get',
    params,
  })
}

export const getDeviceStatisticPage = (params: API.PageParams<API.DeviceStatisticsListItem>) => {
  return request({
    url: '/labEquipment/page',
    method: 'get',
    params,
  })
}

export const getPersonStatisticPage = (params: API.PageParams<API.PersonStatisticsListItem>) => {
  return request({
    url: '/labPerson/page',
    method: 'get',
    params,
  })
}


// 获取实验室统计数量
export const getLabStatistic = () => {
  return request({
    url: '/labInfo/infoStat',
    method: 'get',
  })
}


// 获取单位统计数量
export const getCompanyStatistic = () => {
  return request({
    url: '/companyInfo/infoStat',
    method: 'get',
  })
}

// 获取设备统计数量
export const getDeviceStatistic = () => {
  return request({
    url: '/labEquipment/numberStatByType',
    method: 'get',
  })
}

// 获取人员统计数量
export const getPersonStatistic = () => {
  return request({
    url: '/labPerson/numberStatByType',
    method: 'get',
  })
}import { request } from '@/framework/utils/request';

export const createUser = (data) => {
  return request({
    url: '/user/create',
    method: 'post',
    data,
  }, {
    isGetDataDirectly: false
  })
}

/**
 * @description 查询待当前用户审批的用户
 */
export const getWaitAudit = (params: API.PageParams) => {
  return request({
    url: '/user/waitAudit',
    method: 'get',
    params,
  })
}

export enum ApproveState {
  NEEDLESS = -2, // 无需操作
  REFUSE = -1, // 拒绝
  WAITING = 0, // 等待审批
  APPROVE = 1, // 批准
}
export type ApproveStateType = 'APPROVE' | 'WAITING' | 'REFUSE' | 'NEEDLESS'
export type AuditUserType = {
  userIds: Array<string>,
  approveState: ApproveStateType
}
/**
 * @description 审批
 */
export const auditUser = (data: AuditUserType) => {
  return request({
    url: '/user/audit',
    method: 'post',
    data,
  }, {
    isGetDataDirectly: false
  })
}

export const editUser = (data) => {
  return request({
    url: '/user/edit',
    method: 'patch',
    data,
  }, {
    isGetDataDirectly: false
  })
}

export type DivideUserParams = {
  parentId?: string,
  dividePath?: string,
  roleIds: string, // "'1','2'"
}
export const getDivideUserPage = (params: API.PageParams<DivideUserParams>) => {
  return request({
    url: '/user/pageQuery',
    method: 'get',
    params,
  })
}import { DictConfig } from "@/framework/core/dict/types";
import { DictNameType } from '@/api/dict/types'
const dict: Partial<Record<DictNameType, DictConfig>> = {
  UserStatus: {
    data: [
      {
        name: '启用',
        value: 1
      },
      {
        name: '停用',
        value: 0
      },
      // {
      //   name: '冻结',
      //   value: -1
      // },
    ],
    props: {
      name: 'label',
      value: 'value'
    }
  }
}

export default dict
<template>
  <div class="ant-card-body ">
    <div class="title-box">区域内单位信息统计</div>
    <!-- 小卡片 -->
    <div class="card-box">
      <StatisticsCard v-for="item in cardStatList" :card-info="item" />
    </div>

    <!-- 表格 -->
    <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager align="center" border
      :mode="1" :export-config="{}" :toolbar="{}" searchBtnType="white-blue" :height="tableHeightComputed">
      <template #action>
        <a-button type="white-blue" style="margin-right: -8px;" @click="changeExport">
          <template #icon>
            <BtnSvgIcon name="daochu"></BtnSvgIcon>
          </template>
          导出
        </a-button>
      </template>
    </SuperTable>
  </div>
</template>
<script setup lang="ts">
import { reactive, ref, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import StatisticsCard from '@/components/card/statistics-card/index.vue';
import { baseColumns, TableColumnItem } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getCompanyStatistic, getCompanyStatisticPage } from '../../api/statistic'
import { getCompanyProperty } from '@/modules/provinceOrg/api/companyProperty';
import dayjs from 'dayjs'
const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 220
})
const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    auditStatus: 2,
  };
  const res = await getCompanyStatistic()
  for (let [key, num] of Object.entries<number>(res)) {
    cardStatList.value.forEach(cardItem => {
      if (cardItem.key === key) {
        cardItem.num = num
      }
    })
  }
  return await getCompanyStatisticPage(params)
};
const companyNatureOptions = ref<{label: string,value: string}[]>([])
const getCompanyNatureOptions = async () => {
  const res = await getCompanyProperty({status: true})
  console.log(res, 'getCompanyNatureOptions')
  companyNatureOptions.value = res.map(item => {
    return {
      label: item.natureName,
      value: item.id
    }
  })
  return companyNatureOptions.value
}
getCompanyNatureOptions()
const columns: TableColumnItem[] = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '单位名称',
    field: 'companyName',
  },
  {
    title: '注册时间',
    field: 'createTime',
    hideInSearch: true,
    formatter: ({ row }) => row.createTime ? dayjs(row.createTime).format('YYYY-MM-DD HH:mm:ss') : ''
  },
  {
    title: '单位性质',
    field: 'companyNature',
    // hideInSearch: true,
    formatter: ({ cellValue }) => {
      return companyNatureOptions.value.find(item => item.value === cellValue)?.label || ''
    },
    formItemProps: {
      component: 'Select',
      componentProps: {
        request: getCompanyNatureOptions,
      }
    }
  },
  ...baseColumns,
  // {
  //   title: '操作',
  //   field: '$action',
  //   hideInSearch: true,
  //   align: 'center',
  //   fixed: 'right',
  //   width: 200,
  //   actions: ({ row }) => [
  //   ],
  // },
];

const cardStatList = ref([
  {
    key: '单位',
    text: '单位共计',
    num: 0,
    unit: '家',
    color: '#FD9A08'
  },
  {
    key: '医共体',
    text: '医共体共计',
    num: 0,
    unit: '个',
    color: '#03BA94'
  },
  {
    key: '医共体主体',
    text: '医共体主体共计',
    num: 0,
    unit: '个',
    color: '#FB083F'
  },
  {
    key: '医共体从体',
    text: '医共体从体共计',
    num: 0,
    unit: '个',
    color: '#0052D9'
  },
  {
    key: '附属医院体',
    text: '附属医院共计',
    num: 0,
    unit: '个',
    color: '#02D7FF'
  },
  {
    key: '委直属单位',
    text: '委直属单位共计',
    num: 0,
    unit: '个',
    color: '#03BA94'
  },
])

/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value?.openExport()
}
// getStatCount()

const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}

</script>
<style lang="less" scoped>
.ant-card-body {
  border-radius: 8px;
  background-color: #fff;

  .title-box {
    font-size: 14px;
    font-weight: 600;
  }
}

.card-box {
  display: flex;
  margin: 20px 0;
  padding-bottom: 20px;
  border-bottom: solid 1px #DCE0E7;
  justify-content: space-between;
}
</style>
import type { TableColumn } from '@/framework/components/core/super-table';
import dayjs from 'dayjs';

export type TableListItem = API.DeviceStatisticsListItem;
export type TableColumnItem = TableColumn<TableListItem>;


export const baseColumns: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '设备类型',
    field: 'type',
    dict: 'DeviceType'
  },
  {
    title: '设备名称',
    field: 'name',
  },
  {
    title: '生产厂家',
    field: 'manufacturer',
    hideInSearch: true,
  },
  {
    title: '规格型号',
    field: 'specifications',
    hideInSearch: true,
  },
  {
    title: '购置日期',
    field: 'purchaseDate',
    hideInSearch: true,
    formatter: ({ row }) => row.purchaseDate ? dayjs(row.purchaseDate).format('YYYY-MM-DD HH:mm:ss') : ''
  },
  {
    title: '检定/校准周期',
    field: 'testCycle',
    hideInSearch: true,
    formatter: ({ row }) => `${row.testCycle}月`
  },
  {
    title: '最近检定/校准时间',
    field: 'lastTestTime',
    hideInSearch: true,
    formatter: ({ row }) => row.lastTestTime ? dayjs(row.lastTestTime).format('YYYY-MM-DD HH:mm:ss') : ''
  },
  {
    title: '设备编号',
    field: 'code',
    hideInSearch: true,
  },
  {
    title: '设备状态',
    field: 'status',
    hideInSearch: true,
    dict: 'ExtraDeviceStatus'
  },
]<template>
  <div class="ant-card-body ">
    <div class="title-box">区域内设备信息统计</div>
    <!-- 小卡片 -->
    <div class="card-box">
      <DeviceCard v-for="item in cardStatList" :card-info="item">
        <template #ImgSolt>
          <img :src="item.img" alt="">
        </template>
      </DeviceCard>
    </div>
    <!-- 表格 -->
    <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager align="center" border
      :mode="1" :export-config="{}" :toolbar="{}" searchBtnType="white-blue" :height="tableHeightComputed">
      <template #action>
        <a-button type="white-blue" style="margin-right: -8px;" @click="changeExport">
          <template #icon>
            <BtnSvgIcon name="daochu"></BtnSvgIcon>
          </template>
          导出
        </a-button>
      </template>
    </SuperTable>
  </div>
</template>
<script setup lang="ts">
import { reactive, ref, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import DeviceCard from '@/components/card/device-card/index.vue';
import { baseColumns, TableColumnItem } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getDeviceStatistic, getDeviceStatisticPage } from '../../api/statistic'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 220
})
const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    'auditStatuses[0]': 2,
  };
  const res = await getDeviceStatistic()
  for (let [key, num] of Object.entries<number>(res)) {
    cardStatList.value.forEach(cardItem => {
      if (cardItem.key === key) {
        cardItem.num = num
      }
    })
  }
  return await getDeviceStatisticPage(params)
};

const columns: TableColumnItem[] = [
  ...baseColumns,
];

const cardStatList = ref([
  {
    key: '1',
    text: '生物安全柜',
    num: 0,
    unit: '台',
    color: '#728BFF',
    img: './svgs/dl1.svg'
  },
  {
    key: '2',
    text: '高压灭菌器',
    num: 0,
    unit: '台',
    color: '#138172',
    img: './svgs/dl2.svg'
  },
  {
    key: '3',
    text: '其他',
    num: 0,
    unit: '台',
    color: '#38BFD4',
    img: './svgs/dl3.svg'
  },
])


const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}

/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value?.openExport()
}

</script>
<style lang="less" scoped>
.title-box {
  font-size: 14px;
  font-weight: 600;
}

.ant-card-body {
  border-radius: 8px;
  background-color: #fff;

}

.card-box {
  display: flex;
  margin: 20px 0;
  padding-bottom: 20px;
  border-bottom: solid 1px #DCE0E7;
}
</style><template>
  <ArticlePublish :type="3"/>
</template>
<script setup lang="tsx" name="cityInfoPublish">
import ArticlePublish from '@/modules/cms/pages/articleManagement/index.vue'
</script>
<style lang="less" scoped></style><template>
  <ArticlePublishDetail />
</template>
<script setup lang="tsx">
import ArticlePublishDetail from '@/modules/cms/pages/articleManagement/appear/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <div class="card-container">
    <ActivityCard title="病毒类实验室活动" :sample-count="statNum.virus[0]" :positive-count="statNum.virus[1]">
      <template #icon>
        <img src="@/assets/images/virusSvg.svg" />
      </template>
    </ActivityCard>
    <ActivityCard background-color="#f2fdfd" title="细菌放线菌类实验室活动" :sample-count="statNum.bacteria[0]"
      :positive-count="statNum.bacteria[1]">
      <template #icon>
        <img src="@/assets/images/bacteriaSvg.svg" />
      </template>
    </ActivityCard>
    <ActivityCard background-color="#f4f4fa" title="真菌类实验室活动" :sample-count="statNum.fungus[0]" :positive-count="statNum.fungus[1]">
      <template #icon>
        <img src="@/assets/images/fungusSvg.svg" />
      </template>
    </ActivityCard>
    <ActivityCard background-color="#f2fcfd" title="其他病原菌类实验室活动" :sample-count="statNum.other[0]"
      :positive-count="statNum.other[1]">
      <template #icon>
        <img src="@/assets/images/otherVirusSvg.svg" />
      </template>
    </ActivityCard>
  </div>
  <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="实验室活动列表" align="center" border
    ref="supertable" :export-config="{}" :mode="1" search-btn-type="white-blue" :auto-load="false" :height="tableHeightComputed">
  </SuperTable>
</template>
<script setup lang="tsx" name="cityLabActivity">
import { reactive, ref, onActivated, Ref, inject, computed } from 'vue'
import { VxeGridPropTypes } from 'vxe-table'
import { useRouter } from 'vue-router'
import type { TableColumnItem, TableListItem } from './columns'
import { baseColumns } from './columns'
import ActivityCard from '@/components/card/activity-card/index.vue'
import { SuperTable } from '@/framework/components/core/super-table'
import { getActivityPage, getActivityNumberByType } from '@/modules/lab/api/activity'
import { ActivityStatusEnum } from '@/enums/state'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 110
})
const props = defineProps({
  isProvince: {
    type: Boolean,
    default: false
  }
})
const router = useRouter()
const supertable = ref<InstanceType<typeof SuperTable>>()

const statNum = reactive({
  virus: [0, 0],
  bacteria: [0, 0],
  fungus: [0, 0],
  other: [0, 0]
})
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel()
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    workflowState: ActivityStatusEnum.ApprovePass,
  };
  const res = await getActivityNumberByType()
  statNum.virus = [res[0].sampleSum, res[0].samplePositiveSum]
  statNum.bacteria = [res[1].sampleSum, res[1].samplePositiveSum]
  statNum.fungus = [res[2].sampleSum, res[2].samplePositiveSum]
  statNum.other = [res[3].sampleSum, res[3].samplePositiveSum]
  return await getActivityPage(params)
}
const columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 100,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          router.push({
            name: `${props.isProvince ? 'province' : 'city'}LabActivityDetail`,
            query: {
              id: row.id
            }
          })
        },
      },
    ],
  },
]

onActivated(() => {
  supertable.value?.queryTable()
})
</script>
<style lang="less" scoped>
.card-container {
  display: flex;
  gap: 16px;
  background-color: #fff;
  padding: 10px;

}
</style><template>
  <div class="ant-card-body ">
    <div class="title-box">区域内实验室信息统计</div>
    <!-- 小卡片 -->
    <div class="card-box">
      <StatisticsCard v-for="item in cardStatList" :card-info="item" />
    </div>

    <!-- 表格 -->
    <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager align="center" border
      :mode="1" :export-config="{}" :toolbar="{}" searchBtnType="white-blue" :height="tableHeightComputed">
      <template #action>
        <a-button type="white-blue" style="margin-right: -8px;" @click="changeExport">
          <template #icon>
            <BtnSvgIcon name="daochu"></BtnSvgIcon>
          </template>
          导出
        </a-button>
      </template>
    </SuperTable>

  </div>
</template>
<script setup lang="ts">
import { reactive, ref, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import StatisticsCard from '@/components/card/statistics-card/index.vue';
import { baseColumns, TableColumnItem } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getLabStatistic, getLabStatisticPage } from '../../api/statistic'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 220
})
const supertable = ref();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    auditStatus: 2,
  };
  const res = await getLabStatistic()
  for (let [key, num] of Object.entries<number>(res)) {
    cardStatList.value.forEach(cardItem => {
      if (cardItem.key === key) {
        cardItem.num = num
      }
    })
  }
  return await getLabStatisticPage(params)
};

let columns: TableColumnItem[] = [
  ...baseColumns,
];

const cardStatList = ref([
  {
    key: '实验室',
    text: '实验室共计',
    num: 0,
    unit: '家',
    color: '#FD9A08'
  },
  {
    key: '病毒培养',
    text: '病毒培养',
    num: 0,
    unit: '个',
    color: '#03BA94'
  },
  {
    key: '动物感染实验',
    text: '动物感染实验',
    num: 0,
    unit: '家',
    color: '#FB083F'
  },
  {
    key: '未经培养的感染材料操作',
    text: '未经培养的感染材料操作',
    num: 0,
    unit: '家',
    color: '#0052D9'
  },
  {
    key: '灭活材料操作',
    text: '灭活材料操作',
    num: 0,
    unit: '家',
    color: '#02D7FF'
  },
  {
    key: '无感染性材料的实验',
    text: '无感染性材料的实验',
    num: 0,
    unit: '家',
    color: '#03BA94'
  },
])

const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}

/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value.openExport()
}

</script>
<style lang="less" scoped>
.ant-card-body {
  border-radius: 8px;
  background-color: #fff;

  .title-box {
    font-size: 14px;
    font-weight: 600;
  }
}

.card-box {
  display: flex;
  margin: 20px 0;
  padding-bottom: 20px;
  border-bottom: solid 1px #DCE0E7;
  justify-content: space-between;
}
</style>import type { TableColumn } from '@/framework/components/core/super-table';
import dayjs from 'dayjs';
export type TableListItem = API.PersonStatisticsListItem;
export type TableColumnItem = TableColumn<TableListItem>;


export const baseColumns: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '姓名',
    field: 'name',
  },
  {
    title: '性别',
    field: 'sex',
    hideInSearch: true,
    dict: 'Sex'
  },
  {
    title: '出生日期',
    field: 'birthDate',
    hideInSearch: true,
    formatter: ({ row }) => row.birthDate ? dayjs(row.birthDate).format('YYYY-MM-DD') : ''
  },
  {
    title: '参加工作时间',
    field: 'workDate',
    hideInSearch: true,
  },
  {
    title: '职称',
    field: 'jobTitle',
    dict: 'JobTitle'
  },
  {
    title: '学历',
    field: 'academic',
    hideInSearch: true,
    dict: 'Academic'
  },
  {
    title: '所学专业',
    field: 'major',
    hideInSearch: true,
  },
  {
    title: '工作岗位',
    field: 'jobs',
    hideInSearch: true,
    dict: 'Job'
  },
  {
    title: '生物安全培训合格证编号',
    field: 'certNum',
    width: 200,
    hideInSearch: true,
  },
  {
    title: '身份证号',
    field: 'idcard',
  },
]<template>
  <div class="ant-card-body ">
    <div class="title-box">区域内人员信息统计</div>
    <!-- 小卡片 -->
    <div class="card-box">
      <PersonCard v-for="item in cardStatList" :card-info="item">
        <template #ImgSolt>
          <img :src="item.img" alt="">
        </template>
      </PersonCard>
    </div>

    <!-- 表格 -->
    <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager align="center" border
      :mode="1" :export-config="{}" searchBtnType="white-blue" :toolbar="{}" :height="tableHeightComputed">
      <template #action>
        <a-button type="white-blue" style="margin-right: -8px;" @click="changeExport">
          <template #icon>
            <BtnSvgIcon name="daochu"></BtnSvgIcon>
          </template>
          导出
        </a-button>
      </template>
    </SuperTable>

  </div>
</template>
<script setup lang="ts">
import { reactive, ref, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import PersonCard from '@/components/card/person-card/index.vue';
import { baseColumns, TableColumnItem } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getPersonStatistic, getPersonStatisticPage } from '../../api/statistic'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 220
})
const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    'auditStatuses[0]': 2,
  };
  let totalPeople = 0
  let totalCertPeople = 0
  let totalPercent = 0
  const res = await getPersonStatistic()
  res.forEach(item => {
    totalPeople += item.number
    totalCertPeople += item.certCount
    cardStatList.value.forEach(cardItem => {
      if (cardItem.key === item.jobTitle) {
        cardItem.haveCardNum = item.certCount
        cardItem.relevantNum = item.number
        cardItem.percentage = Number((cardItem.haveCardNum / cardItem.relevantNum).toFixed(1)) * 100
      }
    })
  })
  totalPercent = Number((totalCertPeople / totalPeople).toFixed(1)) * 100

  cardStatList.value[0].haveCardNum = totalCertPeople
  cardStatList.value[0].relevantNum = totalPeople
  cardStatList.value[0].percentage = totalPercent
  return await getPersonStatisticPage(params)
};

const columns: TableColumnItem[] = [
  ...baseColumns,
];

const cardStatList = ref([
  {
    level: '相关人员',
    relevantNum: 0,
    haveCardNum: 0,
    textColor: '#5A9CFF',
    img: '/src/assets/images/icon-1.png',
    leftTextColor: '#5A9CFF',
    leftBgColor: '#EEF5FF',
    percentage: 0,
  },
  {
    key: 1,
    level: '初级职称',
    relevantNum: 0,
    haveCardNum: 0,
    textColor: '#FFA98E',
    img: '/src/assets/images/icon-2.png',
    leftTextColor: '#FFA98E',
    leftBgColor: '#FFF5F1',
    percentage: 0,
  },
  {
    key: 2,
    level: '中级职称',
    relevantNum: 0,
    haveCardNum: 0,
    textColor: '#A79BF9',
    img: '/src/assets/images/icon-3.png',
    leftTextColor: '#728BFF',
    leftBgColor: '#EEF1FF',
    percentage: 0,
  },
  {
    key: 3,
    level: '高级职称',
    relevantNum: 0,
    haveCardNum: 0,
    textColor: '#FF8A6B',
    img: '/src/assets/images/icon-4.png',
    leftTextColor: '#FB083F',
    leftBgColor: '#FFF6F3',
    percentage: 0,
  },
])

const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}
/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value?.openExport()
}


</script>

<style lang="less" scoped>
.ant-card-body {
  border-radius: 8px;
  background-color: #fff;
}

.card-box {
  display: flex;
  margin: 20px 0;
  padding-bottom: 20px;
  border-bottom: solid 1px #DCE0E7;
  justify-content: space-between;
}

.title-box {
  font-size: 14px;
  font-weight: 600;
}
</style><template>
  <RecordLicense></RecordLicense>
</template>
<script setup lang="tsx">
import RecordLicense from '@/modules/company/pages/companyRecordLicense/index.vue'
</script>
<style lang="less" scoped></style><template>
  <RecordLicenseDetail></RecordLicenseDetail>
</template>
<script setup lang="tsx">
import RecordLicenseDetail from '@/components/lab-info/index.vue'
</script>
<style lang="less" scoped>

</style>import type { TableColumn } from '@/framework/components/core/super-table';
import dayjs from 'dayjs';
export type TableListItem = API.CityUserManagementListItem;
export type TableColumnItem = TableColumn<TableListItem>;


export const sameLevel: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '主管部门ID',
    field: 'username',
  },
  {
    title: '主管部门名称',
    field: 'name',
  },
  {
    title: '创建时间',
    field: 'createTime',
    hideInSearch: true,
    formatter: ({ row }) => {
      return row.createTime ? dayjs(row.createTime).format('YYYY-MM-DD HH:mm:ss') : ''
    }
  },
]


export const subCompany: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '行政区划',
    field: 'divideNames',
    hideInSearch: true,
  },
  {
    title: '单位ID',
    field: 'username',
  },
  // {
  //   title: '单位备案编号',
  //   field: 'idCardNo',
  //   hideInSearch: true,
  // },
  // {
  //   title: '单位级别',
  //   field: 'createTime',
  //   hideInSearch: true
  // },

  {
    title: '单位名称',
    field: 'name',
  },
]


export const subLab: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '实验室ID',
    field: 'username',
  },
  // {
  //   title: '实验室备案编号',
  //   field: 'idCardNo',
  //   hideInSearch: true
  // },
  {
    title: '实验室名称',
    field: 'name',
  },
  {
    title: '所属单位',
    field: 'parentName',
  },
  // {
  //   title: '级别',
  //   field: 'createTime',
  //   hideInSearch: true
  // },
]<template>
  <DraggableModal title="单位注册审批" :visible="visible" @update:visible="updateVisibleEvt($event)" width="900px"
    height="700px" destroy-on-close>
    <div style="display:flex; justify-content:flex-end;margin-bottom: 5px;">
      <a-button type="blue-white" @click="approveAll">批量通过</a-button>
    </div>
    <vxe-table border ref="mainTable" :data="state.tableData" align="center" height="490">
      <vxe-column type="checkbox" width="60" />
      <vxe-column field="name" title="单位名称" />
      <vxe-column field="username" title="统一社会信用代码" />
      <vxe-column field="extData2" title="联系人手机号码" />
      <vxe-column title="操作" width="200">
        <template #default="params">
          <TableAction :actions="tableAction(params)"></TableAction>
        </template>
      </vxe-column>
    </vxe-table>
    <vxe-pager background v-model:current-page="page.currentPage" v-model:page-size="page.pageSize" :total="page.total"
      :layouts="['Sizes', 'PrevPage', 'JumpNumber', 'NextPage', 'FullJump']" @page-change="changePageFn" />
    <template #footer>
      <div></div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import { reactive, ref, watch } from 'vue'
import { message } from 'ant-design-vue'
import { VxeGridPropTypes, VxeTableInstance } from 'vxe-table'
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import TableAction from '@/framework/components/core/super-table/components/table-action.vue'
import { getWaitAudit, auditUser, ApproveState } from '../../../api/user'
import type { AuditUserType } from '../../../api/user'

const props = defineProps({
  visible: {
    type: Boolean,
    required: true
  }
})
const emits = defineEmits(['update:visible', 'update:waitAuditCount'])
const updateVisibleEvt = (e) => {
  emits('update:visible', e)
}
const mainTable = ref<VxeTableInstance>()
const state = reactive({
  tableData: []
})
const page = reactive({
  currentPage: 1,
  pageSize: 10,
  total: 0
})
const changePageFn = async ({ currentPage, pageSize }) => {
  page.currentPage = currentPage;
  page.pageSize = pageSize;
  getTableData()
}
const tableAction = ({ row }) => [
  {
    label: '通过',
    popConfirm: {
      title: '您确定通过吗？',
      onConfirm: async () => {
        const data: AuditUserType = {
          userIds: [row.id],
          approveState: 'APPROVE' // ApproveState.
        }
        const res = await auditUser(data)
        if (res.success && res.code == 200) {
          message.success('审批成功')
          getTableData()
        }
      }
    }
  },
  {
    label: '退回',
    popConfirm: {
      title: '您确定退回吗？',
      onConfirm: async () => {
        const data: AuditUserType = {
          userIds: [row.id],
          approveState: 'REFUSE'
        }
        const res = await auditUser(data)
        if (res.success && res.code == 200) {
          message.success('退回成功')
          getTableData()
        }
      }
    }
  }
]

const getTableData = async () => {
  const res = await getWaitAudit({
    pageNum: page.currentPage,
    pageSize: page.pageSize
  })
  state.tableData = res.data
  page.total = res.total
  emits('update:waitAuditCount', res.total)
}
watch(() => props.visible, (nval, oval) => {
  if (nval) {
    getTableData()
  }
})
const approveAll = async () => {
  const selected = mainTable.value?.getCheckboxRecords()
  if (selected && selected.length) {
    console.log(selected, 'selected')
    const userIds = selected.map(company => company.id)
    const data: AuditUserType = {
      approveState: 'APPROVE',
      userIds,
    }
    const res = await auditUser(data)
    if (res.success && res.code == 200) {
      message.success('审批成功')
      getTableData()
    } else {
      message.error('审批失败，遇到错误')
    }
  } else {
    message.error('请选择待审批数据')
  }
}
</script>
<style lang="less" scoped>

</style><template>
  <a-row style="background-color: #fff">
    <a-col :span="4" v-if="!isCounty">
      <div class="content-right-tree">
        <div class="content-right-tree-title">行政区划</div>
        <a-input placeholder="按下回车进行搜索" class="content-right-tree-search" v-model:value="state.searchDivideName"
          @pressEnter="searchDivideEnter" allowClear @change="searchDivideChange">
          <template #prefix>
            <SearchOutlined />
          </template>
        </a-input>
        <Tree show-line :tree-data="state.treeData" @select="treeSelect" defaultExpandAll
          v-model:expandedKeys="state.expandedKeys" :fieldNames="{ children: 'children', title: 'name', key: 'id' }"
          blockNode :selected-keys="state.selectedKeys">
          <template #title="params" v-if="isProvince">
            <span>{{ params.name }}</span>
            <span v-if="params.selected" style="display:inline-block;margin-left: 20px;float: right;">
              <Space>
                <PlusCircleOutlined @click="treeNodeAdd" />
                <FormOutlined @click="treeNodeEdit" />
                <DeleteOutlined @click="treeNodeDelete" />
              </Space>
            </span>
          </template>
        </Tree>
      </div>
    </a-col>
    <a-col :span="(!isCounty) ? 20 : 24">
      <div class="content-left-table">
        <Tabs>
          <template #leftExtra v-if="!isCounty">
            <span class="content-left-table-title">{{ divideNameComputed }}</span>
          </template>
          <TabPane :key="1" tab="主管部门">
            <SuperTable :columns="sameLevelColumns" :data-request="sameLevelFetchData" search pager align="center" border
              ref="sameLevelSupertable" :mode="1" searchBtnType="white-blue" :toolbar="{}" :height="tableHeight"
              v-if="haveSelectedComputed">
              <template #action>
                <a-button type="blue-white" @click="addLab">
                  <template #icon>
                    <BtnSvgIcon name="tianjia"></BtnSvgIcon>
                  </template>
                  添加
                </a-button>
                <Badge :count="state.waitApproveCount" style="z-index: 2;" size="small">
                  <a-button type="white-blue" @click="state.companyRegisteApproveModal = true">
                    <template #icon>
                      <BtnSvgIcon name="shenhe"></BtnSvgIcon>
                    </template>
                    单位注册审批
                  </a-button>
                </Badge>
                <a-button type="white-blue" style="margin-right: -8px;">
                  <template #icon>
                    <BtnSvgIcon name="daochu"></BtnSvgIcon>
                  </template>
                  导出
                </a-button>
              </template>
            </SuperTable>
          </TabPane>
          <TabPane :key="2" tab="下辖单位">
            <SuperTable :columns="subCompanyColumns" :data-request="subCompanyFetchData" search pager align="center"
              border ref="subCompanySupertable" :mode="1" searchBtnType="white-blue" :toolbar="{}" :height="tableHeight"
              v-if="haveSelectedComputed">
              <template #action>
                <a-button type="blue-white" @click="addLab">
                  <template #icon>
                    <BtnSvgIcon name="tianjia"></BtnSvgIcon>
                  </template>
                  添加
                </a-button>
                <Badge :count="state.waitApproveCount" style="z-index: 2;" size="small">
                  <a-button type="white-blue" @click="state.companyRegisteApproveModal = true">
                    单位注册审批
                    <template #icon>
                      <BtnSvgIcon name="shenhe"></BtnSvgIcon>
                    </template>
                  </a-button>
                </Badge>
                <!-- <a-button type="white-blue" @click="setDirectlyCompany">设为委直属单位</a-button> -->
                <a-button type="white-blue" style="margin-right: -8px;">
                  <template #icon>
                    <BtnSvgIcon name="daochu"></BtnSvgIcon>
                  </template>
                  导出
                </a-button>
              </template>
            </SuperTable>
          </TabPane>
          <TabPane :key="3" tab="下辖实验室">
            <SuperTable :columns="subLabColumns" :data-request="subLabFetchData" search pager align="center" border
              ref="subLabSupertable" :mode="1" searchBtnType="white-blue" :toolbar="{}" v-if="haveSelectedComputed"
              :height="tableHeight">
              <template #action>
                <!-- <a-button type="blue-white" @click="addLab">
                  <template #icon>
                    <BtnSvgIcon name="tianjia"></BtnSvgIcon>
                  </template>
                  添加
                </a-button> -->
                <a-button type="white-blue" style="margin-right: -8px;">
                  <template #icon>
                    <BtnSvgIcon name="daochu"></BtnSvgIcon>
                  </template>
                  导出
                </a-button>
              </template>
            </SuperTable>
          </TabPane>
        </Tabs>
      </div>
    </a-col>
  </a-row>
  <DraggableModal :title="state.addLabModalTitle" v-model:visible="state.addLabModal" width="800px" destroy-on-close>
    <a-form :model="state.addLabFormData" :label-col="{ span: 10 }" :wrapper-col="{ span: 14 }" :rules="state.formRules"
      ref="addLabFormRef">
      <input type="password" style="width: 0; height: 0;" />
      <a-row>
        <a-col span="12">
          <a-form-item label="所属行政区域" name="divideId">
            <TreeSelect v-model:value="state.addLabFormData.divideId" :treeData="state.treeData" placeholder="请选择行政区划"
              :fieldNames="{ label: 'name', value: 'id', children: 'children' }" :tabindex="1">
            </TreeSelect>
          </a-form-item>
          <a-form-item label="用户名称" name="name">
            <a-input placeholder="请输入用户名称" v-model:value="state.addLabFormData.name" :tabindex="3"></a-input>
          </a-form-item>
          <a-form-item label="密码" name="password" v-if="state.addLabMode === AddLabModeEnum.Add">
            <a-input-password placeholder="请输入密码" v-model:value="state.addLabFormData.password" :tabindex="5"
              @blur="passwordBlurEvt"></a-input-password>
          </a-form-item>
          <a-form-item label="角色" name="roles">
            <a-select v-model:value="state.addLabFormData.roles" :options="roleOptions" placeholder="请选择角色">
            </a-select>
          </a-form-item>
          <a-form-item label="所属单位" name="parentId" v-if="state.addLabFormData.roles === '6'">
            <a-select v-model:value="state.addLabFormData.parentId" :options="state.orgOptions" placeholder="请选择所属单位"
              :fieldNames="{ label: 'name', value: 'id' }" showSearch @search="companySearch" :tabindex="7">
            </a-select>
          </a-form-item>
        </a-col>
        <a-col span="12">
          <a-form-item label="用户ID" name="username">
            <a-input placeholder="请输入用户ID" v-model:value="state.addLabFormData.username"
              :disabled="state.addLabMode === AddLabModeEnum.Edit" :tabindex="2"></a-input>
          </a-form-item>
          <a-form-item label="联系电话" name="phone">
            <a-input placeholder="请输入联系电话" v-model:value="state.addLabFormData.phone" :tabindex="4"></a-input>
          </a-form-item>
          <a-form-item label="重复密码" name="repeatPassword" v-if="state.addLabMode === AddLabModeEnum.Add">
            <a-input-password placeholder="请重复密码" v-model:value="state.addLabFormData.repeatPassword" :tabindex="6">
            </a-input-password>
          </a-form-item>
          <a-form-item label="启用状态" name="status">
            <Switch size="small" v-model:checked="state.addLabFormData.status" :unCheckedValue="0" :checkedValue="1">
            </Switch>
            <span style="margin-left: 6px; vertical-align: middle;">{{
              state.addLabFormData.status === 1 ? "启用" : "停用"
            }}</span>
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="addLabCancel">取消</a-button>
        <a-button type="white-blue" @click="addLabReset" v-if="state.addLabMode === AddLabModeEnum.Add">重置</a-button>
        <a-button type="blue-white" @click="addLabOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
  <DraggableModal title="重置密码" v-model:visible="state.resetPasswordModal" width="600px">
    <a-form :model="state.resetPasswordFormData" :label-col="{ span: 6 }" :wrapper-col="{ span: 14 }"
      :rules="state.resetFormRules" ref="resetPasswordFormRef">
      <a-form-item label="账号ID" name="resetLabId">
        <a-input v-model:value="state.resetPasswordFormData.username" disabled></a-input>
      </a-form-item>
      <a-form-item label="名称" name="resetLabName">
        <a-input v-model:value="state.resetPasswordFormData.name" disabled></a-input>
      </a-form-item>
      <a-form-item label="密码" name="password">
        <a-input-password placeholder="请输入密码" v-model:value="state.resetPasswordFormData.password"
          @blur="passwordBlurEvt"></a-input-password>
      </a-form-item>
      <a-form-item label="重复密码" name="repeatPassword">
        <a-input-password placeholder="请确认密码"
          v-model:value="state.resetPasswordFormData.repeatPassword"></a-input-password>
      </a-form-item>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="state.resetPasswordModal = false">取消</a-button>
        <a-button type="blue-white" @click="resetPasswordModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
  <CompanyRegisteApproveModal v-model:visible="state.companyRegisteApproveModal"
    @update:waitAuditCount="updateWaitAuditCount"></CompanyRegisteApproveModal>
  <DraggableModal :title="treeState.modalTitle" v-model:visible="treeState.treeOperateModal" width="600px"
    destroy-on-close>
    <a-form :model="treeState.formData" :label-col="{ span: 6 }" :wrapper-col="{ span: 14 }" :rules="treeState.rules"
      ref="treeStateFormRef">
      <a-form-item label="行政区划名称" name="name">
        <a-input v-model:value="treeState.formData.name" placeholder="请输入行政区划名称"></a-input>
      </a-form-item>
      <a-form-item label="行政区划编码" name="code">
        <a-input v-model:value="treeState.formData.code" placeholder="请输入行政区划名称"></a-input>
      </a-form-item>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="treeState.treeOperateModal = false">取消</a-button>
        <a-button type="blue-white" @click="treeModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import { reactive, ref, computed, createVNode, watch, nextTick } from 'vue'
import { Tree, Tabs, TabPane, TreeProps, Space, Modal, message, TreeSelect } from 'ant-design-vue';
import { PlusCircleOutlined, FormOutlined, DeleteOutlined, ExclamationCircleOutlined, SearchOutlined } from '@ant-design/icons-vue'
import { VxeGridPropTypes } from 'vxe-table';
import { sameLevel, subCompany, subLab } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import type { TableColumn } from '@/framework/components/core/super-table';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, Switch, Badge } from 'ant-design-vue'
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue'
import CompanyRegisteApproveModal from './components/companyRegisteApproveModal.vue'
import { getDivides, getMyDivides, getAllOrgByTypePage, postDivide, putDivide, deleteDivide } from '@/api/divide'
import { createUser, getWaitAudit, getDivideUserPage, DivideUserParams, editUser, auditUser } from '../../api/user'
import { useUserStore } from '@/store/modules/user'
import { JSEncrypt } from 'jsencrypt';
import config from '@/config';
import userStatusSwitch from './components/userStatusSwitch'
import { dict } from '@/framework/core/dict';
const props = defineProps({
  isProvince: {
    type: Boolean,
    default: false,
  }
})
const jsencrypt = new JSEncrypt()
jsencrypt.setPublicKey(config.pubKey)

const userStore = useUserStore()
const myDivideId = userStore.getOrganizationInfo.parentId
const roles = userStore.getRoles
const isCounty = ref(Boolean(roles[0]?.id === '4'))
const role = ref(roles[0].id || '0')
const sameLevelSupertable = ref<InstanceType<typeof SuperTable>>();
const subCompanySupertable = ref<InstanceType<typeof SuperTable>>();
const subLabSupertable = ref<InstanceType<typeof SuperTable>>();
const pathArr = userStore.getOrganizationInfo.path.split('-')
const parentPath = pathArr.slice(0, pathArr.length - 1).join('-')
console.log(parentPath, 'parentPath')

const roleOptions = computed(() => {
  const allRole = dict.get('RoleId')
  console.log(allRole, 'allrole')
  if (role.value === '2') {
    return allRole?.filter(item => (item.value >= role.value && item.value !== '6')) || []
  } else {
    return allRole?.filter(item => (item.value > role.value && item.value !== '6')) || []
  }
})
let orgTimeout: NodeJS.Timer | null = null
function fetchOrg(value: string, callback: any) {
  if (orgTimeout) {
    clearTimeout(orgTimeout);
    orgTimeout = null;
  }
  const getList = async () => {
    let res = await getAllOrgByTypePage({ divideId: state.addLabFormData.divideId || '', type: 'COM', name: value })
    callback(res);
  }
  orgTimeout = setTimeout(getList, 300);
}
const companySearch = (value) => {
  fetchOrg(value, (res) => {
    state.orgOptions = res.data
  })
}

const tableHeight = computed(() => {
  return document.body.clientHeight - 300
})
// 表格数据请求方法
const sameLevelFetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = sameLevelSupertable.value?.getFormModel();
  const params: API.PageParams<DivideUserParams> = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    roleIds: '"2", "3", "4"', // 省级市级区级主管部门
    ...data,
  }
  if (isCounty.value) {
    params.dividePath = parentPath
  } else {
    params.dividePath = state.selectedNodes[0].path
  }
  return await getDivideUserPage(params)
};
const subCompanyFetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = subCompanySupertable.value?.getFormModel();
  const params: API.PageParams<DivideUserParams> = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    roleIds: '"5"', // 单位
    ...data,
  }
  if (isCounty.value) {
    params.dividePath = parentPath
  } else {
    params.dividePath = state.selectedNodes[0].path
  }
  return await getDivideUserPage(params)
};
const subLabFetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = subLabSupertable.value?.getFormModel();
  const params: API.PageParams<DivideUserParams> = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    roleIds: '"6"', // 实验室
    ...data,
  }
  if (isCounty.value) {
    params.dividePath = parentPath
  } else {
    params.dividePath = state.selectedNodes[0].path
  }
  return await getDivideUserPage(params)
};
const sameLevelColumns: TableColumn[] = [
  ...sameLevel,
  {
    title: '状态',
    field: 'status',
    dict: 'UserStatus',
    slots: {
      default: ({ row }) => {
        return userStatusSwitch(row)
      }
    }
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 180,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          editLab(row)
        }
      },
      // {
      //   label: '注销',
      //   popConfirm: {
      //     title: '您确定注销该账户吗？',
      //     onConfirm: () => {
      //       cancelAccountConfirm(row)
      //     }
      //   }
      // },
      {
        label: '重置密码',
        onClick: () => {
          resetPassword(row)
        }
      }
    ],
  },
];

const subCompanyColumns: TableColumn[] = [
  ...subCompany,
  {
    title: '状态',
    field: 'status',
    dict: 'UserStatus',
    slots: {
      default: ({ row }) => {
        return userStatusSwitch(row)
      }
    }
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 180,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          editLab(row)
        }
      },
      // {
      //   label: '注销',
      //   popConfirm: {
      //     title: '您确定注销该账户吗？',
      //     onConfirm: () => {
      //       cancelAccountConfirm(row)
      //     }
      //   }
      // },
      {
        label: '重置密码',
        onClick: () => {
          resetPassword(row)
        }
      }
    ],
  },
]

const subLabColumns: TableColumn[] = [
  ...subLab,
  {
    title: '状态',
    field: 'status',
    dict: 'UserStatus',
    slots: {
      default: ({ row }) => {
        return userStatusSwitch(row)
      }
    }
  },
  // {
  //   title: '操作',
  //   field: '$action',
  //   hideInSearch: true,
  //   align: 'center',
  //   fixed: 'right',
  //   width: 180,
  //   actions: ({ row }) => [
  //     {
  //       label: '修改',
  //       onClick: () => {
  //         editLab(row)
  //       }
  //     },
  //     {
  //       label: '重置密码',
  //       onClick: () => {
  //         resetPassword(row)
  //       }
  //     }
  //   ],
  // },
]

const divideNameComputed = computed(() => {
  return state.selectedNodes[0] ? state.selectedNodes[0].name : '未选择'
})
const haveSelectedComputed = computed(() => {
  if (!isCounty.value) {
    return state.selectedNodes.length > 0
  } else {
    return true
  }
})
type ResetFormData = {
  id: string,
  name: string,
  username: string,
  password: string,
  repeatPassword: string,
}
enum AddLabModeEnum {
  Add = 1,
  Edit = 2
}
const addLabFormRef = ref<FormInstance>()
const state = reactive({
  searchDivideName: '',
  waitApproveCount: 0,
  expandedKeys: ["1"],
  companyRegisteApproveModal: false, // 单位审批modal
  selectedNodes: [] as any[],
  selectedKeys: [] as Array<string | number>,
  treeData: [] as any[],
  addLabModalTitle: '',
  addLabModal: false,
  addLabMode: AddLabModeEnum.Add,
  orgOptions: [] as any[], // 行政区划下的所有单位
  addLabFormData: {
    divideId: null as string | null,
    name: '',
    password: '',
    repeatPassword: '',
    roles: null,
    username: '',
    phone: '',
    status: 0,
    parentId: null as string | null,
  },
  resetPasswordFormData: {
    id: '',
    username: '',
    name: '',
    password: '',
    repeatPassword: '',
  } as ResetFormData,
  formRules: {
    username: [{ required: true, message: '请输入账号ID' }],
    password: [{ required: true, message: '请输入密码' }],
    phone: [{ required: true, message: '请输入联系电话' }],
    divideId: [{ required: true, message: '请选择行政区划' }],
    name: [{ required: true, message: '请输入实验室名称' }],
    parentId: [{ required: true, message: '请选择实验室所属单位' }],
    repeatPassword: [
      {
        required: true,
        validator: (a, b) => {
          console.log(a, b, 'asdaa')
          if (!b) {
            return Promise.reject('请重复密码')
          } else if (b === state.addLabFormData.password) {
          } else {
            return Promise.reject('两次密码不一致')
          }
          return Promise.resolve()
        },
        trigger: 'blur'
      },
    ],
    roles: [{ required: true, message: '请选择角色' }],
  },
  resetFormRules: {
    password: [{ required: true, message: '请输入密码', trigger: 'change' }],
    repeatPassword: [
      {
        required: true,
        validator: (_rule, value) => {
          if (!value) {
            return Promise.reject('请重复密码')
          } else if (value === state.resetPasswordFormData.password) {

          } else {
            return Promise.reject('两次密码不一致')
          }
          return Promise.resolve();
        },
        trigger: 'blur'
      }
    ],
  },
  resetPasswordModal: false,
})
const passwordBlurEvt = () => {
  addLabFormRef.value?.validate(['repeatPassword'])
  resetPasswordFormRef.value?.validate(['repeatPassword'])
}

const searchDivideEnter = async () => {
  await getTreeData()
  if (state.searchDivideName) {
    const name = state.searchDivideName
    const arr: any[] = []
    const func = (list: Array<any>) => {
      list.forEach(i => {
        if (i.name.indexOf(name) > -1) {
          arr.push(i)
        }
        if (i.children && i.children.length) {
          func(i.children)
        }
      })
    }
    func(state.treeData)
    state.treeData = arr
    if (arr && arr.length) {
      state.expandedKeys = [arr[0].id]
    }
  }
}

const searchDivideChange = (e: InputEvent) => {
  const value = (e.target as HTMLInputElement).value
  if (!value) {
    getTreeData()
  }
}
const treeSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
  state.selectedNodes = info.selectedNodes
  state.selectedKeys = selectedKeys
}

const refreshAllTable = () => {
  sameLevelSupertable.value?.refreshTable()
  subCompanySupertable.value?.refreshTable()
  subLabSupertable.value?.refreshTable()
}
watch(() => state.selectedKeys, (nval) => {
  if (nval && nval.length) {
    refreshAllTable()
  }
})

watch(() => state.companyRegisteApproveModal, (nval) => {
  if (!nval) {
    refreshAllTable()
  }
})

watch(() => state.addLabFormData.divideId, (nval) => {
  console.log('nva', nval)
  if (state.addLabFormData.roles === '6') {
    companySearch('')
  }
})
watch(() => state.addLabFormData.roles, (nval) => {
  if (nval === '6') {
    state.addLabFormData.divideId = '1'
    companySearch('')
  }
})
const addLab = async () => {
  state.addLabModal = true
  nextTick(() => {
    addLabFormRef.value?.resetFields()
  })
  state.addLabFormData = {
    divideId: state.selectedKeys.length ? state.selectedKeys[0] as string : myDivideId,
    name: '',
    password: '',
    repeatPassword: '',
    // roles: roleOptions.value.length ? roleOptions.value[0].value : null,
    roles: null,
    username: '',
    phone: '',
    status: 0,
    parentId: null
  }
  const pageRes = await getAllOrgByTypePage({
    divideId: state.addLabFormData.divideId || '',
    type: 'COM'
  })
  state.orgOptions = pageRes.data || []
  state.addLabModalTitle = '添加用户'
  state.addLabMode = AddLabModeEnum.Add
  console.log(state.treeData, 'tree')
}
const editLab = async (row) => {
  console.log(state.treeData, 'tree')
  state.addLabFormData = { ...row, phone: row.extData2, roles: row.roleId }
  // state.addLabFormData.divideId = row.divideId
  // state.addLabFormData.name = row.name
  // state.addLabFormData.parentId = row.parentId
  // state.addLabFormData.phone = row.extData2
  // state.addLabFormData.roles = row.roleId
  // state.addLabFormData.status = row.status
  // state.addLabFormData.username = row.username
  const pageRes = await getAllOrgByTypePage({
    divideId: state.addLabFormData.divideId || '',
    type: 'COM'
  })
  state.orgOptions = pageRes.data || []
  console.log('row', row)
  state.addLabModal = true
  state.addLabModalTitle = '修改用户'
  state.addLabMode = AddLabModeEnum.Edit
}
const addLabCancel = () => {
  state.addLabModal = false
}
const addLabReset = () => {
  addLabFormRef.value?.resetFields()
}
const addLabOk = async () => {
  try {
    await addLabFormRef.value?.validate()
    // req w
    if (state.addLabMode === AddLabModeEnum.Add) {
      const data = {
        ...state.addLabFormData,
        encodePassword: ''
      }
      if (data.roles === '6') {
        data.divideId = state.addLabFormData.parentId
      }
      Reflect.deleteProperty(data, 'password')
      Reflect.deleteProperty(data, 'repeatPassword')
      const encodedPassword = jsencrypt.encrypt(state.addLabFormData.password)
      if (encodedPassword) {
        data.encodePassword = encodedPassword
        const res = await createUser(data)
        if (res.success && res.code === 200) {
          message.success('添加成功')
          refreshAllTable()
          state.addLabModal = false
        }
      } else {
        message.error('加密失败')
      }
    } else if (state.addLabMode === AddLabModeEnum.Edit) {
      const data = {
        id: state.addLabFormData.id,
        divideId: state.addLabFormData.divideId,
        phone: state.addLabFormData.phone,
        name: state.addLabFormData.name,
        username: state.addLabFormData.username,
        roles: state.addLabFormData.roles,
        status: state.addLabFormData.status,
      }
      if (data.roles === '6') {
        // Reflect.deleteProperty(data, 'divideId')
        data.divideId = state.addLabFormData.parentId
      }
      const res = await editUser(data)
      if (res.success && res.code === 200) {
        message.success('修改成功')
        refreshAllTable()
        state.addLabModal = false
      }
      console.log(state.addLabFormData, 'state.addLabFormData')
    }
  } catch (error) {

  }
}

const cancelAccountConfirm = async (row) => {
  const data = {
    id: row.id,
    username: row.username,
    status: -1,
  }
  const res = await editUser(data)
  if (res.success && res.code === 200) {
    message.success('注销成功')
    refreshAllTable()
  }
}

const resetPasswordFormRef = ref<FormInstance>()
const resetPassword = (row) => {
  state.resetPasswordModal = true
  state.resetPasswordFormData = { ...row }
  resetPasswordFormRef.value?.resetFields()
}
const resetPasswordModalOk = async () => {
  try {
    await resetPasswordFormRef.value?.validate()
    // TODO
    console.log(state.resetPasswordFormData, 'data')
    const encodePassword = jsencrypt.encrypt(state.resetPasswordFormData.password)
    const data = {
      id: state.resetPasswordFormData.id,
      username: state.resetPasswordFormData.username,
      encodePassword,
    }
    const res = await editUser(data)
    if (res.success && res.code === 200) {
      message.success('修改成功')
      state.resetPasswordModal = false
    }
  } catch (error) {

  }
}

// const setDirectlyCompany = () => {
//   const records = subCompanySupertable.value?.getCheckboxRecords()
//   console.log('设为委直属单位', records)
// }
const treeState = reactive({
  modalTitle: '',
  mode: 'add',
  treeOperateModal: false,
  formData: {
    id: '',
    name: '',
    code: ''
  },
  rules: {
    name: [{ required: true, message: '请输入名称', trigger: 'blur' }],
    code: [{ required: true, message: '请输入编码', trigger: 'blur' }],
  }
})
const treeNodeAdd = (e: PointerEvent) => {
  e.stopPropagation()
  treeState.modalTitle = '添加下级行政区划'
  treeState.mode = 'add'
  treeState.formData = {
    id: '',
    name: '',
    code: ''
  }
  treeState.treeOperateModal = true
}
const treeNodeEdit = (e: PointerEvent) => {
  e.stopPropagation()
  treeState.modalTitle = '编辑行政区划'
  treeState.mode = 'edit'
  treeState.formData = state.selectedNodes[0] ? { ...state.selectedNodes[0] } : {}
  treeState.treeOperateModal = true
}
const treeNodeDelete = (e: PointerEvent) => {
  e.stopPropagation()
  Modal.confirm({
    title: '您确定删除该行政区划吗？',
    icon: createVNode(ExclamationCircleOutlined),
    content: '该操作不可逆',
    async onOk() {
      console.log('OK');
      if (state.selectedNodes[0] && state.selectedNodes[0].id) {
        await deleteDivide(state.selectedNodes[0].id)
        message.success('删除成功')
        getTreeData()
      }
    },
    onCancel() {
      console.log('Cancel');
    },
  });
}
const treeStateFormRef = ref<FormInstance>()
const treeModalOk = async () => {
  try {
    await treeStateFormRef.value?.validate()
    console.log(treeState.formData, 'formdata', state.selectedNodes[0])
    // req
    console.log(treeState.mode, 'mode')
    if (treeState.mode === 'add') {
      const data = {
        code: treeState.formData.code,
        name: treeState.formData.name,
        fullName: treeState.formData.name,
        level: state.selectedNodes[0].level + 1,
        parentId: state.selectedNodes[0].id,
        status: 1
      }
      await postDivide(data)
      message.success('添加成功')
      getTreeData()
    } else if (treeState.mode === 'edit') {
      const data = {
        id: treeState.formData.id,
        code: treeState.formData.code,
        name: treeState.formData.name,
        fullName: treeState.formData.name,
      }
      await putDivide(data)
      state.selectedKeys = []
      getTreeData()
    }
    treeState.treeOperateModal = false
  } catch (error) {

  }
}

const getTreeData = async () => {
  const res = await getMyDivides()
  // state.treeData = res // 直接将结果赋值给treeData
  const funcs = (list: any[]) => {
    try {
      list.forEach(i => {
        if (i.id === myDivideId) {
          state.treeData = [i]
          state.expandedKeys = [i.id]
          throw new Error("finded");
        }
        if (i.children && i.children.length) {
          funcs(i.children)
        }
      })
    } catch (error) {
      console.log('error', error)
      return
    }
  }
  funcs(res)
}
// !isCounty.value && 
getTreeData()

const getWaitApproveCount = async () => {
  const res = await getWaitAudit({
    pageNum: 1,
    pageSize: 10,
  })
  state.waitApproveCount = res.total
}
getWaitApproveCount()
const updateWaitAuditCount = (e) => {
  state.waitApproveCount = e
}
</script>
<style lang="less" scoped>
.content-right-tree {
  // width: 200px;
  padding: 9px 16px 10px;
  background-color: #fff;
  height: calc(100vh - 140px);

  &-title {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
  }

  &-search {
    margin-bottom: 10px;
  }
}

.content-left-table {
  background-color: #fff;

  &-title {
    font-size: 16px;
    font-weight: bold;
    display: inline-block;
    margin: 8px 20px 8px 0;
  }

  :deep(.ant-tabs-nav) {
    padding-left: 24px;
  }
}
</style>
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';


const routes: Array<RouteRecordRaw> = [
  {
    path: '/cityRecordLicense',
    name: 'cityRecordLicense',
    meta: {
      title: '备案证书',
      icon: 'icon-license',
    },
    component: () =>
      import(
        /* webpackChunkName: "cityRecordLicense" */ '@/modules/cityOrg/pages/cityRecordLicense/index.vue'
      ),
  },
  {
    path: '/cityRecordLicenseDetail',
    name: 'cityRecordLicenseDetail',
    meta: {
      title: '备案证书',
      icon: 'icon-license',
      hideInMenu: true,
      activeMenu: 'cityRecordLicense'
    },
    component: () =>
      import(
        /* webpackChunkName: "cityRecordLicenseDetail" */ '@/modules/cityOrg/pages/cityRecordLicenseDetail/index.vue'
      ),
  },
  {
    path: '/cityInfoPublish',
    name: 'cityInfoPublish',
    meta: {
      title: '信息发布',
      icon: 'icon-ic-published',
      keepAlive: true
    },
    component: () =>
      import(
        /* webpackChunkName: "cityInfoPublish" */ '@/modules/cityOrg/pages/cityInfoPublish/index.vue'
      ),
  },
  {
    path: '/cityInfoPublishDetail',
    name: 'cityInfoPublishDetail',
    meta: {
      title: '信息发布详情',
      icon: 'icon-ic-published',
      hideInMenu: true,
      activeMenu: 'cityInfoPublish'
    },
    component: () =>
      import(
        /* webpackChunkName: "cityInfoPublishDetail" */ '@/modules/cityOrg/pages/cityInfoPublishDetail/index.vue'
      ),
  },
  {
    path: '/cityLabActivity',
    name: 'cityLabActivity',
    meta: {
      title: '实验室活动',
      icon: 'icon-flag',
      keepAlive: true
    },
    component: () =>
      import(
        /* webpackChunkName: "cityLabActivity" */ '@/modules/cityOrg/pages/cityLabActivity/index.vue'
      ),
  },
  {
    path: '/cityLabActivityDetail',
    name: 'cityLabActivityDetail',
    meta: {
      title: '实验室活动详情',
      icon: 'icon-flag',
      hideInMenu: true,
      activeMenu: 'cityLabActivity'
    },
    props: {
      isOrg: true
    },
    component: () =>
      import(
        /* webpackChunkName: "cityLabActivity" */ '@/modules/lab/pages/labActivityRecordAdd/index.vue'
      ),
  },
  {
    // statistics
    path: '/cityStatistics',
    name: 'cityStatistics',
    meta: {
      title: '信息统计',
      icon: 'icon-statistic-2',
    },
    component: RouterView,
    children: [
      {
        path: '/cityCompanyStatistics',
        name: 'cityCompanyStatistics',
        meta: {
          title: '单位信息',
          icon: 'icon-company',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityCompanyStatistics" */ '@/modules/cityOrg/pages/cityCompanyStatistics/index.vue'
          ),
      },
      {
        path: '/cityLabStatistics',
        name: 'cityLabStatistics',
        meta: {
          title: '实验室信息',
          icon: 'icon-lab',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityLabStatistics" */ '@/modules/cityOrg/pages/cityLabStatistics/index.vue'
          ),
      },
      {
        path: '/cityDeviceStatistics',
        name: 'cityDeviceStatistics',
        meta: {
          title: '设备信息',
          icon: 'icon-devices',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityDeviceStatistics" */ '@/modules/cityOrg/pages/cityDeviceStatistics/index.vue'
          ),
      },
      {
        path: '/cityPersonStatistics',
        name: 'cityPersonStatistics',
        meta: {
          title: '人员信息',
          icon: 'icon-people1',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityPersonStatistics" */ '@/modules/cityOrg/pages/cityPersonStatistics/index.vue'
          ),
      },
    ],
  },
  {
    path: '/cityUserManagement',
    name: 'cityUserManagement',
    meta: {
      title: '用户管理',
      icon: 'icon-user',
    },
    props: {
      isProvince: false
    },
    component: () =>
      import(
        /* webpackChunkName: "cityUserManagement" */ '@/modules/cityOrg/pages/cityUserManagement/index.vue'
      ),
  },
];

export default routes;import { request, BaseResponse } from '@/framework/utils/request';

//文章-获取文章分页列表   
export function getArticleList(data: any) {
  return request({
    url: '/cms/archives/list',
    method: 'get',
    params: data
  });
}

//文章-添加文章
export function addArticleItem(data: any) {
  return request({
    url: '/cms/archives/add',
    method: 'post',
    data,
  });
}

// 修改文章
export const putArticle = (data) => {
  return request({
    url: '/cms/archives/' + data.id,
    method: 'put',
    data,
  })
}

export const getArticleById = (id) => {
  return request({
    url: '/cms/archives/' + id,
    method: 'get',
  })
}

//文章-删除文章 
export function deleteArchives(id) {
  return request({
    url: '/cms/archives/delete',
    method: 'delete',
    params: id
  });
}

//文章-添加文章页面 cms/archives/delete
export function addArticlePage(data: any) {
  return request({
    url: '/cms/archives/toAdd',
    method: 'get',
    params: data
  });
}
import { request, BaseResponse } from '@/framework/utils/request';

// 栏目分页列表
export function getCategory(data: API.getListParams) {
  return request({
    url: '/cms/category/page',
    method: 'get',
    params: data
  });
}

export function getCategorylist(data) {
  return request({
    url: '/cms/category/list',
    method: 'get',
    params: data
  });
}

// 栏目分页列表 -删除
export function deleteCategory(id: API.getLdParams) {
  return request({
    url: '/cms/category/delete',
    method: 'delete',
    params: id
  });
}

//栏目分页列表- 加载下级栏目
export function getSonCategory(id: API.getLdParams) {
  return request({
    url: '/cms/category/loadSon',
    method: 'get',
    params: id
  });
}

//栏目分页列表- 新增栏目

export function addCategory(data: any) {
  return request({
    url: '/cms/category/add',
    method: 'post',
    data,
  });
}

//栏目分页列表- 上传文件
// export function imgGoTop(data: any) {
//   return request({
//     url: '/cms/upload/uploadFile',
//     method: 'post',
//     data,
//     headers: {
//       'Content-Type': 'application/json;charset=UTF-8'
//     }
//   });
// }

// 栏目分页列表- 修改栏目页面  
export function getEditItem(id: API.getLdParams) {
  return request({
    url: '/cms/category/toEdit',
    method: 'get',
    params: id
  });
}

//栏目分页列表 修改栏目
// export function editList(data: any) {
//   return request({
//     url: '/cms/category/edit',
//     method: 'post',
//     data,
//   });
// }

// 栏目分页列表- 修改  
export function editCategory(data: any) {
  return request({
    url: '/cms/category/edit',
    method: 'post',
    data,
  });
}

  //栏目分页列表 添加下级栏目  cms/category/add



  // 栏目分页列表- 排序
  //  export function getSonCategory() {
  //   return request({
  //     url: '/cms/category/updateSort/',
  //     method: 'get',
  //     params: id
  //   });
  // }


import { request, BaseResponse } from '@/framework/utils/request';

// 表单分类列表
export function getEnclosure(data: any) {
  return request({
    url: '/cms/attachment',
    method: 'get',
    params: data
  });
}

//附件管理-添加 
export function addEnclosure(data: any) {
  return request({
    url: '/cms/attachment/add',
    method: 'post',
    data,
  });
}

// 附件管理 -删除 
export function deleteEnclosure(id) {
  return request({
    url: '/cms/attachment/delete/',
    method: 'delete',
    params: id
  });
}


// 附件管理 -下载预览
export function previewEnclosure(data: any) {
  return request({
    url: '/cms/attachment/download',
    method: 'get',
    params: data,
    responseType: 'blob'//用于读取转换
  })
}



import { request, BaseResponse } from '@/framework/utils/request';



//字段-添加字段
export function addField(data: any) {
  return request({
    url: '/cms/field/add',
    method: 'post',
    data,
  });
}

//字段-删除字段
export function delField(id) {
  return request({
    url: '/cms/field/delete',
    method: 'delete',
    params: id
  });
}

//字段-编辑字段
export function editField(data: any) {
  return request({
    url: '/cms/field/edit',
    method: 'post',
    data,
  });
}

//字段-修改字段页面
export function editFieldPage(data: any) {
  return request({
    url: '/cms/field/toEdit',
    method: 'get',
    params: data
  });
}


import { request, BaseResponse } from '@/framework/utils/request';

// 表单分类列表-分页
export function getForm(data: any) {
  return request({
    url: '/cms/forms/page',
    method: 'get',
    params: data
  });
}

// 表单分类列表-list 所有
export function getFormlist(data: any) {
  return request({
    url: '/cms/forms/list',
    method: 'get',
    params: data
  });
}

//  表单模型-删除
export function deleteForm(id) {
  return request({
    url: '/cms/forms/delete/',
    method: 'delete',
    params: id
  });
}


//  表单模型-新增
export function addForms(data: any) {
  return request({
    url: '/cms/forms/add',
    method: 'post',
    data,
  });
}

//表单模型-编辑 回显 cms/forms/toEdit
export function editItem(data: any) {
  return request({
    url: '/cms/forms/toEdit/',
    method: 'get',
    params: data
  });
}


//表单模型-确认编辑
export function editForm(data: any) {
  return request({
    url: '/cms/forms/edit',
    method: 'post',
    data,
  });
}declare namespace API {
  //category
  type getListParams = {
    pageSize: number;
    pageNum: number;
    entity?: any;
  };
  type getLdParams = {
    id: string;
  };
  type categoryListType = {
    code: string;
    createBy: string;
    createTime: string;
    ext01: string | null;
    ext02: string | null;
    ext03: string | null;
    ext04: string | null;
    ext05: string | null;
    formName: string;
    id: string;
    tableName: string;
    type: number | string;
    updateBy: string | null;
    updateTime: string | null;
  };
  type categoryFormStateType = {
    cnname: string,
    enname: string,
    formId: string,//表单模型
    imagePath: string,
    level: any,
    linkTarget: string | number,//跳转方式
    pageSize: number,//分页大小
    description: string,//栏目描述
    editorValue: string,//栏目内容
    htmlContent: string,
    isShow: string | number,//显示隐藏
    isInput: string | number,//是否允许投稿
    catModel: string | number,//栏目模型
    visitUrl: string,//访问地址
    coverTemp: string,//封面模板
    listTemp: string,//列表模板
    articleTemp: string,//内容页模板
    linkUrl: string,//链接地址
    ext01: string,
    ext02: string,
    ext03: string,
    ext04: string,
    ext05: string,
    parentId: string,
  };



}
import { DictConfig } from "@/framework/core/dict/types";

const dict: Record<string, DictConfig> = { 
  formType: {
    data: [
      { name: '自定义表单', value: 1 },
      { name: '系统表单', value: 2 }
    ]
  },
  InfoPublishStatus: {
    data: [
      { name: '草稿', value: 0 },
      { name: '待审核', value: 1 },
      { name: '已发布', value: 2 },
      { name: '已退回', value: 3 }
    ]
  },
  ArticleType: {
    data: [
      {
        name: '文章',
        label: '文章',
        value: '1',
      },
      {
        name: '课件',
        label: '课件',
        value: '2',
      },
      {
        name: '网址',
        label: '网址',
        value: '3',
      },
      {
        name: '视频',
        label: '视频',
        value: '4',
      }
    ],
    props: {
      name: 'label',
      value: 'value'
    }
  },
  
}

export default dict
export default {
  demo: {
    demo: "Demo",
    button: "Button Extension",
    modal: "Draggable Modal",
    form: {
      demo: "Form Demo",
      basic: "Basic Form",
      rule: "Rule Form"
    },
    table: {
      demo: "Table Demo",
      searchTable: "Search Table",
      wzry: "Honor of Kings",
      lol: "League of Legends"
    },
    icon: "Custom Icon"
  }
};
export default {
  cms: {
    title:'CMS',
    label: '标签管理',
    column:'栏目管理',
    article:'文章管理',
    enclosure:'附件管理',
    formmodel:'表单模型'
  }
};


<template>
  <div>
    <Card>
      <a-form :model="formState" name="basic" layout="vertical" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }"
        autocomplete="off" @finish="onFinish" @finishFailed="onFinishFailed">
        <a-form-item label="文章标题：" name="title" :rules="[{ required: true, message: '请输入文章标题!' }]">
          <a-input v-model:value="formState.title" />
        </a-form-item>
        <a-form-item label="权重：" name="weight" class="eleBox" :rules="[{ required: true, message: '请输入权重：!' }]">
          <a-input v-model:value="formState.weight" />
        </a-form-item>
        <a-form-item label="点击：" name="clicks" class="eleBox" :rules="[{ required: true, message: '请输入点击!' }]">
          <a-input v-model:value="formState.clicks" />
        </a-form-item>
        <a-form-item label="自定义属性">
          <a-checkbox-group v-model:value="formState.properties">
            <a-checkbox value="h" name="type">头条[h]</a-checkbox>
            <a-checkbox value="b" name="type">加粗[b]</a-checkbox>
            <a-checkbox value="f" name="type">幻灯[f]</a-checkbox>
            <a-checkbox value="p" name="type">图片[p]</a-checkbox>
          </a-checkbox-group>
        </a-form-item>
        <div class="imgBox">
          <span>缩略图：</span>
          <div>
            <img v-if="imageUrl" :src="imageUrl" class="fileImg" alt="" />
            <!-- <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/cms/upload/uploadFile'" -->
            <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/file'"
              :headers="headers" @change="handleChange">
              <a-button>
                选择文件...
              </a-button>
            </Upload>
          </div>
        </div>
        <a-form-item class="eleBox" name="categoryId" label="所属栏目" has-feedback
          :rules="[{ required: true, message: '请输入选择表单模型!' }]">
          <a-select v-model:value="formState.categoryId" placeholder="Please select a country" @change="eleOnchen">
            <a-select-option :value="item.id" v-for="item in forList">{{ item.cnname }}</a-select-option>
          </a-select>
        </a-form-item>
        <a-form-item label="标签：" name="tag" :rules="[{ required: true, message: '请输入点击!' }]">
          <a-input v-model:value="formState.tag" />
        </a-form-item>
        <a-form-item label="内容摘要：" name="description" :rules="[{ required: true, message: '请输入栏目描述!' }]">
          <a-textarea v-model:value="formState.description" />
        </a-form-item>
        <!-- 动态的字段部分 -->
        <liveField :key="liveKey"></liveField>
        <div class="ck-editor-container">
          <span>栏目内容：</span>
          <ckeditor :editor="editor" v-model="formState.editorValue" :config="editorConfig" />
          {{ formState.editorValue }}
        </div>
        <div>
          <span class="readiSp">允许评论:</span>
          <a-radio-group v-model:value="formState.comment">
            <a-radio value=0 class="radioItem">是</a-radio>
            <a-radio value=1 class="radioItem">否</a-radio>
          </a-radio-group>
        </div>
        <div>
          <span class="readiSp">允许订阅:</span>
          <a-radio-group v-model:value="formState.subscribe">
            <a-radio value=0 class="radioItem">是</a-radio>
            <a-radio value=1 class="radioItem">否</a-radio>
          </a-radio-group>
        </div>

        <div class="appearFooterBtn">
          <a-button type="primary" html-type="submit">确认{{ title }}</a-button>
        </div>
      </a-form>
    </Card>
  </div>
</template>
<script setup lang="ts">
import config from '@/config';
import { useRoute } from "vue-router";
import { useCms } from '@/store/modules/cms';
import { ref, reactive, onMounted } from 'vue';
import { addArticleItem } from '@/modules/cms/api/article';
import { getCategorylist, } from '@/modules/cms/api/column';
import { message, Upload, Card } from 'ant-design-vue';
import Editor from 'ckeditor5-custom-build/build/ckeditor';
import liveField from '@/modules/cms/pages/articleManagement/components/liveField.vue';

let forList: any = ref([]);
let route = useRoute();
let liveKey = ref(0)
const title = route.params.title;
const storeCms = useCms();



onMounted(async () => {
  let params = {
    pageSize: 100,
    pageNum: 1,
  }

  let res = await getCategorylist(params);
  forList.value = res.list;

})

//上传图片
const imageUrl = ref('');
const fileList = ref([]);
function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro
let headers = {
  authorization: 'authorization-text',
}
const handleChange = info => {
  if (info.file.status !== 'uploading') {
    formState.imagePath = info.file.response.data.filepath;
    console.log(info.file.response, 'img')
  }
  if (info.file.status === 'done') {

    getBase64(info.file.originFileObj, base64Url => {
      console.log(info.file.originFileObj, 'originFileObj')
      imageUrl.value = base64Url;
    });
    message.success(`${info.file.name}上传成功`);
  } else if (info.file.status === 'error') {
    message.error(`${info.file.name} file upload failed.`);
  }
};

//栏目内容
let editor = ref(Editor);
let editorConfig = reactive({
  // The configuration of the editor.
});

//表单数据
let formState = reactive<any>({
  title: '',//文章标题：
  weight: 0,//权重：
  clicks: 0,//点击：
  properties: [],//自定义属性
  categoryId: '',
  categoryIds: '',
  categoryCnName: '',
  categoryEnName: '',
  imagePath: '',
  tag: '',//标签
  description: '',//内容摘要
  editorValue: '',
  content: '',
  comment: '0',//评论
  subscribe: '0',//订阅
})

//下拉 选择栏目
let eleOnchen = (va) => {
  console.log('下拉下了雪')
  forList.value.forEach((item) => {
    if (item.id == va) {
      formState.categoryIds = item.catSeq
      formState.categoryCnName = item.cnname
      formState.categoryEnName = item.enname
      // storeCms.codeSon = item.code
      storeCms.setCodeSon(item.code)
    }
  })
  liveKey.value = new Date().getTime()
}

//提交表单
const onFinish = async () => {
  const data = {
    ...formState,
    content: formState.editorValue,
    subscribe: parseInt(formState.subscribe),
    clicks: parseInt(formState.clicks),
    weight: parseInt(formState.weight),
    comment: parseInt(formState.comment),
    properties: formState.properties.join(',')
  }
  if (title == '新增') {
    console.log('新增')
    try {
      let res = await addArticleItem(data);
      console.log(res, 'res')
      if (res) message.success('新增成功')

    } catch (error) {
      message.error('error')
    }
  }
}
//提交失败
const onFinishFailed = () => {

}
</script>

<style scoped lang="less">
.eleBox {
  width: 400px
}

.fileImg {
  width: 200px;
  height: 200px
}

.imgBox {
  margin: 20px 0;
}

.readiSp {
  width: 100px;
  margin: 5px;
  display: inline-block;
}

// ck-content  .ck-editor__editable_inline
.ck-editor-container:deep(.ck-content) {
  min-height: 500px !important;
}
</style><template>
  <div>
    <Card title="信息发布">
      <template #extra>
        <Space>
          <template v-if="isEdit">
            <Popconfirm @confirm="onFinish(false)" title="您确定保存吗？">
              <a-button type="blue-white">
                <template #icon>
                  <BtnSvgIcon class="icon-btn" prefix="icon" name="baocun"></BtnSvgIcon>
                </template>
                保存
              </a-button>
            </Popconfirm>
            <Popconfirm @confirm="onFinish(true)" :title="`您确定${needApprove ? '提交' : '发布'}吗？`">
              <a-button type="blue-white">
                <template #icon>
                  <BtnSvgIcon class="icon-btn" prefix="icon" name="tijiao"></BtnSvgIcon>
                </template>
                {{ needApprove ? '提交' : '发布' }}
              </a-button>
            </Popconfirm>
          </template>
          <template v-if="isApprove">
            <Popconfirm @confirm="approveBtn(2)" title="您确定审批通过吗？">
              <a-button type="blue-white">
                <template #icon>
                  <BtnSvgIcon class="icon-btn" prefix="icon" name="tongguo"></BtnSvgIcon>
                </template>
                通过
              </a-button>
            </Popconfirm>
            <Popconfirm @confirm="approveBtn(3)" title="您确定退回吗？">
              <a-button type="blue-white">
                <template #icon>
                  <BtnSvgIcon class="icon-btn" prefix="icon" name="fanhui"></BtnSvgIcon>
                </template>
                退回
              </a-button>
            </Popconfirm>
          </template>
          <a-button type="white-blue" @click="backEvent">
            <template #icon>
              <BtnSvgIcon class="icon-btn" prefix="icon" name="fanhui"></BtnSvgIcon>
            </template>
            返回
          </a-button>
        </Space>
      </template>
      <a-form :model="formState" name="basic" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }" autocomplete="off">
        <a-row>
          <a-col span="12">
            <a-form-item label="标题：" name="title" :rules="[{ required: true, message: '请输入文章标题' }]">
              <a-input v-model:value="formState.title" :disabled="!isEdit"/>
            </a-form-item>
            <a-form-item label="类型" name="type" :rules="[{ required: true, message: '请选择类型' }]">
              <a-select v-model:value="formState.type" :options="$dict.get('ArticleType')" :disabled="!isEdit"></a-select>
            </a-form-item>
            <a-form-item name="categoryId" label="发布栏目"
              :rules="[{ required: true, message: '请选择发布栏目' }]">
              <!-- <a-select v-model:value="formState.categoryId" @change="categoryChange" :disabled="!isEdit">
                <a-select-option :value="item.id" v-for="item in forList">{{ item.cnname }}</a-select-option>
              </a-select> -->
              <TreeSelect
                v-model:value="formState.categoryId"
                @change="categoryChange"
                :disabled="!isEdit"
                :tree-data="forList"
                :field-names="{label:'cnname', value: 'id', children: 'children'}">
              </TreeSelect>
            </a-form-item>
            <a-form-item name="imagePath" label="导读图上传">
              <div>
                <img v-if="imageUrl" :src="imageUrl" class="fileImg" alt="" />
                <!-- <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/cms/upload/uploadFile'" -->
                <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/file/'"
                  :headers="headers" @change="handleChange" :max-count="1" :disabled="!isEdit" @remove="removeImg"
                  :beforeUpload="beforeUpload">
                  <a-button :disabled="!isEdit">
                    选择文件...
                  </a-button>
                </Upload>
              </div>
            </a-form-item>
            <a-form-item label="正文：" name="editorValue">
              <div class="ck-editor-container">
                <ckeditor :editor="editor" v-model="formState.editorValue" :config="editorConfig" :disabled="!isEdit" />
              </div>
            </a-form-item>
            <a-form-item label="附件">
              <custom-upload :is-edit="isEdit" v-model:fileData="formState.fileList" :is-one="false"></custom-upload>
            </a-form-item>
          </a-col>
        </a-row>
        
        <!-- 动态的字段部分 -->
        <!-- <liveField :key="liveKey"></liveField> -->
      </a-form>
    </Card>
  </div>
</template>
<script setup lang="ts">
import config from '@/config';
import { useRoute } from "vue-router";
import { useCms } from '@/store/modules/cms';
import { ref, reactive, onMounted } from 'vue';
import { message, Upload, Card, Space, Popconfirm, TreeSelect } from 'ant-design-vue';
import { useRouter } from 'vue-router';
import Editor from 'ckeditor5-custom-build/build/ckeditor';
import liveField from '@/modules/cms/pages/articleManagement/components/liveField.vue';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue'
import { addArticleItem, putArticle, getArticleById } from '@/modules/cms/api/article';
import { getCategorylist, } from '@/modules/cms/api/column';
import CustomUpload from '@/components/upload/index.vue'
import { approveArticle } from '@/modules/infoManagement/api/org'
import { useUserStore } from '@/store/modules/user'

const props = defineProps({
  needApprove: {
    type: Boolean,
    default: true,
  }
})
const userStore = useUserStore()
let forList: any = ref([]);
let route = useRoute();
let liveKey = ref(0)
const title = route.query.title;
const id = route.query.id
const isApprove = route.query.approve == '1'
const getArticleInfo = async () => {
  const res = await getArticleById(id)
  console.log('res', res)
  formState.editorValue = res.正文
  formState.categoryId = res.categoryId
  formState.title = res.title
  formState.type = res.类型
  formState.imageMd5 = res.导读图上传
  imageUrl.value = location.origin + baseUrl + '/file/md5/' + formState.imageMd5
  formState.fileList = res.附件对象集合 ? JSON.parse(res.附件对象集合) : []
  formState.title = res.title
  formState.title = res.title

}
if (id) {
  getArticleInfo()
}
const isEdit = ref(title !== '3')
const storeCms = useCms();
const router = useRouter()

const arrToTree = (
  arr,
  parentId = '-1',
  { idName = 'id', parentIdName = 'parentId', childrenName = 'children' } = {},
) => {
  return arr.reduce((pre, cur) => {
    if (cur[parentIdName] === parentId) {
      const children = arrToTree(arr, cur[idName]);
      if (children?.length) {
        cur[childrenName] = children;
      }
      return [...pre, cur];
    }
    return pre;
  }, []);
};

onMounted(async () => {
  let res = await getCategorylist({
    orderBy: [{
      field: 'sort',
      order: 'asc'
    }]
  });
  // res.sort((a, b) => a.sort - b.sort)
  const treeOptions = arrToTree(res)
  forList.value = treeOptions;
})

//上传图片
const imageUrl = ref('');
const fileList = ref([]);
function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro
let headers = {
  authorization: 'authorization-text',
}
const handleChange = info => {
  if (info.file.status !== 'uploading') {
  }
  if (info.file.status === 'done') {
    console.log(info.file.response, 'img')
    formState.imagePath = info.file.response.data.filepath;
    formState.imageMd5 = info.file.response.data.md5
    getBase64(info.file.originFileObj, base64Url => {
      console.log(info.file.originFileObj, 'originFileObj')
      imageUrl.value = base64Url;
    });
    message.success(`${info.file.name}上传成功`);
  } else if (info.file.status === 'error') {
    message.error(`${info.file.name} file upload failed.`);
  }
};

const removeImg = () => {
  imageUrl.value = ''
  formState.imageMd5 = ''
}
const beforeUpload = (e) => {
  if (e.type.includes('image')) {
    return true
  }
  message.error('请上传图片')
  return Upload.LIST_IGNORE
}
//栏目内容
let editor = ref(Editor);
let editorConfig = reactive({
  // The configuration of the editor.
});

//表单数据
let formState = reactive<any>({
  title: '',
  categoryId: '',
  categoryIds: '',
  categoryCnName: '',
  categoryEnName: '',
  imagePath: '',
  editorValue: '',
  fieldName: '',
  status: 0,
  fileList: []
})

//下拉 选择栏目
let categoryChange = (va) => {
  forList.value.forEach((item) => {
    if (item.id == va) {
      formState.categoryIds = item.catSeq
      formState.categoryCnName = item.cnname
      formState.categoryEnName = item.enname
      // storeCms.codeSon = item.code
      storeCms.setCodeSon(item.code)
    }
  })
  liveKey.value = new Date().getTime()
}

//提交表单
const onFinish = async (isPublish = false) => {
  // status 1 保存 2发布
  const data = {
    title: formState.title,
    categoryId: formState.categoryId,
    fields: {
      类型: formState.type,
      导读图上传: formState.imageMd5,
      正文: formState.editorValue,
      附件上传: formState.fileList?.map(i => i.md5).join(',') || '',
      附件对象集合: JSON.stringify(formState.fileList),
    },
    isApprove: props.needApprove,
    isPublish,
  }
  if (title == '1') {
    console.log('新增')
    try {
      await addArticleItem(data);
      message.success('新增成功')
      backEvent()
    } catch (error) {
      message.error('error')
    }
  } else if (title == '2') {
    data.id = id
    try {
      await putArticle(data);
      message.success('新增成功')
      backEvent()
    } catch (error) {
      message.error('error')
    }
  }
}

const approveBtn = async (approveState) => {
  if (approveState) {
    const res = await approveArticle({
      businessId: String(id),
      userId: userStore.organizationid,
      approveState,
    })
    backEvent()
  }
}
const backEvent = () => {
  router.go(-1)
}
</script>

<style scoped lang="less">
.eleBox {
  width: 400px
}

.fileImg {
  width: 200px;
  height: 200px
}



.readiSp {
  width: 100px;
  margin: 5px;
  display: inline-block;
}

.appearFooterBtn {
  padding: 10px 0 10px 200px
}

// ck-content  .ck-editor__editable_inline
.ck-editor-container:deep(.ck-content) {
  min-height: 300px !important;
  max-width: 1080px;
}

// ck ck-editor__top ck-reset_all
.ck-editor-container:deep(.ck-reset_all) {
  max-width: 1080px;
}
</style><template>
  <div>
    <a-form :model="formState" name="basic" layout="vertical" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }"
      autocomplete="off" @finish="onFinish" @finishFailed="onFinishFailed">
      <div v-for="item in list.arr">

        <!-- 文本域 -->
        <div v-if="item.dataType == 'textarea' ? true : false">
          <a-form-item :label="item.fieldName" name="description" :rules="[{ required: true, message: '请输入栏目描述!' }]">
            <a-textarea v-model:value="formState[item.fieldName]" />
          </a-form-item>
        </div>

        <!-- 单行文本 varchar char-->
        <div v-if="item.dataType == 'varchar' ? true : false">
          <div class="radioBox">
            <a-form-item :label="item.fieldName" name="varchar" class="eleBox"
              :rules="[{ required: true, message: '请输单行文本!' }]">
              <a-input v-model:value="formState[item.fieldName]" />
            </a-form-item>
          </div>
        </div>

        <div v-if="item.dataType == 'char' ? true : false">
          <div class="radioBox">
            <a-form-item :label="item.fieldName" name="varchar" class="eleBox"
              :rules="[{ required: true, message: '请输单行文本!' }]">
              <a-input v-model:value="formState[item.fieldName]" />
            </a-form-item>
          </div>
        </div>


      </div>
      <!-- 单选框 radio-->
      <div>
        <div class="radioBox" v-for="(it, index) in list.radioArr">
          <span class="readiSp">{{ it.fieldName }}:</span>
          <a-radio-group v-model:value="formState[it.fieldName]">
            <a-radio :value="item" class="radioItem" v-for="(item) in list.radioArr[index].defaultValue">{{
              item
            }}</a-radio>
          </a-radio-group>
        </div>
      </div>

      <!-- 下拉框 radio-->
      <div class="radioBox" v-for="(it, index) in list.selectArr">
        <a-form-item class="eleBox" name="catModel" :label="it.fieldName" has-feedback
          :rules="[{ required: true, message: '请输入选择!' }]">
          <a-select v-model:value="formState[it.fieldName]" placeholder="Please select a country">
            <a-select-option v-for="(item) in list.selectArr[index].defaultValue" :value="item">{{
              item
            }}</a-select-option>
          </a-select>
        </a-form-item>
      </div>

      <!-- 多选框 checkbox-->
      <div class="radioBox" v-for="(it, index) in list.checkboxArr">
        <a-form-item :label="it.fieldName">
          <a-checkbox-group v-model:value="formState[it.fieldName]">
            <a-checkbox :value="item" name="type" v-for="(item) in list.checkboxArr[index].defaultValue">{{
              item
            }}</a-checkbox>
          </a-checkbox-group>
        </a-form-item>
      </div>

    </a-form>
  </div>
</template>
<script setup lang="ts">
import { onMounted, reactive } from 'vue';
import { addArticlePage } from '@/modules/cms/api/article';
import { useCms } from '@/store/modules/cms';

const storeCms = useCms();
let list = reactive<any>({
  arr: [],
  radioArr: [],
  selectArr: [],
  checkboxArr: []
})
let formState = reactive<any>({

})

onMounted(async () => {
  //拿到动态字段数据
  let res = await addArticlePage({ code: storeCms.codeSon });
  list.arr = res.fields;
  list.arr.forEach((item) => {
    //单选框
    if (item.dataType == 'radio') {
      list.radioArr.push(item)
    }
    //下拉框 
    else if (item.dataType == 'select') {
      list.selectArr.push(item)
    }
    //多选框
    else if (item.dataType == 'checkbox') {
      list.checkboxArr.push(item)
    }
  })
  //转数组
  //单选框
  list.radioArr.forEach((it) => {
    it.defaultValue = it.defaultValue.split(',')
  })
  //下拉框
  list.selectArr.forEach((it) => {
    it.defaultValue = it.defaultValue.split(',')
  })
  //多选框
  list.checkboxArr.forEach((it) => {
    it.defaultValue = it.defaultValue.split(',')
  })
})



const onFinish = () => {

}

const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
};
</script>
<style scoped lang="less">
.readiSp {
  width: 100px;
  margin: 5px;
  display: inline-block;
}
</style><template>
  <!-- 表格部分 -->
  <SuperTable :columns="columns" :data-request="fetchData" :toolbar="{
    custom: true,
    export: true
  }" search pager align="center" border ref="superTableRef" :auto-load="false" :mode="1" search-btn-type="white-blue"
    :height="tableHeight"
  >
    <template #action>
      <a-button type="blue-white" class="addBtn" @click="addArticle">发布文章</a-button>
    </template>
  </SuperTable>
</template>

<script setup lang="ts">
import {
  getArticleList,
  deleteArchives,
} from '@/modules/cms/api/article';
import { ref, onMounted, computed, onActivated, Ref, inject } from 'vue'
import SuperTable from '@/framework/components/core/super-table/super-table.vue';
import { baseColumns } from './columns';
import { useRouter } from "vue-router";
import { OrgType } from '@/modules/cms/types'
import { message } from 'ant-design-vue';
import { useUserStore } from '@/store/modules/user';
const userStore = useUserStore()
const tableHeight = inject<Ref<number>>('tableHeight')
let router = useRouter();
const superTableRef = ref<InstanceType<typeof SuperTable>>()
const props = defineProps({
  type: {
    type: Number as PropType<OrgType>,
    required: true
  }
})
props.type === OrgType.cityOrg
onMounted(async () => {

  // let res = await addArticlePage({ code: '4kavt647' });
  // console.log(res, '新增文章页面')
})


//新增
const detailRouterName = computed(() => {
  const map = {
    2: 'companyInfoPublishDetail',
    3: 'cityInfoPublishDetail',
    4: 'provinceInfoPublishDetail'
  }
  return map[props.type]
})
let addArticle = async () => {
  router.push({
    name: detailRouterName.value,
    query: {
      title: "1"
    }
  })
}

//请求数据 table
let fetchData = async (ori) => {
  const data = superTableRef.value?.getFormModel()
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    tableName: 'cms_article',
    createBy: userStore.organizationid,
    ...data
  }
  return await getArticleList(params)
}
let columns: any[] = [
  ...baseColumns,
  {
    title: '操作',
    width: 160,
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    actions: ({ row }) => [
      {
        label: '查看',
        ifShow: row.status !== 0,
        onClick: () => {
          router.push({
            name: detailRouterName.value,
            query: {
              title: "3",
              id: row.aid
            }
          })
        }
      },
      {
        label: '编辑',
        ifShow: row.status === 0,
        onClick: () => {
          router.push({
            name: detailRouterName.value,
            query: {
              title: "2",
              id: row.aid
            }
          })
        }
      },
      {
        label: '删除',
        ifShow: row.status === 0 || row.status === 3,
        popConfirm: {
          title: `您确定删除吗`,
          onConfirm: async () => {
            let res = await deleteArchives({ id: row.aid, cid: row.categoryId });
            console.log('删除成功');
            message.success('删除成功');
            // location.reload()
            superTableRef.value?.queryTable()
          },
        },
      },
    ]
  }
]

onActivated(() => {
  superTableRef.value?.queryTable()
})
</script>

<style scoped lang='less'>
.titleText {
  font-size: 36px;
  background: #fafafa;
  padding: 15px;
  box-sizing: border-box;
  margin-bottom: 15px;
}

.titleLen {
  height: 40px;
  background: #fff;
  padding-left: 15px;
  line-height: 40px;
}
</style><template>
  <div class="card-container">
    <a-form :model="formState" name="basic" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }" autocomplete="off"
      @finish="onFinish" @finishFailed="onFinishFailed">
      <a-tabs v-model:activeKey="activeKey" type="card">
        <a-tab-pane key="1" tab="基本设置" class="a-tab-pane">
          <a-row>
            <a-col span="12">
              <a-form-item label="栏目名称：" name="cnname" :rules="[{ required: true, message: '请输入栏目名称!' }]">
                <a-input v-model:value="formState.cnname" />
              </a-form-item>
              <a-form-item label="栏目英文名称：" name="enname" :rules="[{ required: true, message: '请输入栏目英文名称!' }]">
                <a-input v-model:value="formState.enname" />
              </a-form-item>
              <a-form-item label="分页大小：" name="pageSize" :rules="[{ required: true, message: '请输入分页!' }]">
                <a-input v-model:value="formState.pageSize" />
              </a-form-item>
              <a-form-item label="栏目描述：" name="description" :rules="[{ required: true, message: '请输入栏目描述!' }]">
                <a-textarea v-model:value="formState.description" />
              </a-form-item>
              <a-form-item name="imagePath" label="栏目图片：" has-feedback :rules="[{ message: '请输入选择上级栏目!' }]">
                <div>
                  <img v-if="imageUrl" :src="imageUrl" class="fileImg" alt="" />
                  <!-- <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/cms/upload/uploadFile'" -->
                  <Upload v-model:file-list="fileList" name="file" :action="baseUrl + '/file'"
                    :headers="headers" @change="handleChange">
                    <a-button>
                      选择文件...
                    </a-button>
                  </Upload>
                </div>
              </a-form-item>
              <a-form-item name="imagePath" label="栏目内容" has-feedback :rules="[{ message: '请输入选择上级栏目!' }]">
                <div class="ck-editor-container">
                  <ckeditor :editor="editor" v-model="formState.editorValue" :config="editorConfig" />
                  {{ formState.editorValue }}
                </div>
              </a-form-item>
              <a-form-item name="isShow" label="显示/隐藏" has-feedback>
                <div class="radioBox">
                  <a-radio-group v-model:value="formState.isShow">
                    <a-radio value=0 class="radioItem">隐藏</a-radio>
                    <a-radio value=1 class="radioItem">显示</a-radio>
                  </a-radio-group>
                </div>
              </a-form-item>
              <a-form-item name="isInput" label="是否允许投稿" has-feedback>
                <div class="radioBox">
                  <a-radio-group v-model:value="formState.isInput">
                    <a-radio value=0 class="radioItem">否</a-radio>
                    <a-radio value=1 class="radioItem">是</a-radio>
                  </a-radio-group>
                </div>
              </a-form-item>
            </a-col>
            <a-col span="12">
              <a-form-item class="eleBox" name="formId" label="表单模型：" has-feedback
                :rules="[{ required: true, message: '请输入选择表单模型!' }]">
                <a-select v-model:value="formState.formId" placeholder="Please select a country">
                  <a-select-option :value="item.id" v-for="item in forList">{{ item.formName }}|{{
                    item.code
                  }}</a-select-option>
                </a-select>
              </a-form-item>
              <a-form-item class="eleBox" name="linkTarget" label="跳转方式：" has-feedback :defaultActiveFirstOption="true"
                :rules="[{ required: true, message: '请输入选择跳转方式：!' }]">
                <a-select v-model:value="formState.linkTarget" placeholder="Please select a country">
                  <a-select-option value="0">当前页（_self）</a-select-option>
                  <a-select-option value="1">新标签页（_blank）</a-select-option>
                </a-select>
              </a-form-item>
              <a-form-item class="eleBox" name="formId" label="上级栏目" has-feedback :rules="[{ message: '请输入选择上级栏目!' }]">
                <a-select v-model:value="formState.level" placeholder="顶级栏目" disabled>
                  <a-select-option value="1" selected="selected">顶级栏目</a-select-option>
                </a-select>
              </a-form-item>
            </a-col>
          </a-row>
        </a-tab-pane>
        <a-tab-pane key="2" tab="模板管理" class="a-tab-pane">
          <a-row>
            <a-col span="12">
              <a-form-item name="catModel" label="栏目模型" has-feedback
                :rules="[{ required: true, message: '请输入选择栏目模型!' }]">
                <a-select v-model:value="formState.catModel" placeholder="Please select a country">
                  <a-select-option value=1>封面</a-select-option>
                  <a-select-option value=2>列表</a-select-option>
                  <a-select-option value=3>外部链接</a-select-option>
                </a-select>
              </a-form-item>
              <a-form-item label="访问地址:" name="visitUrl" :rules="[{ message: '请输入访问地址!' }]">
                <a-input v-model:value="formState.visitUrl" />
              </a-form-item>
              <a-form-item label="封面模版：" name="coverTemp" :rules="[{ message: '请输入封面模版!' }]">
                <a-input v-model:value="formState.coverTemp" />
              </a-form-item>
              <a-form-item label="列表模版：" name="listTemp" :rules="[{ message: '请输入列表模版!' }]">
                <a-input v-model:value="formState.listTemp" />
              </a-form-item>
              <a-form-item label="内容页模版：" name="articleTemp" :rules="[{ message: '请输入内容页模版!' }]">
                <a-input v-model:value="formState.articleTemp" />
              </a-form-item>
              <a-form-item label="链接地址：" name="linkUrl" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.linkUrl" />
              </a-form-item>
            </a-col>
          </a-row>
        </a-tab-pane>
        <a-tab-pane key="3" tab="扩展" class="a-tab-pane">

          <a-row>
            <a-col span="12">
              <a-form-item label="扩展字段1：" name="ext01" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.ext01" />
              </a-form-item>
              <a-form-item label="扩展字段2：" name="ext02" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.ext02" />
              </a-form-item>
              <a-form-item label="扩展字段3：" name="ext03" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.ext03" />
              </a-form-item>
              <a-form-item label="扩展字段4：" name="ext04" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.ext04" />
              </a-form-item>
              <a-form-item label="扩展字段5：" name="ext05" :rules="[{ message: '请输入链接地址!' }]">
                <a-input v-model:value="formState.ext05" />
              </a-form-item>
            </a-col>
          </a-row>
        </a-tab-pane>

      </a-tabs>
      <div class="appearFooterBtn">
        <a-button type="primary" html-type="submit">确认{{ title }}</a-button>
      </div>
    </a-form>
  </div>

</template>
<script setup lang="ts">
import config from '@/config'
import { ref, reactive, onMounted } from 'vue';
import { addCategory, editCategory } from '@/modules/cms/api/column';
import { getFormlist } from '@/modules/cms/api/form';
import { useRoute } from "vue-router";
import { message, Upload } from 'ant-design-vue';
import Editor from 'ckeditor5-custom-build/build/ckeditor';
import { ACCESS_TOKEN_KEY } from "@/framework/enums/cacheEnum";
import { Storage } from "@/framework/utils/Storage";
import router from '@/router';


const route = useRoute();
const title = route.params.title;
const rowItem: any = route.params.row;
const rowsubordinate: any = route.params.rowsubordinate;
let forList = ref<Array<API.categoryListType>>([]);

//上传图片
const imageUrl = ref('');
const fileList = ref([]);
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro
// 上传需要
const headers = {
  Authorization: Storage.get(ACCESS_TOKEN_KEY),
}


function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

//表单模型数据获取
onMounted(async () => {
  let params = {
    pageSize: 10,
    pageNum: 1,
  }
  let res = await getFormlist(params)
  forList.value = res;
  console.log(forList, 'res栏目获取变淡')
})

const handleChange = info => {
  if (info.file.status !== 'uploading') {
    formState.imagePath = info.file.response.data.filepath;
    console.log(info.file.response, 'img')
  }
  if (info.file.status === 'done') {

    getBase64(info.file.originFileObj, base64Url => {
      console.log(info.file.originFileObj, 'originFileObj')
      imageUrl.value = base64Url;
    });
    message.success(`${info.file.name}上传成功`);
  } else if (info.file.status === 'error') {
    message.error(`${info.file.name} file upload failed.`);
  }
};

//栏目内容
let editor = ref(Editor);
let editorConfig = reactive({
  // The configuration of the editor.
});

let activeKey = ref('1');
let formState = reactive<API.categoryFormStateType>({
  cnname: "",
  enname: "",
  formId: "",//表单模型
  imagePath: "",
  level: "1",
  linkTarget: "0",//跳转方式
  pageSize: 100,//分页大小
  description: "",//栏目描述
  editorValue: "",//栏目内容
  htmlContent: "",
  isShow: "0",//显示隐藏
  isInput: "0",//是否允许投稿
  catModel: "1",//栏目模型
  visitUrl: "",//访问地址
  coverTemp: "",//封面模板
  listTemp: "",//列表模板
  articleTemp: "",//内容页模板
  linkUrl: "",//链接地址
  ext01: "",
  ext02: "",
  ext03: "",
  ext04: "",
  ext05: "",
  parentId: ""
});


//编辑 回显
if (rowItem) {
  let all = Object.assign(formState, JSON.parse(rowItem))
  all.isShow = String(JSON.parse(rowItem).isShow)
  all.isInput = String(JSON.parse(rowItem).isInput)
  all.catModel = String(JSON.parse(rowItem).catModel)
  all.editorValue = String(JSON.parse(rowItem).htmlContent)
  // imageUrl.value = `http://192.168.131.184:46781/resources/upload/${all.imagePath}`
  imageUrl.value = `http://192.168.131.55:46781/resources/upload/${all.imagePath}`
  formState = all
}
//添加下级
else if (rowsubordinate) {
  formState.parentId = JSON.parse(rowsubordinate).id
  formState.level = JSON.parse(rowsubordinate).level * 1 + 1
}
const onFinish = async () => {

  let a = {
    "articleTemp": "",
    "catModel": 0,
    "catSeq": "",
    "childrenFlag": 0,
    "cnname": "",
    "code": "",
    "coverTemp": "",
    "createBy": "",
    "createTime": "2022-12-26T02:16:01.482Z",
    "defaultEditor": "ue",
    "description": "",
    "enname": "",
    "ext01": "",
    "ext02": "",
    "ext03": "",
    "ext04": "",
    "ext05": "",
    "formId": "",
    "htmlContent": "",
    "id": "",
    "imagePath": "",
    "isInput": 0,
    "isShow": 0,
    "level": "1",
    "linkTarget": "",
    "linkUrl": "",
    "listTemp": "",
    "mdContent": "",
    "nodes": [
      null
    ],
    "pageSize": 0,
    "parentId": "",
    "parentName": "",
    "sort": 0,
    "updateBy": "",
    "updateTime": "2022-12-26T02:16:01.482Z",
    "visitUrl": ""
  }
  formState.htmlContent = formState.editorValue;
  formState.isShow = parseInt(formState.isShow)
  formState.isInput = parseInt(formState.catModel)
  formState.catModel = parseInt(formState.catModel)

  let obj = Object.assign(a, formState)
  if (title == '新增') {
    obj.level = 1
    try {
      let res = await addCategory(obj);
      if (res) message.success('新增成功')

    } catch (error) {
      message.error('error')
    }
  }
  else if (title == '编辑') {
    try {
      let res = await editCategory(obj);
      if (res) message.success('编辑成功')
      router.go(-1)
    } catch (error) {
      message.error('error')
    }
  }
  else if (title == '添加下级栏目') {
    try {
      let res = await addCategory(obj);
      if (res) message.success('添加下级栏目成功')
    } catch (error) {
      message.error('error')
    }
  }

  console.log('Success:', formState);
};

const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
  message.error(`有必填项未填`);
};



</script>
<style scoped lang="less">
.a-tab-pane {
  background: #fff;
  margin-top: -16px;
  margin-left: 1px;
  height: auto;
  padding: 16px
}

.fileImg {
  width: 200px;
  height: 200px;
  margin-bottom: 10px;
}

.eleBox {
  width: 300px
}

.appearFooterBtn {
  padding: 10px 0 10px 200px;
  background: #fff;
}



.ck-editor-container:deep(.ck-content) {
  min-height: 300px !important;
  max-width: 1080px;
}

// ck ck-editor__top ck-reset_all
.ck-editor-container:deep(.ck-reset_all) {
  max-width: 1080px;
}
</style><template>
  <SuperTable ref="superTableRef" :columns="columns" :data-request="fetchData"
    :toolbar="{ custom: true, export: true }" :export-config="{}"
    :tree-config="{
      transform: true,
      rowField: 'id',
      parentField: 'parentId',
      lazy: true,
      hasChild: 'childrenFlag',
      loadMethod: fetchChildNodes,
    }" pager align="center" border search :edit-config="{ trigger: 'click', mode: 'cell' }" :mode="1"
    search-btn-type="white-blue">
    <template #action>
      <a-button type="blue-white" @click="addCategoryBtn">添加</a-button>
      <a-button type="white-blue">保存排序</a-button>
    </template>
  </SuperTable>
  <DraggableModal :title="state.modalTitle" v-model:visible="state.categoryModal" width="600px" destroy-on-close>
    <a-form :model="state.categoryFormData" :label-col="{ span: 6 }" :wrapper-col="{ span: 14 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="栏目名称" name="cnname">
        <a-input v-model:value="state.categoryFormData.cnname" placeholder="请输入栏目名称"></a-input>
      </a-form-item>
      <a-form-item label="上级栏目" name="parentId">
        <a-select v-model:value="state.categoryFormData.parentId" :options="state.categoryOptions" placeholder="请选择上级栏目"></a-select>
      </a-form-item>
      <a-form-item label="栏目类型" name="ext01">
        <a-select v-model:value="state.categoryFormData.ext01" :options="categoryTypeOptions" placeholder="请选择栏目类型"></a-select>
      </a-form-item>
      <a-form-item label="栏目排序" name="sort">
        <a-input v-model:value="state.categoryFormData.sort" type="number" :min="0" placeholder="请输入栏目排序"></a-input>
      </a-form-item>
    </a-form>
    <template #footer>
      <a-button type="white-blue" @click="state.categoryModal = false">取消</a-button>
      <a-button type="blue-white" @click="addCategoryOk">确定</a-button>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
import { ref, reactive, watch } from 'vue'
import { useRouter } from "vue-router";
import { baseColumns } from "./columns";
import { FormInstance, message } from 'ant-design-vue';
import SuperTable from "@/framework/components/core/super-table/super-table.vue";
import { TableColumn } from "@/framework/components/core/super-table";
import { deleteCategory, getCategory, getSonCategory, addCategory, editCategory, getCategorylist } from '@/modules/cms/api/column';
import { DraggableModal } from '@/framework/components/core/draggable-modal';

let router = useRouter();
let superTableRef = ref<InstanceType<typeof SuperTable>>()
const formRef = ref<FormInstance>()
const categoryTypeOptions = ref([
  {
    label: '列表',
    value: '1'
  },
  {
    label: '单页',
    value: '2'
  },
  {
    label: '链接',
    value: '3'
  },
])
const state = reactive({
  modalTitle: '添加栏目',
  categoryModal: false,
  mode: 'add',
  categoryOptions: [],
  categoryFormData: {
    cnname: '',
    parentId: null,
    ext01: null,
    sort: 0,
  },
  formRules: {
    cnname: [{ required: true, message: '请输入名称' }],
    parentId: [{ required: true, message: '请选择上级栏目' }],
    ext01: [{ required: true, message: '请选择栏目类型' }],
    sort: [{ required: true, message: '请输入栏目排序' }],
  }
})
/**
 * 定义表格列
 */
const columns: TableColumn[] = [
  ...baseColumns,
  {
    title: '排序',
    align: 'center',
    field: 'sort',
    hideInSearch: true,
    editRender: {
      enabled: true
    },
    slots: {
      edit: ({ row }) => (
        <a-input type="number" min={0} placeholder="" value={row.sort}
          onChange={(e: Event) => {
            row.sort = (e.target as HTMLInputElement).value;
          }}
          onblur={() => { deitSortNumber(row) }}
        />
      )
    },
  },
  {
    title: '操作',
    width: 260,
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    actions: ({ row }) => [
      {
        label: '添加下级栏目',
        onClick: () => addSubCategory(row)
      },
      {
        label: '编辑',
        onClick: () => {
          state.mode = 'edit'
          state.categoryModal = true
          state.modalTitle = '编辑栏目'
          try {
            state.categoryFormData = { ...row }
          } catch (error) {
            console.log(error)
          }
        }
      },
      {
        label: '删除',
        color: 'error',
        popConfirm: {
          title: `您确定删除吗`,
          onConfirm: () => delOk(row)
        }
      }
    ]
  }
]
/**
 * 查询数据请求
 * @param ori
 */
const fetchData = async (ori) => {
  let formModel = superTableRef.value?.getFormModel();
  // console.log('ori', ori, formModel)
  getCategoryListFn(l => l)
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...formModel
  }

  return await getCategory(params);
}

type CbType<T = any> = (lists: T[]) => T[]
const getCategoryListFn = async (cb: CbType) => {
  const res = await getCategorylist({
    orderBy: [{
      field: 'sort',
      order: 'asc'
    }]
  })
  state.categoryOptions = res.map(i => {
    return {
      label: i.cnname,
      value: i.id,
      parentId: i.parentId
    }
  })
  state.categoryOptions.unshift({
    label: '顶级',
    value: '-1'
  })
  console.log(state.categoryOptions, 'sad')
  state.categoryOptions = cb(state.categoryOptions)
}
const fetchChildNodes = ({ row }) => {
  return getSonCategory({ id: row.id });
}

const addCategoryBtn = () => {
  state.categoryModal = true
  state.modalTitle = '添加栏目'
  state.mode = 'add'
  setTimeout(async () => {
    await formRef.value?.resetFields()
    state.categoryFormData.cnname = ''
    state.categoryFormData.ext01 = null
    state.categoryFormData.parentId = null
    state.categoryFormData.sort = 0
  })
}

//删除 二次确认框
let delOk = async (row) => {
  try {
    let res = await deleteCategory({ id: row.id });
    if (res) {
      message.success('删除成功')
      superTableRef.value?.queryTable()
    }
  } catch (error) {
    
  }
}

//添加下级
const addSubCategory = (row) => {
  state.categoryModal = true
  state.mode = 'add'
  setTimeout(() => {
    formRef.value?.resetFields()
    state.categoryFormData.cnname = ''
    state.categoryFormData.ext01 = null
    state.categoryFormData.sort = 0
    state.categoryFormData.parentId = row.id
  })
  // router.push({
  //   name: 'appearManagement',
  //   params: {
  //     title: "添加下级栏目",
  //     rowsubordinate: JSON.stringify(row)
  //   }
  // })
}

const addCategoryOk = async () => {
  try {
    await formRef.value?.validate()
    if (state.mode === 'add') {
      const res = await addCategory(state.categoryFormData)
      if (res) {
        message.success('添加成功')
        state.categoryModal = false
        superTableRef.value?.queryTable()
      }
    } else if (state.mode === 'edit') {
      const res = await editCategory(state.categoryFormData)
      if (res) {
        message.success('编辑成功')
        state.categoryModal = false
        superTableRef.value?.queryTable()
      }
    }
  } catch (error) {
    
  }
  
}

//编辑序号
const deitSortNumber = async (row) => {
  if (row.sort == '' || row.sort < 0) {
    message.error('请输入一个正数')
    row.sort = 0
    return
  }
  row.sort = row.sort * 1;
  try {
    let res = await editCategory(row);
    if (res) {
      message.success('排序成功')
      superTableRef.value?.queryTable()
    }
  } catch (error) {
    message.error('error')
  }

}

// const changeRowSort = (row, $event) => {
//   console.log(row, $event)
// }
</script>
<style scoped lang="less">

</style>
<template>
  <div>
    <!-- 表格部分 -->
    <SuperTable ref="superTableRef" :columns="columns" :data-request="fetchData"
      :toolbar="{ custom: true, export: true }" :export-config="{}" pager align="center" border search>
      <template #action>
        <a-button type="primary" class="addBtn" @click="addNnclosure">上传附件</a-button>
      </template>
    </SuperTable>

    <!-- 弹框 -->
    <DraggableModal title="操作提示" v-model:visible="uploadIsShow" @ok="uploadOk">
      <img v-if="imageUrl" :src="imageUrl" class="fileImg" alt="" />
      <!--   :action="baseUrl + '/cms/upload/uploadFile'" -->
      <Upload v-model:file-list="fileList" name="file" :show-upload-list="false"
        :action="baseUrl + '/file'" :headers="headers" @change="handleChange">
        <a-button>上传</a-button>
      </Upload>
    </DraggableModal>
  </div>
</template>
<script setup lang="ts">
import config from '@/config'
import { addEnclosure, deleteEnclosure, getEnclosure, previewEnclosure } from '@/modules/cms/api/enclosure';
import SuperTable from '@/framework/components/core/super-table/super-table.vue';
import { baseColumns } from './columns';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { reactive, ref } from 'vue'
import { message, Upload } from 'ant-design-vue';
import { ACCESS_TOKEN_KEY } from "@/framework/enums/cacheEnum";
import { Storage } from "@/framework/utils/Storage";
import { TableColumn } from "@/framework/components/core/super-table";

const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro

let formState = reactive({
  code: '',
  createBy: '',
  createTime: '',
  filename: '',
  filepath: '',
  filesize: '',
  filetype: '',
  id: '',
  updateBy: '',
  updateTime: '',
})

// 表格组件Ref
let superTableRef = ref<InstanceType<typeof SuperTable>>();

//上传附件
let uploadIsShow = ref<boolean>(false);

//上传图片
const imageUrl = ref<string>('');
const fileList = ref([]);

// 上传需要
const headers = {
  Authorization: Storage.get(ACCESS_TOKEN_KEY),
}

/**
 * 定义表格列
 */
const columns: TableColumn[] = [
  ...baseColumns,
  {
    title: '操作',
    width: 160,
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    actions: ({ row }) => [
      {
        label: '下载预览',
        onClick: () => downloadData(row)
      },
      {
        label: '删除',
        popConfirm: {
          title: `您确定删除吗`,
          onConfirm: () => delData(row)
        },
      },
    ]
  }
]
/**
 * 查询数据请求
 * @param ori
 */
const fetchData = async (ori) => {
  let formModel = superTableRef.value?.getFormModel();
  console.log('ori', ori, formModel)
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    entity: {
      ...formModel,
      status: 1
    }
  }

  let res = await getEnclosure(params)
  let resp = {
    data: res.page.list,
    pageIndex: res.page.pageNum,
    pageSize: res.page.pageSize,
    total: res.page.total
  }
  console.log(res, '0*************')
  return resp
}

/**
 * 删除数据请求
 * @param row
 */
const delData = async (row) => {
  try {
    let res = await deleteEnclosure({ id: row.id });
    if (res) {
      message.success('删除成功')
      superTableRef.value?.queryTable()
    }

  } catch (error) {
    message.error('error')
  }
}

/**
 * 下载文件请求
 * @param row
 */
const downloadData = (row) => {
  try {
    let res = previewEnclosure({ id: row.id })
    console.log(res);
    window.open(`${location.origin}/api/cms/attachment/download?id=${row.id}`)
    // previewEnclosure({ id: row.id }).then(res => {
    //   console.log(res, 'res--------')
    //   if (res.data.type === "application/json") {
    //     var blob = new Blob([res.data], {
    //       type: "application/vnd.ms-excel"
    //     });
    //     var reader = new FileReader();
    //     reader.readAsText(blob, "utf-8");
    //     reader.onload = function (e) {
    //       console.log(reader);
    //       let resultObj = JSON.parse(reader.result);
    //     };
    //   }
    // });
    // TODO 处理文件下载
    // const url = URL.createObjectURL(res);
    // console.log(url, 'url')
    // //创建a标签
    // let a = document.createElement('a');
    // a.href = url;
    // a.download = '预览.PNG'
    // document.body.appendChild(a);
    // a.click();//点击事件
    // if (res) message.success('下载成功')
  } catch (error) {
    message.error('error')
  }
}

/**
 * 上传弹窗打开开关
 */
const addNnclosure = () => {
  uploadIsShow.value = true;
}

/**
 * Upload组件事件回调
 * @param info
 */
const handleChange = info => {
  console.log(info)
  if (info.file.status !== 'uploading') {
    // console.log(info.file.response.data, '-')
    formState.filename = info.file.response.data.originalFilename
    formState.filepath = info.file.response.data.filepath
    formState.filetype = info.file.response.data.filetype
    formState.filesize = info.file.response.data.filesize
  }
  if (info.file.status === 'done') {
    if (formState.filetype.startsWith("image")) {
      function getFileBase64(img, callback) {
        const reader = new FileReader();
        reader.addEventListener('load', () => callback(reader.result));
        reader.readAsDataURL(img);
      }

      getFileBase64(info.file.originFileObj, base64Url => {
        imageUrl.value = base64Url;
      });
    }

    message.success(`${info.file.name}上传成功`);
  }
  else if (info.file.status === 'error') {
    message.error(`${info.file.name} file upload failed.`);
  }
};

/**
 * 上传弹窗确定接口回调
 */
const uploadOk = async () => {
  uploadIsShow.value = false;
  try {
    let res = await addEnclosure(formState);
    if (res) {
      superTableRef.value?.queryTable()
    }

  } catch (error) {
    message.error('error')
  }
}

</script>
<style scoped lang="less">
.fileImg {
  max-height: 400px;
}
</style>
import { TableColumn } from "@/framework/components/core/super-table";
import { Tag } from 'ant-design-vue';


// 表头 数据
export const baseColumns: TableColumn[] = [
  {
    title: '表单提示文字',
    align: 'center',
    field: 'fieldText',
  },
  {
    title: '数据字段名',
    align: 'center',
    field: 'fieldName',
  },

  {
    title: '数据类型',
    align: 'center',
    field: 'dataType'
  }
];
<template>
  <div>
    <a-form :model="formState" name="basic" layout="vertical" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }"
      autocomplete="off" @finishFailed="onFinishFailed">
      <a-tabs v-model:activeKey="activeKey" type="card">
        <a-tab-pane key="1" tab="基本设置" class="a-tab-pane">
          <a-form-item label="表单名：" name="cnname" :rules="[{ message: '请输入表单名!' }]">
            <a-input v-model:value="formState.formName" />
          </a-form-item>

          <a-form-item label="附加表名：" name="tableName" :rules="[{ required: true, message: '请输入附加表名!' }]">
            <a-input v-model:value="formState.tableName" />
          </a-form-item>
          <div>
            <span>表单性质：</span>
            <a-radio-group name="radioGroup" v-model:value="formState.type" class="radioBox">
              <a-radio value=1>自定义表单</a-radio>
              <a-radio value=2>系统表单</a-radio>
            </a-radio-group>
          </div>
          <a-button type="primary" class="btnBox" @click="formBtn">确认{{ title }}</a-button>
        </a-tab-pane>
        <a-tab-pane key="2" tab="字段管理" class="a-tab-pane">
          <SuperTable ref="superTableRef" :columns="columns" :data-request="fetchData">
            <template #action>
              <a-button type="primary" @click="addFieldBtn">添加字段</a-button>
            </template>
          </SuperTable>
        </a-tab-pane>
      </a-tabs>

    </a-form>
  </div>
</template>
<script setup lang="tsx">
import { ref, onMounted, reactive } from 'vue';
import { message } from 'ant-design-vue';
import { useRoute } from "vue-router";
import { useRouter } from "vue-router";
import { delField } from '@/modules/cms/api/field'
import { editForm, addForms, editItem } from '@/modules/cms/api/form';
import SuperTable from "@/framework/components/core/super-table/super-table.vue";
import { baseColumns } from "./columns";
let router = useRouter();
let route = useRoute();
let activeKey = ref('1');

let superTableRef = ref<InstanceType<typeof SuperTable>>()
const title = route.query.title;
// const tableDatas: any = route.query.tableDatas;//判读 添加 是否重复
const formId: any = route.query.formId;//字段 对应 表单模型的 id
let queryItem: any = reactive({})


let formState = reactive({
  formName: "",
  tableName: "",
  type: '1',
});

/**
 * 定义表格列
 */
const columns: any[] = [
  ...baseColumns,
  {
    title: '操作',
    width: 260,
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    actions: ({ row }) => [
      {
        label: '编辑',
        onClick: async () => {
          // let res = await editFieldPage({ id: row.row })
          console.log(row.id, 'res编辑资源')
          router.push({
            name: 'fieldAppear',
            query: {
              title: '编辑字段',
              editRowField: JSON.stringify(row)
            }
          })
        }
      },
      {
        label: '删除',
        color: 'error',
        popConfirm: {
          title: `您确定删除吗`,
          onConfirm: async () => {
            try {
              let res = await delField({ id: row.id });
              if (res) message.success('删除成功')
              superTableRef.value?.queryTable()
            } catch (error) {
              message.error('error')
            }
          }
        }
      }
    ]
  }
]

/**
 * 查询数据请求
 * @param ori
 */
const fetchData: any = async () => {
  superTableRef.value?.queryTable()
  let res = queryItem
  let resp = {
    data: res,
    total: res.length
  }
  return resp
}

onMounted(async () => {
  let res = await editItem({ id: formId })
  queryItem = res.fields;
  let rowObj = res.form;
  rowObj.type = String(res.form.type);
  let a = Object.assign(formState, rowObj)
  formState = a;
  console.log(queryItem, 'queryItem')
  console.log(res, 'res')
})



/**
 * 表单的 新增 和 编辑
*/
let formBtn = async () => {
  if (title == '编辑') {
    try {
      let res = await editForm(formState);
      if (res) message.success(`${title}成功`)

    } catch (error) {
      message.error('error')
    }
  }
  else if (title == '新增') {
    // let tables = JSON.parse(tableDatas)
    // let isformName = tables.some((item) => {
    //   return item.formName == formState.formName || item.tableName == formState.tableName
    // })
    // if (isformName) {
    //   message.error('重复了')
    //   return
    // }
    try {
      let res = await addForms(formState);
      if (res) message.success(`${title}成功`)

    } catch (error) {
      message.error('error')
      console.log(error)
    }
  }
}

/**
 * 添加字段 addFieldBtn
*/
const addFieldBtn = () => {
  router.push({
    name: 'fieldAppear',
    query: {
      title: '新增字段',
      formId
    }
  })
}


const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
  message.error(`有必填项未填`);
};

</script>
<style scoped lang="less">
.a-tab-pane {
  background: #fff;
  margin-top: -16px;
  margin-left: 1px;
  height: auto;
  padding: 16px
}

.fileImg {
  width: 200px;
  height: 200px
}

.eleBox {
  width: 300px
}

.radioBox {
  margin-top: 5px !important;

  .ant-radio-wrapper {
    padding-top: 10px
  }
}

.appearFooterBtn {
  padding: 10px;
  background: #fff
}

.btnBox {
  margin-top: 20px;
}
</style><template>
  <div>
    <Card>
      <a-form :model="formState" name="basic" layout="vertical" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }"
        autocomplete="off" @finish="onFinish" @finishFailed="onFinishFailed">

        <a-form-item label="表单提示文字" name="fieldText" :rules="[{ required: true, message: '请输入表单提示文字!' }]">
          <a-input v-model:value="formState.fieldText" />
        </a-form-item>

        <a-form-item label="字段名称：" name="fieldName" :rules="[{ required: true, message: '请输入字段名称!' }]">
          <a-input v-model:value="formState.fieldName" />
        </a-form-item>

        <div class="radioBox">
          <span>数据类型：</span><br>
          <a-radio-group v-model:value="formState.dataType">
            <a-radio value='varchar' class="radioItem">单行文本（VARCHAR）</a-radio>
            <a-radio value='char' class="radioItem">单行文本（CHAR）</a-radio>
            <a-radio value='textarea' class="radioItem">多行文本（TEXT）</a-radio>

            <a-radio value='html' class="radioItem">HTML文本</a-radio>
            <a-radio value='markdown' class="radioItem">MARKDOWN文本</a-radio>
            <a-radio value='file' class="radioItem">附件类型</a-radio>

            <a-radio value='datetime' class="radioItem">时间类型</a-radio>
            <a-radio value='radio' class="radioItem">单选（RADIO）</a-radio>
            <a-radio value='checkbox' class="radioItem">多选（CHECKBOX</a-radio>

            <a-radio value='select' class="radioItem">下拉选（SELECT）</a-radio>
            <a-radio value='image' class="radioItem">图片类型（IMAGE）</a-radio>
            <a-radio value='imageset' class="radioItem">图集（IMAGESET）</a-radio>
          </a-radio-group>
        </div>

        <a-form-item label="默认值：" name="defaultValue" :rules="[{ required: true, message: '请输入默认值!' }]">
          <a-textarea v-model:value="formState.defaultValue" />
        </a-form-item>

        <a-form-item class="minIpt" label="字段长度：" name="maxLength" :rules="[{ required: true, message: '请输入字段长度!' }]">
          <a-input v-model:value="formState.maxLength" />
        </a-form-item>
        <a-button type="primary" html-type="submit">保存{{ title }}</a-button>
      </a-form>
    </Card>

  </div>
</template>
<script setup lang="ts">
import { reactive, } from 'vue';
import { addField, editField } from '@/modules/cms/api/field'
import { message, Card } from 'ant-design-vue';
import { useRoute } from "vue-router";
let route = useRoute();
const title = route.query.title;
const editRowField: any = route.query.editRowField;


//表单
let formState = reactive<any>({
  fieldText: '',//表单提示文字
  fieldName: '',//字段名称：
  dataType: '',//数据类型
  defaultValue: '',//默认值
  maxLength: '',//字段长度
  formId: route.query.formId//字段 对应 表单模型的 id
});


//编辑回显
if (editRowField) {
  let editRowFieldObj = JSON.parse(editRowField);
  let allObj = Object.assign(formState, editRowFieldObj);
  formState = allObj
}

//点击提交
const onFinish = async () => {
  if (title == '新增字段') {
    formState.maxLength = formState.maxLength * 1
    try {
      let res = await addField(formState);
      if (res) message.success('新增字段成功')
    } catch (error) {
      message.error('error')
    }
  }
  else if (title == '编辑字段') {
    formState.maxLength = formState.maxLength * 1
    try {
      let res = await editField(formState);
      if (res) message.success('编辑字段成功')
    } catch (error) {
      message.error('error')
    }
  }

};

const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
  message.error(`有必填项未填`);
};
</script>
<style scoped lang="less">
.radioItem {
  width: 200px;
  margin: 10px 0;
}

.minIpt {
  width: 400px;
}

.radioBox {
  width: 700px;
}
</style>
<template>
  <div>
    <!-- 表格部分 -->
    <SuperTable :columns="columns" :data-request="fetchData" :toolbar="{
      custom: true,
      export: true
    }" pager align="center" border ref="superTableRef" search>
      <template #action>
        <a-button type="primary" class="addBtn" @click="addForm">添加表单</a-button>
      </template>
    </SuperTable>

  </div>
</template>

<script setup lang='ts'>
import { reactive, ref } from "vue";
import { SuperTable } from '@/framework/components/core/super-table';
import { getForm, deleteForm } from '@/modules/cms/api/form'
import { baseColumns } from './columns'
import { message } from 'ant-design-vue';
import { useRouter } from "vue-router";
let router = useRouter();
let tableDatas = reactive([]);
let superTableRef = ref<InstanceType<typeof SuperTable>>()



//请求数据 table
let fetchData = async (ori) => {
  let formModel = superTableRef.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    entity: {
      ...formModel
    }
  }
  let res = await getForm(params)
  tableDatas = res.list;
  console.log(res, 'res===========')
  let resp = {
    data: res.list,
    pageIndex: res.pageIndex,
    pageSize: res.pageSize,
    total: res.total
  }
  return resp
}
//表单 新增
let addForm = () => {
  console.log(tableDatas, 'tableDatas')
  router.push({
    name: 'formappearManagement',
    query: {
      title: "新增",
      // tableDatas: JSON.stringify(tableDatas)
    }
  })
}


//表头
let columns: any[] = [
  ...baseColumns,
  {
    title: '操作',
    width: 160,
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    actions: ({ row }) => [
      {
        label: '编辑',
        onClick: async () => {
          // let res = await editItem({ id: row.id })
          // console.log(res,'编辑啦啦啦')
          router.push({
            name: 'formappearManagement',
            query: {
              title: "编辑",
              // row: JSON.stringify(res),
              formId: row.id
            }
          })
          // console.log(res, 'res-')
        }
      },
      {
        // label: `${row.type == 1 ? '删除' : ''}`,
        label: `删除`,
        popConfirm: {
          title: `您确定删除吗`,
          onConfirm: async () => {
            try {
              let res = await deleteForm({ id: row.id });
              superTableRef.value?.queryTable()
              if (res) message.success('删除成功')
            } catch (error) {
              message.error('error')
            }
          },
        },
      },
    ]
  }
]



</script>

<style scoped lang='less'>
.titleText {
  font-size: 36px;
  background: #fafafa;
  padding: 15px;
  box-sizing: border-box;
  margin-bottom: 15px;
}

.titleLen {
  height: 40px;
  background: #fff;
  padding-left: 15px;
  line-height: 40px;
}




.addBtn {
  margin-right: 10px;
}

.addForm {
  span {
    display: inline-block;
    margin: 10px 0;
    font-weight: 600;
  }

  .ant-select-selector {
    width: 200px;
  }

  .radioBox {
    margin-left: 10px;
  }
}
</style><template>
  123
</template>
// import type { RouteRecordRaw } from 'vue-router';
// import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';

// const moduleName = 'cms';


// const routes: Array<RouteRecordRaw> = [
//   {
//     path: '/cms',
//     name: moduleName,
//     redirect: { name: `${moduleName}-custom-modal` },
//     component: RouterView,
//     meta: {
//       title: t('routes.cms.title'),
//       icon: 'icon-home',
//     },
//     children: [
//       //栏目管理
//       {
//         path: 'columnManagement',
//         name: `${moduleName}-columnManagement`,
//         meta: {
//           title: t('routes.cms.column'),
//           icon: 'icon-home',
//         },
//         component: () =>
//           import(
//                         /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/columnManagement/index.vue'
//           ),
//       },
//       //栏目操作页
//       {
//         path: 'appearManagement',
//         name: 'appearManagement',
//         meta: {
//           title: 'appear',
//           icon: 'icon-home',
//           hideInMenu: true,
//           activeMenu: `${moduleName}-columnManagement`,
//         },
//         component: () =>
//           import(
//             '@/modules/cms/pages/columnManagement/appear/index.vue'
//           ),
//       },
//       //文章管理
//       {
//         path: 'articleManagement',
//         name: `${moduleName}-articleManagement`,
//         meta: {
//           title: t('routes.cms.article'),
//           icon: 'icon-home',
//         },
//         component: () =>
//           import(
//                         /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/articleManagement/index.vue'
//           ),
//       },
//       //文章操作页
//       {
//         path: 'articleappearManagement',
//         name: 'articleappearManagement',
//         meta: {
//           title: 'articleappear',
//           icon: 'icon-home',
//           hideInMenu: true,
//           activeMenu: `${moduleName}-articleManagement`,
//         },
//         component: () =>
//           import(
//             '@/modules/cms/pages/articleManagement/appear/index.vue'
//           ),
//       },
//       //标签管理
//       // {
//       //   path: 'labelManagement',
//       //   name: `${moduleName}-labelManagement`,
//       //   meta: {
//       //     title: t('routes.cms.label'),
//       //     icon: 'icon-home',
//       //   },
//       //   component: () =>
//       //     import(
//       //         /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/labelManagement/index.vue'
//       //     ),
//       // },
//       //附件管理
//       {
//         path: 'enclosureManagement',
//         name: `${moduleName}-enclosureManagement`,
//         meta: {
//           title: t('routes.cms.enclosure'),
//           icon: 'icon-home',
//         },
//         component: () =>
//           import(
//                         /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/enclosureManagement/index.vue'
//           ),
//       },
//       //表单模型
//       {
//         path: 'formmodelManagement',
//         name: `${moduleName}-formmodelManagement`,
//         meta: {
//           title: t('routes.cms.formmodel'),
//           icon: 'icon-home',
//         },
//         component: () =>
//           import(
//                         /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/formmodelManagement/index.vue'
//           ),
//       },
//       //表单操作页
//       {
//         path: 'formappearManagement',
//         name: 'formappearManagement',
//         meta: {
//           title: 'formappear',
//           icon: 'icon-home',
//           hideInMenu: true,
//           activeMenu: `${moduleName}-formmodelManagement`,
//         },
//         component: () =>
//           import(
//             '@/modules/cms/pages/formmodelManagement/appear/index.vue'
//           ),
//       },
//       //表单 字段 操作页
//       {
//         path: 'fieldAppear',
//         name: 'fieldAppear',
//         meta: {
//           title: 'fieldAppear',
//           icon: 'icon-home',
//           hideInMenu: true,
//         },
//         component: () =>
//           import(
//             '@/modules/cms/pages/formmodelManagement/fieldAppear/index.vue'
//           ),
//       },

//     ],
//   },
// ];

export default [];
export enum OrgType {
  lab = 1,
  company = 2,
  cityOrg = 3,
  provinceOrg = 4
}import { request } from '@/framework/utils/request'

//设备维护审批-获取数据对应数量
export function getStateNumber() {
  return request({
    url: '/equipmentMaintenance/getStateNumber',
    method: 'get',
  });
}

//设备维护审批-获取数据 
export function getEquipmentMaintenance(data) {
  return request({
    url: '/equipmentMaintenance/equPage',
    method: 'get',
    params: data
  });
}

//设备维护-审批 
export function equipmentMaintenanceApprove(data) {
  return request({
    url: '/equipmentMaintenance/approve',
    method: 'post',
    data,
  }, {
    isGetDataDirectly: false
  });
}
import { request } from '@/framework/utils/request'

export const getAlarmTempData = params => {
  return request<API.TempColumnsItem[]>({
    url: '/warnLogEnv/page',
    method: 'get',
    params
  })
}declare namespace API {
  type RecordListResultItem = {
    id: string,
    labName: string,
    labAccount: string,
    approveDate: string,
    registeDate: string,
    person: string,
    phone: string,
    status: string | number,
  }

  type FileListResultItem = {
    id: string,
    item: string,
    fileName: string,
    createTime: string,
    remarks: string,

    files: any[]
  }
  type LabListResultItem = {
    id?: string,
    // password?: string,
    // repeatPassword?: string,
    // labId: string,
    // labName: string,
    // recordNo: string,
    // companyName: string,
    // level: string,
    // status: number,
    // path: string, // 行政区划path
    // role: string | number,
    // phone: string,

    divideId: string | null,
    name: string,
    password: string,
    repeatPassword: string,
    roles: null | string,
    username: string,
    phone: string,
    status: 0 | 1 | -1,
  }

  type DeviceMaintainceApproveListResultItem = {
    id: string,
    labName: string,
    equName: string,
    equType: string,
    isDomestic: number,
    lastTestTime: string,
    principal: principal,
    principalContact: string,
    workflowState: ActivityStatusEnum
  }
}import { request } from '@/framework/utils/request'

export const getCertFilePage = (params) => {
  return request({
    url: '/certFile/page',
    method: 'get',
    params
  })
}import { request } from '@/framework/utils/request';

/**
 * 分页查询本单位的安全体系文件
 * @param params
 */
export const getFileList = (params: { companyId: string; typeName: string }) => {
  return request({
    url: '/safeFiles/page',
    method: 'get',
    params,
  });
};

/**
 * 根据id修改
 * @param params
 */
export const changeFiles = (params: {
  id: string;
  accId: string;
  typeName: string;
  fileId: string;
}) => {
  return request({
    url: `safeFiles/${params.id}`,
    method: 'put',
    data: params,
  });
};

/**
 * 根据主键删除
 * @param params
 */
export const delFiles = (params: { id: string }) => {
  return request({
    url: `safeFiles/${params.id}`,
    method: 'delete',
  });
};

/**
 * 批量添加
 * @param params
 */
export const addFiles = (params: { accId: string; typeName: string; fileIds: string[] }) => {
  return request({
    url: '/safeFiles/',
    method: 'post',
    data: params,
  });
};
<template>
  <ArticlePublish :type="2" />
</template>
<script setup lang="tsx" name="companyInfoPublish">
import ArticlePublish from '@/modules/cms/pages/articleManagement/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <ArticlePublishDetail />
</template>
<script setup lang="tsx">
import ArticlePublishDetail from '@/modules/cms/pages/articleManagement/appear/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <SuperTable
    :columns="columns"
    :data-request="fetchData"
    search
    pager
    headerTitle="备案证书"
    align="center"
    border
    ref="supertable"
    :export-config="{}"
    :mode="1"
    search-btn-type="white-blue"
    :height="tableHeight"
  >
    <template #action>
      <a-button type="blue-white" @click="downloadSelected">批量下载证书</a-button>
    </template>
  </SuperTable>
  <DraggableModal
    :title="state.addDeviceModalTitle"
    v-model:visible="state.addDeviceModal"
    width="800px"
  >
  </DraggableModal>
</template>
<script setup lang="tsx">
  import { VxeGridPropTypes } from 'vxe-table';
  import type { TableColumnItem, TableListItem } from './columns';
  import { baseColumns } from './columns';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { reactive, ref, Ref, inject } from 'vue';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import { getCertFilePage } from '../../api/recordLicense';
  import config from '@/config';
  import { printDoc } from '@/utils/print';
  import { message } from 'ant-design-vue';
  import { useRouter } from 'vue-router';
  import { downloadFile } from '@/utils/file';
  import { downloadFile as apiDownLoadFile } from '@/api/file/index'
  import { useUserStore } from '@/store/modules/user';
  const userStore = useUserStore()
  const role = userStore.roles[0].id
  const tableHeight = inject<Ref<number>>('tableHeight')
  const router = useRouter();
  const baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;
  const supertable = ref<InstanceType<typeof SuperTable>>();
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    const data = supertable.value?.getFormModel();
    const params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
    };
    return await getCertFilePage(params);
  };
  const routeMap = {
    1: 'provinceRecordLicenseDetail',
    2: 'provinceRecordLicenseDetail',
    3: 'cityRecordLicenseDetail',
    4: 'cityRecordLicenseDetail',
    5: 'companyRecordLicenseDetail',
  }
  const columns: Array<TableColumnItem> = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => [
        {
          label: '查看',
          onClick: () => {
            // 打印
            // printDoc(location.origin + baseUrl + '/file/md5/' + row.fileMd5);
            // 预览
            router.push({
              name: routeMap[role],
              // name: 'companyRecordLicenseDetail', // provinceRecordLicenseDetail companyRecordLicenseDetail
              query: {
                id: row.labId,
                record: 'true',
              },
            });
          },
        },
        {
          label: '下载备案证书',
          onClick: () => {
            downloadFile({ name: `${row.labName}备案证书`, md5: row.fileMd5 })
          },
        },
      ],
    },
  ];

  const state = reactive({
    addDeviceModalTitle: '',
    addDeviceModal: false,
  });

  const downloadSelected = () => {
    const records = supertable.value?.getCheckboxRecords();
    if (!records?.length) {
      message.warn('请先选择要下载的备案证书！');
    }
    records?.forEach(async i => {
      const res = await apiDownLoadFile({ name: '', md5: i.fileMd5 })
      const blob = new Blob([res])
      if ('download' in document.createElement('a')) { // 判断是否支持download属性
        const link = document.createElement('a')
        link.download = i.labName + '备案证书.pdf'
        link.style.display = 'none'
        link.href = URL.createObjectURL(blob)
        document.body.appendChild(link)
        link.click()
        URL.revokeObjectURL(link.href)
        document.body.removeChild(link)
      } else { // 不支持download属性，则直接打开文件
        window.open(URL.createObjectURL(blob))
      }
    })
  };
</script>
<style lang="less" scoped></style>
<template>
  <RecordLicenseDetail></RecordLicenseDetail>
</template>
<script setup lang="tsx">
import RecordLicenseDetail from '@/components/lab-info/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <SuperTable
    ref="supertable"
    search
    pager
    border
    align="center"
    headerTitle="安全管理体系文件"
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :mode="1"
    search-btn-type="white-blue"
    :height="tableHeight"
  >
    <template #action>
      <a-button type="blue-white" @click="addFilesFn">添加文件</a-button>
      <a-button type="white-blue" @click="downloadSelected">批量下载</a-button>
    </template>
  </SuperTable>
  <DraggableModal
    v-model:visible="state.addFilesModal"
    width="600px"
    :title="state.addFilesModalTitle"
    destroy-on-close
  >
    <a-form
      :model="state.addFilesFormData"
      :label-col="{ span: 6 }"
      :wrapper-col="{ span: 16 }"
      :rules="state.formRules"
      ref="formRef"
    >
      <a-form-item label="项目" name="item">
        <a-select
          v-model:value="state.addFilesFormData.item"
          placeholder="请选择项目"
          :options="state.fileType"
          :fieldNames="{ label: 'typeName', value: 'typeName' }"
        ></a-select>
      </a-form-item>
      <a-form-item label="文件上传" name="files">
        <BUpload
          :is-one="isOne"
          :type="true"
          :is-edit="true"
          :file-data="state.addFilesFormData.files"
          @update:file-data="updateFileData"
        />
      </a-form-item>
    </a-form>
    <template #footer>
      <a-button type="white-blue" @click="cancelFn">取消</a-button>
      <a-button type="blue-white" @click="addFilesModalOk">确定</a-button>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
  import BUpload from '@/components/upload/index.vue';
  import { VxeGridPropTypes } from 'vxe-table';
  import type { TableColumnItem } from './columns';
  import { baseColumns } from './columns';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { reactive, ref, Ref, inject, watch } from 'vue';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import { FormInstance, message } from 'ant-design-vue';
  import { getFileList, changeFiles, delFiles, addFiles } from '../../api/securityManagementFiles';
  import { useUserStore } from '@/store/modules/user';
  import { getFileType } from '@/modules/infoManagement/api/company';
  import { downloadFile } from '@/utils/file';
  const tableHeight = inject<Ref<number>>('tableHeight')
  // 引入
  const userStore = useUserStore();
  // 通用
  const id = userStore.userInfo.id;
  // DOM
  const supertable = ref<InstanceType<typeof SuperTable>>();
  const formRef = ref<FormInstance>();

  /**
   * 表格
   */
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = supertable.value?.getFormModel();
    let params = {
      // accId: id,
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
    };
    let res = await getFileList(params);
    res.data.map((item) => {
      return (item.fileName = item.file.name);
    });
    return res;
  };
  const isOne = ref(false);
  // 表格列配置
  let columns: Array<TableColumnItem> = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => [
        {
          label: '修改',
          onClick: () => {
            isOne.value = true;
            state.addFilesFormData.files = [row.file];
            state.addFilesFormData.item = row.typeName;
            state.addFilesFormData.id = row.id;
            state.addFilesModalTitle = '修改文件信息';
            state.addFilesModal = true;
          },
        },
        {
          label: '删除',
          popConfirm: {
            title: '确定删除吗？删除后不可恢复',
            onConfirm: async () => {
              await delFiles(row);
              message.success('删除成功');
              supertable.value?.refreshTable();
            },
          },
        },
        {
          label: '下载',
          onClick: async () => {
            downloadFile({name: '', md5: row.file.md5})
          },
        },
      ],
    },
  ];

  /**
   * 页面数据
   */
  // 页面数据
  const state = reactive<{
    addFilesModal: boolean;
    addFilesModalTitle: '添加文件' | '修改文件信息';
    addFilesFormData: { item: string; files: any[]; id: string };
    formRules: any;
    fileType: any[];
  }>({
    addFilesModalTitle: '添加文件',
    addFilesModal: false,
    addFilesFormData: {
      id: '',
      item: '',
      files: [],
    },
    formRules: {
      item: [{ required: true, message: '该项为必填项' }],
      files: [{ required: true, validator: () => {
        if (state.addFilesFormData.files && state.addFilesFormData.files.length) {
          return Promise.resolve()
        }
        return Promise.reject('该项为必填项')
      } }],
    },
    fileType: [],
  });
  const updateFileData = (e) => {
    state.addFilesFormData.files = e
    formRef.value?.validateFields('files')
  }
  /**
   * 标题栏
   */
  // 添加按钮
  const addFilesFn = () => {
    isOne.value = false;
    state.addFilesFormData.files = [];
    state.addFilesFormData.item = '';
    state.addFilesModal = true;
    state.addFilesModalTitle = '添加文件';
  };
  const downloadSelected = () => {
    // todo 批量下载接口
    const records = supertable.value?.getCheckboxRecords();
    console.log('download records', records);
  };
  /**
   * 弹出层
   */
  // 弹窗确认
  const addFilesModalOk = async () => {
    try {
      await formRef.value?.validateFields();
      isOne.value ? await changeFilesFn() : await addFilesReqFn();
      state.addFilesModal = false;
      supertable.value?.refreshTable();
    } catch (err) {
      message.warn('存在未填项！');
    }
  };
  const cancelFn = () => {
    formRef.value?.resetFields();
    state.addFilesModal = false;
  };

  /**
   * 请求
   */
  // 获取文件类型下拉
  getFileType().then((res) => (state.fileType = res));
  // 修改
  const changeFilesFn = async () => {
    let params = {
      id: state.addFilesFormData.id,
      // accId: userStore.userInfo.id as string,
      typeName: state.addFilesFormData.item,
      fileId: state.addFilesFormData.files[0].id,
    };
    await changeFiles(params);
    message.success('修改成功！');
  };
  // 添加
  const addFilesReqFn = async () => {
    let params = {
      // accId: userStore.userInfo.id as string,
      typeName: state.addFilesFormData.item,
      fileIds: state.addFilesFormData.files.map((item) => item.id),
    };
    await addFiles(params);
    message.success('添加成功！');
  };
</script>
<style lang="less" scoped></style>
<template>
  <DraggableModal title="设备维护记录" :visible="props.visible" @update:visible="emits('update:visible', $event)" width="1000px">
    <a-form :model="props.data" :label-col="{ span: 10 }" :wrapper-col="{ span: 14 }" ref="deviceMaintainceFormRef">
      <a-row>
        <a-col span="12">
          <a-form-item label="设备名称" name="equipmentName">
            <span>{{ props.data.equipmentName }}</span>
          </a-form-item>
          <a-form-item label="下次检验日期" name="nextDate">
            {{ dayjs(props.data.nextDate).format('YYYY-MM-DD') }}
          </a-form-item>
          <a-form-item label="检验人员" name="maintenancePerson">
            <span>{{ props.data.maintenancePerson }}</span>
          </a-form-item>
          <template v-if="props.data.equType == 2 || props.data.equType == 1">
            <a-form-item :label="props.data.equType == 2 ? '高压灭菌器检定校准信息' : '生物安全柜年检报告'">
              <span v-if="data.extendInfoFile?.name">
                {{ data.extendInfoFile?.name }}
                <span class='btn-link' @click="previewFile(data.extendInfoFile)">预览</span>
                <span class='btn-link' @click="downloadFile(data.extendInfoFile)">下载</span>
              </span>
              <span v-else>无</span>
            </a-form-item>
          </template>
          <template v-else>
            <a-form-item label="备注" name="memo">
              <span>{{ props.data.memo}}</span>
            </a-form-item>
          </template>
        </a-col>
        <a-col span="12">
          <a-form-item label="维护日期" name="maintenanceDate">
            {{ dayjs(props.data.maintenanceDate).format('YYYY-MM-DD') }}
            <span class="tag-green" v-if="props.data.isOnTime">按时</span>
            <span class="tag-red" v-else>超期</span>
          </a-form-item>
          <a-form-item label="检验单位" name="maintenanceCompany">
            <span>{{ props.data.maintenanceCompany }}</span>
          </a-form-item>
          <a-form-item label="检验结果" name="result">
            <span>{{ props.data.result == 1 ? '合格' : '不合格'}}</span>
          </a-form-item>
          <a-form-item label="备注" name="memo" v-if="props.data.equType == 2 || props.data.equType == 1">
            <span>{{ props.data.memo}}</span>
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
    <template #footer>
      <div>
        <a-button type="blue-white" @click="pass()" v-if="props.buttonStatus === 2">通过</a-button>
        <a-button type="white-blue" @click="retreat()"  v-if="props.buttonStatus === 2">退回</a-button>
        <a-button type="white-blue" @click="emits('update:visible', false)">取消</a-button>
      </div>
    </template>
    <a-card title="设备维护记录">
      <vxe-grid :columns="columns" :data="maintainTable" max-height="300" :loading="tableOptions.loading" ref="vxeGridRef"
        align="center" border>
        <template #pager>
          <vxe-pager :layouts="['Sizes', 'PrevJump', 'PrevPage', 'Number', 'NextPage', 'NextJump', 'FullJump', 'Total']"
            :page-sizes="[5,10,15,20]" v-model:current-page="tableOptions.pagerConfig.pageNum"
            v-model:page-size="tableOptions.pagerConfig.pageSize" :total="tableOptions.pagerConfig.total"
            @page-change="handlePageChange">
          </vxe-pager>
        </template>
      </vxe-grid>
    </a-card>
  </DraggableModal>
</template>
<script setup lang="tsx">
import { reactive, ref, onMounted, watch } from 'vue'; 
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { maintainceColumns } from './columns';
import { getLabDeviceMaintain } from '@/modules/lab/api/labDevice';
import { DatePicker, FormInstance, message, } from 'ant-design-vue';
import { VxePagerEvents, VxeGridInstance } from 'vxe-table'
import { equipmentMaintenanceApprove } from '@/modules/company/api/deviceMaintainApprove'
import { useUserStore } from '@/store/modules/user';
import dayjs from 'dayjs';
import { downloadFile, previewFile } from '@/utils/file';
import { getFileJSX } from '@/modules/lab/pages/labDeviceManagement/components/fileCell'
defineExpose({
  dayjs
})
const userStore = useUserStore()
const userId = userStore.userInfo.id
const vxeGridRef = ref<VxeGridInstance>()
const deviceMaintainceFormRef = ref<FormInstance>();
let maintainTable = ref([]);
/**
 * 接受父组件数据
*/
const props = defineProps({
  data: {
    type: Object,
    required: true,
  },
  visible: {
    type: Boolean,
    required: true,
  },
  buttonStatus: {
    type: Number,
  }
});

const emits = defineEmits(['update:visible', 'approve']);
const tableOptions = reactive({
  pagerConfig: {
    enabled: true,
    layouts: [
      'PrevJump',
      'PrevPage',
      'Jump',
      'PageCount',
      'NextPage',
      'NextJump',
      'Sizes',
      'Total',
    ],
    pageNum: 1,
    pageSize: 5,
    total: 5,
    align: 'right',
    border: false,
    background: false,
    perfect: false,
    pageSizes: [10, 15, 20, 50, 100],
    autoHidden: false,
  },
  data: [] as any[],
  loading: false,
});
let columns = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '生物安全柜年检报告',
    field: 'sw',
    visible: false,
    width: 100,
    slots: {
      default: ({ row }) => getFileJSX(row)
    }
  },
  {
    title: '高压灭菌器检定校准信息',
    field: 'gy',
    visible: false,
    slots: {
      default: ({ row }) => getFileJSX(row)
    }
  },
  {
    title: '设备名称',
    field: 'equipmentName',
    formatter: ({ cellValue }) => {
      return cellValue ? props.data.equName : ''
    }
  },
  ...maintainceColumns,
]
const state = reactive({
  formRules: {
    equipmentName: [{ required: true}],
    nextDate: [{ required: true}],
    maintenancePerson: [{ required: true}],
    memo: [{ required: true}],
    maintenanceDate: [{ required: true}],
    maintenanceCompany: [{ required: true}],
    result: [{ required: true}],
  }
})
watch(
  () => props.visible, (nval) => {
    if (nval) {
      getList()
      setTimeout(async () => {
        console.log('props.data.equType', props.data.equType)
        await vxeGridRef.value?.showColumn(props.data.equType === 1 ? 'sw' : 'gy')
        await vxeGridRef.value?.hideColumn(props.data.equType === 2 ? 'sw' : 'gy')
      })
    }
  },
);

onMounted(() => {
  getList()
})


let getList = async () => {
  let res = await getLabDeviceMaintain({
    pageNum: tableOptions.pagerConfig.pageNum,
    pageSize: tableOptions.pagerConfig.pageSize,
    equipmentId: props.data.equipmentId
  });
  console.log(res, 'res')
  console.log(props.buttonStatus, '状态')
  maintainTable.value = res.data;
  tableOptions.pagerConfig.total = res.total;
}
/**
 * 分页
*/
const handlePageChange: VxePagerEvents.PageChange = ({ currentPage, pageSize }) => {
  console.log(currentPage, 'currentPage')
  console.log(pageSize, 'pageSize')
  tableOptions.pagerConfig.pageNum = currentPage;
  tableOptions.pagerConfig.pageSize = pageSize;
  getList()
}

/**
 * 审批 通过
*/
const pass = async () => {
  const data = {
    userId,
    businessId: props.data.id,
    approveState: 2
  }
  const res = await equipmentMaintenanceApprove(data)
  if (res.success) {
    message.success('审批成功')
    emits('approve')
    emits('update:visible', false)
  }
}

/**
 * 审批 退回
*/
const retreat = async () => {
  const data = {
    userId,
    businessId: props.data.id,
    approveState: 3
  }
  const res = await equipmentMaintenanceApprove(data)
  if (res.success) {
    message.success('退回成功')
    emits('approve')
    emits('update:visible', false)
  }
}
</script>
<style scoped>
.tag-green,
.tag-red {
  font-size: 12px;
  color: #fff;
  border-radius: 4px;
  padding: 0 5px;
}
.tag-green {
  background-color: #7AC756;
}
.tag-red {
  background-color: #fb083f;
}
</style><template>
  <div class="tabs">
    <div class="tabs-btn">
      <div class="tabs-btn-item" :class="{ active: activeKey === 2 }" @click="changTabFn(2)">待审批 · {{ state.stateNum[2] }}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 3 }" @click="changTabFn(3)">已审批 · {{ state.stateNum[3] }}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 4 }" @click="changTabFn(4)">已退回 · {{ state.stateNum[4] }}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === -1 }" @click="changTabFn(-1)">全部 · {{ state.stateNum[-1] }}</div>
    </div>
    <div class="tabs-content">
      <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="" align="center" border
        ref="supertable" :export-config="{}" :mode="1" search-btn-type="white-blue" :height="tableHeightComputed">
      </SuperTable>
    </div>
    <!-- 弹框 -->
  
  </div>
    <DeviceMaintainApproveDetail @approve="approveEvt" :data="state.deviceMaintainApproveItem"
      :buttonStatus="state.buttonStatus" v-model:visible="state.deviceMaintainApproveModal">
    </DeviceMaintainApproveDetail>
</template>
<script setup lang="tsx">
import { reactive, ref, Ref, computed, inject, onMounted } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { useRouter, useRoute } from 'vue-router'
import type { TableColumnItem, TableListItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { getStateNumber, getEquipmentMaintenance } from '@/modules/company/api/deviceMaintainApprove'
import DeviceMaintainApproveDetail from './deviceMaintainApproveDetail.vue'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 56
})
const supertable = ref<InstanceType<typeof SuperTable>>();
const router = useRouter()
const route = useRoute()
const activeKey = ref(-1)
const changTabFn = (key) => {
  activeKey.value = key
  supertable.value ?.queryTable()
}
let state = reactive<{
  stateNum: any,
  deviceMaintainApproveItem: TableListItem,
  deviceMaintainApproveModal: boolean,
  buttonStatus:number | null
}>({
  stateNum: {},
  deviceMaintainApproveItem: {} as TableListItem,
  deviceMaintainApproveModal: false,
  buttonStatus:null
})


// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  let data = supertable.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    workflowState: activeKey.value == -1 ? undefined : activeKey.value,
    ...data,
  };
  await getNum()
  return await getEquipmentMaintenance(params)
};
let columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => {
      // let params 
      // let value = row.workflowState
      // switch (value) {
      //   case 2:
      //     params = [
      //       {
      //         label: '审核',
      //         onClick() {
      //           state.deviceMaintainApproveItem = { ...row }
      //           state.deviceMaintainApproveModal = true
      //           state.buttonStatus = 2,// 待审核
      //           console.log(row, '点击去审核')
      //         }
      //       },
      //     ];
      //     break;
      //   case 3:
      //     params = [
      //       {
      //         label: '查看',
      //         onClick() {
      //           state.deviceMaintainApproveItem = { ...row }
      //           state.deviceMaintainApproveModal = true
      //           state.buttonStatus = null // 已审核
      //         }
      //       },
      //       {
      //         label: '退回',
      //         onClick() {
      //           state.deviceMaintainApproveItem = { ...row }
      //           state.deviceMaintainApproveModal = true
      //           state.buttonStatus = 3 // 已审核
      //         }
      //       },
      //     ];
      //     break;
      //   case 4:
      //     params = [
      //       {
      //         label: '查看',
      //         onClick() {
      //           console.log('点击查看'),
      //           state.buttonStatus = 4 // 已退回
      //         }
      //       },
      //     ];
      //     break;
      // }
      // return params
      return [
        {
          label: '审核',
          ifShow: row.workflowState === 2,
          onClick() {
            state.deviceMaintainApproveItem = { ...row }
            state.deviceMaintainApproveModal = true
            state.buttonStatus = 2,// 待审核
            console.log(row, '点击去审核')
          }
        },
        {
          label: '查看',
          ifShow: row.workflowState !== 2,
          onClick() {
            state.deviceMaintainApproveItem = { ...row }
            state.deviceMaintainApproveModal = true
            state.buttonStatus = null // 已审核
          }
        },
      ]
    }
  },
]
const approveEvt = () => {
  supertable.value?.refreshTable()
}
const getNum = async () => {
  let res = await getStateNumber()
  state.stateNum = res
}

onMounted(() => {
  if (route.params.activeKey) {
    activeKey.value = Number(route.params.activeKey)
    // changTabFn(Number(route.params.activeKey))
  }
  
})
</script>
<style lang="less" scoped>

</style><template>
  <div class="tabs">
    <div class="tabs-btn">
      <div class="tabs-btn-item" :class="{ active: activeKey === 2 }" @click="changTabFn(2)">待审批 · {{ state.wait }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 3 }" @click="changTabFn(3)">已审批 · {{ state.pass }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 4 }" @click="changTabFn(4)">已退回 · {{ state.refuse }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 5 }" @click="changTabFn(5)">全部 · {{ state.all }}</div>
    </div>
    <div class="tabs-content">
      <template v-if="activeKey === 3">
        <div class="card-container">
          <ActivityCard title="病毒类实验室活动" :sample-count="statNum.virus[0]" :positive-count="statNum.virus[1]">
            <template #icon>
              <img src="@/assets/images/virusSvg.svg" />
            </template>
          </ActivityCard>
          <ActivityCard background-color="#f2fdfd" title="细菌放线菌类实验室活动" :sample-count="statNum.bacteria[0]"
            :positive-count="statNum.bacteria[1]">
            <template #icon>
              <img src="@/assets/images/bacteriaSvg.svg" />
            </template>
          </ActivityCard>
          <ActivityCard background-color="#f4f4fa" title="真菌类实验室活动" :sample-count="statNum.fungus[0]" :positive-count="statNum.fungus[1]">
            <template #icon>
              <img src="@/assets/images/fungusSvg.svg" />
            </template>
          </ActivityCard>
          <ActivityCard background-color="#f2fcfd" title="其他病原菌类实验室活动" :sample-count="statNum.other[0]"
            :positive-count="statNum.other[1]">
            <template #icon>
              <img src="@/assets/images/otherVirusSvg.svg" />
            </template>
          </ActivityCard>
        </div>
      </template>
      <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="" align="center" border
        ref="supertable" :export-config="{}" :mode="1" search-btn-type="white-blue" :auto-load="false" :height="tableHeightComputed">
      </SuperTable>
    </div>
  </div>
</template>
<script setup lang="tsx" name="labActivityApprove">
import { reactive, ref, onActivated, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { useRouter, useRoute } from 'vue-router';
import type { TableColumnItem, TableListItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { FormInstance, message, DatePicker } from 'ant-design-vue';
import { getActivityPage, approveActivity, getActivityStateNumber, getActivityNumberByType } from '@/modules/lab/api/activity';
import { useUserStore } from '@/store/modules/user';
import { ActivityStatusEnum } from '@/enums/state'
import ActivityCard from '@/components/card/activity-card/index.vue'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - (activeKey.value === 3 ? 164 : 56)
})
const userStore = useUserStore()
const userId = userStore.userInfo.id
console.log(userStore, 'userStroe')
const route = useRoute()
const router = useRouter();
const activeKey = ref(2);
const changTabFn = (key: number) => {
  activeKey.value = key;
  supertable.value?.refreshTable()
};

const statNum = reactive({
  virus: [0, 0],
  bacteria: [0, 0],
  fungus: [0, 0],
  other: [0, 0]
})
const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  let data = supertable.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    workflowState: activeKey.value === 5 ? '' : activeKey.value,
    ...data,
  };
  const [res, numberRes, tableRes] = await Promise.all([getActivityStateNumber(), getActivityNumberByType(), getActivityPage(params)])
  state.wait = res['2']
  state.pass = res['3']
  state.refuse = res['4']
  state.all = res['-1']

  statNum.virus = [numberRes[0].sampleSum, numberRes[0].samplePositiveSum]
  statNum.bacteria = [numberRes[1].sampleSum, numberRes[1].samplePositiveSum]
  statNum.fungus = [numberRes[2].sampleSum, numberRes[2].samplePositiveSum]
  statNum.other = [numberRes[3].sampleSum, numberRes[3].samplePositiveSum]
  return tableRes
};
let columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '查看',
        ifShow: row.workflowState !== ActivityStatusEnum.WaitApprove,
        onClick: () => {
          router.push({
            name: 'labActivityApproveDetail',
            query: {
              id: row.id,
            },
          });
        },
      },
      {
        label: '审批',
        ifShow: row.workflowState === ActivityStatusEnum.WaitApprove,
        onClick: () => {
          router.push({
            name: 'labActivityApproveDetail',
            query: {
              id: row.id,
            },
          });
        },
      }
      // {
      //   label: '通过',
      //   ifShow: row.workflowState === ActivityStatusEnum.WaitApprove,
      //   popConfirm: {
      //     title: '确定通过吗？',
      //     onCancel() { },
      //     async onConfirm() {
      //       // req
      //       const res = await approveActivity({
      //         userId: userId!,
      //         businessId: row.id,
      //         approveState: 2,
      //       })
      //       if (res.code === 200 && res.success) {
      //         message.success('审批成功')
      //         supertable.value?.refreshTable()
      //       }
      //     },
      //   },
      // },
      // {
      //   label: '退回',
      //   ifShow: row.workflowState === ActivityStatusEnum.WaitApprove,
      //   popConfirm: {
      //     title: '确定退回吗？',
      //     onCancel() { },
      //     async onConfirm() {
      //       // req
      //       const res = await approveActivity({
      //         userId: userId!,
      //         businessId: row.id,
      //         approveState: 3
      //       })
      //       if (res.code === 200 && res.success) {
      //         message.success('审批成功')
      //         supertable.value?.refreshTable()
      //       }
      //     },
      //   },
      // },
    ],
  },
];
const state = reactive({
  wait: 0,
  pass: 0,
  refuse: 0,
  all: 0,
})

onActivated(() => {
  if (route.params.activeKey) {
    activeKey.value = Number(route.params.activeKey)
  }
  supertable.value?.refreshTable()
})
</script>
<style lang="less" scoped>
.card-container {
  display: flex;
  gap: 16px;
  background-color: #fff;
  padding: 10px;

}
</style>
<template>
  <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="用户管理" align="center" border
    ref="supertable" :export-config="{}" :form-props="{ labelCol: { span: 10 } }" :height="tableHeight" :toolbar="{}"
    :mode="1" search-btn-type="white-blue">
    <template #action>
      <a-button type="blue-white" @click="addLab">添加</a-button>
    </template>
  </SuperTable>
  <DraggableModal :title="state.addLabModalTitle" v-model:visible="state.addLabModal" width="800px" destroy-on-close>
    <a-form :model="state.addLabFormData" :label-col="{ span: 10 }" :wrapper-col="{ span: 14 }" :rules="state.formRules"
      ref="addLabFormRef">
      <a-row>
        <a-col span="12">
          <a-form-item label="所属行政区域" name="divideId">
            <TreeSelect v-model:value="state.addLabFormData.divideId" showSearch :treeData="state.treeData"
              placeholder="请选择行政区划" :fieldNames="{ label: 'name', value: 'id', children: 'children' }" disalbed
              :tabindex="1">
            </TreeSelect>
          </a-form-item>
          <a-form-item label="用户名称" name="name">
            <a-input placeholder="请输入用户名称" v-model:value="state.addLabFormData.name" :tabindex="3"></a-input>
          </a-form-item>
          <a-form-item label="密码" name="password" v-if="state.addLabMode === AddLabModeEnum.Add">
            <a-input-password placeholder="请输入密码" v-model:value="state.addLabFormData.password" :tabindex="5"
              @blur="passwordBlurEvt"></a-input-password>
          </a-form-item>
          <a-form-item label="角色" name="roles">
            <a-select v-model:value="state.addLabFormData.roles" showSearch
              :options="$dict.get('RoleId')?.filter(item => item.value > role) || []" placeholder="请选择角色" :tabindex="7">
            </a-select>
          </a-form-item>
        </a-col>
        <a-col span="12">
          <a-form-item label="用户ID" name="username">
            <a-input placeholder="请输入用户ID" v-model:value="state.addLabFormData.username"
              :disabled="state.addLabMode === AddLabModeEnum.Edit" :tabindex="2"></a-input>
          </a-form-item>
          <a-form-item label="联系电话" name="phone">
            <a-input placeholder="请输入联系电话" v-model:value="state.addLabFormData.phone" :tabindex="4"></a-input>
          </a-form-item>
          <a-form-item label="重复密码" name="repeatPassword" v-if="state.addLabMode === AddLabModeEnum.Add">
            <a-input-password placeholder="请重复密码" v-model:value="state.addLabFormData.repeatPassword"
              :tabindex="6"></a-input-password>
          </a-form-item>
          <a-form-item label="启用状态" name="status">
            <Switch size="small" v-model:checked="state.addLabFormData.status" :unCheckedValue="0" :checkedValue="1">
            </Switch>
            <span style="margin-left: 6px; vertical-align: middle;">{{
              state.addLabFormData.status === 1 ? "启用" : "停用"
            }}</span>
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="addLabCancel">取消</a-button>
        <a-button type="white-blue" @click="addLabReset" v-if="state.addLabMode === AddLabModeEnum.Add">重置</a-button>
        <a-button type="blue-white" @click="addLabOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
  <DraggableModal title="重置密码" v-model:visible="state.resetPasswordModal" width="600px" destroy-on-close>
    <a-form :model="state.resetPasswordFormData" :label-col="{ span: 6 }" :wrapper-col="{ span: 14 }"
      :rules="state.resetFormRules" ref="resetPasswordFormRef">
      <a-form-item label="账号ID" name="resetLabId">
        <a-input v-model:value="state.resetPasswordFormData.username" disabled></a-input>
      </a-form-item>
      <a-form-item label="名称" name="resetLabName">
        <a-input v-model:value="state.resetPasswordFormData.name" disabled></a-input>
      </a-form-item>
      <a-form-item label="密码" name="password">
        <a-input-password placeholder="请输入密码" v-model:value="state.resetPasswordFormData.password"
          @blur="passwordBlurEvt"></a-input-password>
      </a-form-item>
      <a-form-item label="重复密码" name="repeatPassword">
        <a-input-password placeholder="请确认密码"
          v-model:value="state.resetPasswordFormData.repeatPassword"></a-input-password>
      </a-form-item>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="state.resetPasswordModal = false">取消</a-button>
        <a-button type="blue-white" @click="resetPasswordModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import { VxeGridPropTypes } from 'vxe-table';
import type { TableColumnItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { reactive, ref, computed, nextTick, inject, Ref } from 'vue';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message, TreeSelect, Switch } from 'ant-design-vue';
import { getMyDivides } from '@/api/divide'
import { JSEncrypt } from 'jsencrypt';
import config from '@/config';
import { createUser, getDivideUserPage, DivideUserParams, editUser } from '@/modules/cityOrg/api/user'
import { useUserStore } from '@/store/modules/user';
import userStatusSwitch from '@/modules/cityOrg/pages/cityUserManagement/components/userStatusSwitch'

const tableHeight = inject<Ref<number>>('tableHeight')
const userStore = useUserStore()
const supertable = ref<InstanceType<typeof SuperTable>>()
const myDivideId = userStore.getOrganizationInfo.parentId
const myOrganizationId = userStore.getOrganizationInfo.id
const jsencrypt = new JSEncrypt()
jsencrypt.setPublicKey(config.pubKey)
const roles = userStore.getRoles
const role = ref(roles[0].id || '0')
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params: API.PageParams<DivideUserParams> = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    roleIds: '"6"', // 实验室
    ...data,
  }
  params.dividePath = userStore.getOrganizationInfo.path
  return await getDivideUserPage(params)
}
const columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '状态',
    field: 'status',
    dict: 'UserStatus',
    width: 200,
    slots: {
      default: ({ row }) => {
        return userStatusSwitch(row)
      }
    }
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 180,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          state.addLabModal = true
          state.addLabModalTitle = '修改用户'
          state.addLabMode = AddLabModeEnum.Edit
          state.addLabFormData = { ...row, roles: row.roleId, phone: row.extData2 }
        }
      },
      // {
      //   label: '注销',
      //   popConfirm: {
      //     title: '您确定注销该用户吗？',
      //     onConfirm: () => {
      //       cancelAccountConfirm(row)
      //     },
      //   }
      // },
      {
        label: '重置密码',
        onClick: () => {
          state.resetPasswordModal = true
          state.resetPasswordFormData = { ...row }
        }
      },
    ]
  }
]

type ResetFormData = {
  id: string,
  name: string,
  username: string,
  password: string,
  repeatPassword: string,
}
enum AddLabModeEnum {
  Add = 1,
  Edit = 2
}
const addLabFormRef = ref<FormInstance>()
const state = reactive({
  treeData: [],
  addLabModalTitle: '',
  addLabModal: false,
  addLabMode: AddLabModeEnum.Add,
  addLabFormData: {
    divideId: myDivideId,
    name: '',
    password: '',
    repeatPassword: '',
    roles: '6',
    username: '',
    phone: '',
    status: 0,
  } as API.LabListResultItem,
  resetPasswordFormData: {
    id: '',
    name: '',
    username: '',
    password: '',
    repeatPassword: '',
  } as ResetFormData,
  formRules: {
    username: [{ required: true, message: '请输入实验室ID' }],
    password: [{ required: true, message: '请输入密码' }],
    phone: [{ required: true, message: '请输入联系电话' }],
    divideId: [{ required: true, message: '请选择行政区划' }],
    name: [{ required: true, message: '请输入实验室名称' }],
    roles: [{ required: true, message: '请选择角色' }],
    repeatPassword: [
      {
        required: true,
        validator: (_rule, value) => {
          if (!value) {
            return Promise.reject('请重复密码')
          } else if (value === state.addLabFormData.password) {

          } else {
            return Promise.reject('两次密码不一致')
          }
          return Promise.resolve()
        },
        trigger: 'blur'
      }
    ],
    role: [{ required: true, message: '请选择角色' }],
  },
  resetFormRules: {
    password: [{ required: true, message: '请输入密码', trigger: 'change' }],
    repeatPassword: [
      {
        required: true,
        validator: (_rule, value) => {
          if (!value) {
            return Promise.reject('请重复密码')
          } else if (value === state.resetPasswordFormData.password) {

          } else {
            return Promise.reject('两次密码不一致')
          }
          return Promise.resolve()
        },
        trigger: 'blur'
      }
    ],
  },
  resetPasswordModal: false,
})
const passwordBlurEvt = () => {
  addLabFormRef.value?.validate(['repeatPassword'])
  resetPasswordFormRef.value?.validate(['repeatPassword'])
}
const getTreeData = async () => {
  const res = await getMyDivides()
  console.log(res, 'res')
  state.treeData = res
}
getTreeData()
const addLab = () => {
  state.addLabMode = AddLabModeEnum.Add
  state.addLabFormData.divideId = myDivideId
  // state.addLabFormData.id = null
  // state.addLabFormData.name = ''
  // state.addLabFormData.username = ''
  // state.addLabFormData.phone = ''
  // state.addLabFormData.roles = null
  // state.addLabFormData.status = 0
  state.addLabFormData = {
    divideId: myDivideId,
    name: '',
    password: '',
    repeatPassword: '',
    roles: '6',
    username: '',
    phone: '',
    status: 0,
  }
  state.addLabModalTitle = '添加用户'
  nextTick(() => {
    addLabReset()
  })
  state.addLabModal = true
}
const addLabCancel = () => {
  state.addLabModal = false
}
const addLabReset = () => {
  addLabFormRef.value?.resetFields()
}
const addLabOk = async () => {
  try {
    await addLabFormRef.value?.validate()
    if (state.addLabMode === AddLabModeEnum.Add) {
      const data = {
        ...state.addLabFormData,
        encodePassword: '',
        divideId: myOrganizationId, // 注意这里创建实验室时，divideId是单位Id
      }
      // Reflect.deleteProperty(data, 'divideId')
      Reflect.deleteProperty(data, 'password')
      Reflect.deleteProperty(data, 'repeatPassword')
      const encodedPassword = jsencrypt.encrypt(state.addLabFormData.password)
      if (encodedPassword) {
        data.encodePassword = encodedPassword
        const res = await createUser(data)
        if (res.success && res.code === 200) {
          message.success('添加成功')
          supertable.value?.refreshTable()
          state.addLabModal = false
        }
      } else {
        message.error('加密失败')
      }
    } else if (state.addLabMode === AddLabModeEnum.Edit) {
      const data = {
        id: state.addLabFormData.id,
        divideId: state.addLabFormData.divideId,
        phone: state.addLabFormData.phone,
        name: state.addLabFormData.name,
        username: state.addLabFormData.username,
        roles: state.addLabFormData.roles,
        status: state.addLabFormData.status,
      }
      const res = await editUser(data)
      if (res.success && res.code === 200) {
        message.success('修改成功')
        supertable.value?.refreshTable()
        state.addLabModal = false
      }
      console.log(state.addLabFormData, 'state.addLabFormData')
    }
  } catch (error) {

  }
}

const resetPasswordFormRef = ref<FormInstance>()
const resetPasswordModalOk = async () => {
  try {
    await resetPasswordFormRef.value?.validate()
    const encodePassword = jsencrypt.encrypt(state.resetPasswordFormData.password)
    const data = {
      id: state.resetPasswordFormData.id,
      username: state.resetPasswordFormData.username,
      encodePassword,
    }
    const res = await editUser(data)
    if (res.success && res.code === 200) {
      message.success('修改成功')
      state.resetPasswordModal = false
    }
  } catch (error) {

  }
}

const cancelAccountConfirm = async (row) => {
  const data = {
    id: row.id,
    username: row.username,
    status: -1,
  }
  const res = await editUser(data)
  if (res.success && res.code === 200) {
    message.success('注销成功')
    supertable.value?.refreshTable()
  }
}
</script>
<style lang="less" scoped></style>import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';

const routes: Array<RouteRecordRaw> = [
  {
    path: '/companyLabManagement',
    name: 'companyLabManagement',
    component: RouterView,
    meta: {
      title: '实验室管理',
      icon: 'icon-lab',
    },
    children: [
      {
        path: 'deviceMaintainApprove',
        name: 'deviceMaintainApprove',
        meta: {
          title: '设备维护审批',
          icon: 'icon-maintain',
        },
        component: () =>
          import(
            /* webpackChunkName: "deviceMaintainApprove" */ '@/modules/company/pages/deviceMaintainApprove/index.vue'
          ),
      },
      {
        path: 'labActivityApprove',
        name: 'labActivityApprove',
        meta: {
          title: '实验室活动审批',
          icon: 'icon-flag',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "labActivityApprove" */ '@/modules/company/pages/labActivityApprove/index.vue'
          ),
      },
      // labActivityApproveDetail
      {
        path: 'labActivityApproveDetail',
        name: 'labActivityApproveDetail',
        meta: {
          title: '实验室活动审批详情',
          icon: 'icon-flag',
          hideInMenu: true,
          activeMenu: 'labActivityApprove',
        },
        props: {
          isOrg: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "labActivityApproveDetail" */ '@/modules/lab/pages/labActivityRecordAdd/index.vue'
          ),
      },
    ],
  },
  {
    path: '/companyRecordLicense',
    name: 'companyRecordLicense',
    meta: {
      title: '备案证书',
      icon: 'icon-license',
    },
    component: () =>
      import(
        /* webpackChunkName: "companyRecordLicense" */ '@/modules/company/pages/companyRecordLicense/index.vue'
      ),
  },
  {
    path: '/companyRecordLicenseDetail',
    name: 'companyRecordLicenseDetail',
    meta: {
      title: '备案信息详情',
      icon: 'icon-license',
      hideInMenu: true,
      activeMenu: 'companyRecordLicense',
    },
    props: {
      isOrg: true,
    },
    component: () => import('@/modules/company/pages/companyRecordLicenseDetail/index.vue'),
  },
  {
    path: '/companySecurityManagementFiles',
    name: 'companySecurityManagementFiles',
    meta: {
      title: '安全管理体系文件',
      icon: 'icon-zhuantixiwenjian',
    },
    component: () =>
      import(
        /* webpackChunkName: "companySecurityManagementFiles" */ '@/modules/company/pages/companySecurityManagementFiles/index.vue'
      ),
  },
  {
    path: '/companyInfoPublish',
    name: 'companyInfoPublish',
    meta: {
      title: '信息发布',
      icon: 'icon-ic-published',
      keepAlive: true,
    },
    component: () =>
      import(
        /* webpackChunkName: "companyInfoPublish" */ '@/modules/company/pages/companyInfoPublish/index.vue'
      ),
  },
  {
    path: '/companyInfoPublishDetail',
    name: 'companyInfoPublishDetail',
    meta: {
      title: '信息发布详情',
      icon: 'icon-ic-published',
      hideInMenu: true,
      activeMenu: 'companyInfoPublish',
    },
    component: () =>
      import(
        /* webpackChunkName: "companyInfoPublishDetail" */ '@/modules/company/pages/companyInfoPublishDetail/index.vue'
      ),
  },
  {
    path: '/labManagement',
    name: 'labManagement',
    meta: {
      title: '用户管理',
      icon: 'icon-user',
    },
    component: () =>
      import(
        /* webpackChunkName: "labManagement" */ '@/modules/company/pages/labManagement/index.vue'
      ),
  },
];

export default routes;
import { DictConfig } from "@/framework/core/dict/types";
import { DictNameType } from '@/api/dict/types'
import { getDictByType } from '@/api/dict'
const dict: Partial<Record<DictNameType, DictConfig>> = {
  OrgType: {
    data: getDictByType('OrgType'),
    props: {
      name: 'label',
      value: 'value'
    }
  },
  sex: {
    data: [
      { name: '男', value: 1 },
      { name: '女', value: 2 }
    ]
  },
}

export default dict
export default {
  demo: {
    demo: "Demo",
    button: "Button Extension",
    modal: "Draggable Modal",
    form: {
      demo: "Form Demo",
      basic: "Basic Form",
      rule: "Rule Form"
    },
    table: {
      demo: "Table Demo",
      searchTable: "Search Table",
      wzry: "Honor of Kings",
      lol: "League of Legends"
    },
    icon: "Custom Icon"
  }
};
export default {
  demo: {
    demo: 'demo演示',
    button: '按钮的扩展',
    modal: '可拖拽弹窗',
    form: {
      demo: '表单演示',
      basic: '基础表单',
      rule: '表单校验',
    },
    table: {
      demo: '表格演示',
      searchTable: '查询表格',
      wzry: '王者荣耀',
      lol: '英雄联盟',
      super: '超级表格',
    },
    icon: '自定义图标',
    dict: '全局字典',
    guide: '引导页',
    drawer: '抽屉框'
  }
};
<template>
  <div>
    <Alert
      message="可扩展antd按钮样式功能"
      description="继承自原ant-design-vue的a-button，轻易扩展按钮的type定制不同颜色，详细看@/framework/components/button/button.vue"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <Card>
      <Space>
        <AButton type="primary">primary</AButton>
        <AButton type="danger">danger</AButton>
        <AButton type="warning">warning</AButton>
        <AButton type="success">success</AButton>
      </Space>
    </Card>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'DemoButton',
  };
</script>

<script setup lang="ts">
  import { Alert, Space, Card } from 'ant-design-vue';
  import { AButton } from '@/framework/components/basic/button';
</script>
<template>
  <div>
    <Alert
      message="自定义模态框"
      description="对ant-design-vue的modal进行二次封装，自定义一个可拖拽、可调整大小的模态框"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <a-card>
      <Space>
        <a-button type="primary" @click="state.visible = true">弹出弹窗</a-button>
        <a-button type="primary" @click="handleOpenModal">函数式调用弹窗</a-button>
      </Space>
    </a-card>
    <DraggableModal v-model:visible="state.visible" @ok="onOk" />
  </div>
</template>

<script setup lang="tsx">
  import { reactive } from 'vue';
  import { Alert, Space, Input } from 'ant-design-vue';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import { useModal } from '@/framework/components/core/draggable-modal';
  import button from "@/modules/demo/pages/button.vue";
  const name = "CustomModal"
  /**
   * @description 扩展ant-design-vue模态框功能
   */

  const fnModal = useModal();

  const state = reactive({
    visible: false,
  });

  const handleOpenModal = () => {
    fnModal.show({
      title: '我是标题',
      content: ()=><Input></Input>,

    });
  };

  const onOk = () => {
    state.visible = false;
  };
</script>

<style scoped></style>
<template>
  <div>
    <Alert
        message="全局使用的字典工具类"
        description="具体使用，参考@/framework/core/dict/README.md"
        type="info"
        show-icon
        style="margin-bottom: 12px"
    />
    <Card>
      <div style="margin-top: 20px">
        <div>
          性别：
          <a-select placeholder="请选择">
            <a-select-option :value="sex.value" v-for="sex in $dict.get('sex')" :key="sex"
            >{{ sex.name }}
            </a-select-option>
          </a-select>
        </div>
        <div>
          <textarea style="width: 800px; height: 200px" :value="code"/>
        </div>
      </div>
    </Card>
  </div>
</template>

<script setup lang="ts">
import {Alert, Card} from 'ant-design-vue';

const name = 'DemoDict';

const code =
    '          <a-select>\n' +
    '            <a-select-option :value="sex.value" v-for="sex in $dict.get(\'sex\')">{{ sex.name }}</a-select-option>\n' +
    '          </a-select>';
</script>
<template>
  <div>
    <Alert
      message="函数式抽屉框"
      description="对ant-design-vue的drawer进行二次封装，自定义一个方便函数式调用的抽屉框"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <a-card>
      <Space>
        <a-button type="primary" @click="handleOpenModal">函数式调用抽屉</a-button>
        <a-button type="primary" @click="handleOpenFormDrawer">调用表单抽屉</a-button>
      </Space>
    </a-card>
    <!--    <Drawer1 @register="register1" />-->
  </div>
</template>
<script lang="ts">
import { defineComponent } from "vue";
import { Alert, Space } from "ant-design-vue";
import { useDrawer, useFormDrawer } from "@/framework/components/core/drawer";
import { schemas } from "../form/rule-form/form-schema";

export default defineComponent({
  components: { Alert, Space },
  setup() {
    const { show, setDrawerProps } = useDrawer();
    const handleOpenModal = () => {
      show({
        title: "test",
        width: "700px",
        content: "1233"
      });
      setDrawerProps({ loading: true });
      setTimeout(() => {
        setDrawerProps({ loading: false });
      }, 2000);
    };
    const { showDrawer } = useFormDrawer<{}>();
    const handleOpenFormDrawer = () => {
      showDrawer({
        drawerProps: {
          title: "test",
          width: "700px",
          content: "1233"
        },
        formSchema: { schemas, labelWidth: 120 }
      });
    };

    return {
      handleOpenModal,
      handleOpenFormDrawer
    };
  }
});
</script>
<template>
  <div>
    <Alert
      message="验证表单"
      description="动态验证表单"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <a-card>
      <schema-form ref="dynamicForm" :form-schema="formSchema">
        <template #operate-button>
          <a-button type="primary" @click="confirm"> 确定 </a-button>
        </template>
      </schema-form>
    </a-card>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'DemosFormBasicForm',
  };
</script>

<script lang="ts" setup>
  import { ref } from 'vue';
  import { Alert, message } from 'ant-design-vue';
  import { SchemaForm } from '@/framework/components/core/schema-form';
  import { schemas } from './form-schema';

  /**
   * @description 基础表单
   */
  const dynamicForm = ref<InstanceType<typeof SchemaForm>>();
  const formSchema = { schemas, labelWidth: 120 };


  // 点击提交
  function confirm() {
    console.log('dynamicForm.value', dynamicForm.value?.formModel);

    dynamicForm.value?.validate().then(() => message.success('验证通过！'));
  }
</script>

<style lang="less" scoped>
  .btn-rows {
    button {
      margin-right: 12px;
    }
  }
</style>
import type { FormItemSchema } from '@/framework/components/core/schema-form/types/form';

export const schemas: FormItemSchema[] = [
  {
    field: 'field1',
    component: 'Input',
    label: '字段1',
    colProps: {
      span: 8,
    },
    required: true,
  },
  {
    field: 'field2',
    component: 'Input',
    label: '字段2',
    colProps: {
      span: 8,
    },
    required: true,
  },
  {
    field: 'id',
    label: 'id',
    required: true,
    defaultValue: 0,
    component: 'InputNumber',
    vShow: false,
  },
  {
    field: 'field3',
    component: 'DatePicker',
    label: '字段3',
    colProps: {
      span: 8,
    },
    required: true,
  },
  {
    field: 'field33',
    component: 'DatePicker',
    label: '字段33',
    colProps: {
      span: 8,
    },
    componentProps: {
      valueFormat: 'YYYY-MM-DD',
    },
    rules: [{ required: true, type: 'string' }],
  },
  // {
  //   field: 'field44',
  //   component: 'InputCountDown',
  //   label: '验证码',
  //   colProps: {
  //     span: 8
  //   },
  //   required: true
  // },
  {
    field: 'field4',
    component: 'Select',
    label: '字段4',
    colProps: {
      span: 8,
    },
    componentProps: {
      mode: 'multiple',
      options: [
        {
          label: '选项1',
          value: '1',
          key: '1',
        },
        {
          label: '选项2',
          value: '2',
          key: '2',
        },
      ],
    },
    rules: [
      {
        required: true,
        message: '请输入aa',
        type: 'array',
      },
    ],
  },
  {
    field: 'field441',
    component: 'Input',
    label: '自定义校验',
    colProps: {
      span: 8,
    },
    rules: [
      {
        required: true,
        validator: async (_, value) => {
          if (!value) {
            return Promise.reject('值不能为空');
          }
          if (value === '1') {
            return Promise.reject('值不能为1');
          }
          return Promise.resolve();
        },
        trigger: 'change',
      },
    ],
  },
  {
    field: 'field5',
    component: 'CheckboxGroup',
    label: '字段5',
    colProps: {
      span: 8,
    },
    componentProps: {
      options: [
        {
          label: '选项1',
          value: '1',
        },
        {
          label: '选项2',
          value: '2',
        },
      ],
    },
    rules: [{ required: true }],
  },
  {
    field: 'field7',
    component: 'RadioGroup',
    label: '字段7',
    colProps: {
      span: 8,
    },
    componentProps: {
      options: [
        {
          label: '选项1',
          value: '1',
        },
        {
          label: '选项2',
          value: '2',
        },
      ],
    },
    rules: [{ required: true, message: '覆盖默认生成的校验信息' }],
  },
  {
    field: 'field8',
    component: 'Input',
    label: '后端异步验证',
    colProps: {
      span: 8,
    },
    helpMessage: ['本字段演示异步验证', '本地规则：必须填写', '后端规则：不能包含admin'],
    rules: [
      {
        required: true,
        message: '请输入数据',
      },
      {
        validator(_, value = '') {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              if (value.includes('admin')) {
                reject('该字段不能包含admin关键字');
              } else {
                resolve();
              }
            }, 100);
          });
        },
      },
    ],
  },
];
<template>
  <div>
    <Alert
      message="验证表单"
      description="动态验证表单"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <a-card>
      <schema-form ref="dynamicForm" :form-schema="formSchema">
        <template #operate-button>
          <a-button type="primary" @click="confirm"> 确定 </a-button>
        </template>
      </schema-form>
    </a-card>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'DemosFormRuleForm',
  };
</script>

<script lang="ts" setup>
  import { ref } from 'vue';
  import { Alert, message } from 'ant-design-vue';
  import { SchemaForm } from '@/framework/components/core/schema-form';
  import { schemas } from './form-schema';

  /**
   * @description 验证表单
   */
  const dynamicForm = ref<InstanceType<typeof SchemaForm>>();
  const formSchema = { schemas, labelWidth: 120 };

  // 点击提交
  function confirm() {
    console.log('dynamicForm.value', dynamicForm.value?.formModel);

    dynamicForm.value?.validate().then(() => message.success('验证通过！'));
  }
</script>

<style lang="less" scoped>
  .btn-rows {
    button {
      margin-right: 12px;
    }
  }
</style>
<template>
  <div>
    <a-button type="primary" @click="handleStart">开始</a-button>
  </div>
</template>
<script lang="ts" setup>
  import intro from 'intro.js';
  import 'intro.js/minified/introjs.min.css';
  const prefixVar = ''
  const handleStart = ()=> {
    intro()
      .setOptions({
        steps: [
          {
            title: 'Welcome',
            intro: 'Hello World! 👋',
          },
          {
            title: 'Collapse Button',
            element: document.querySelector(`.menu-fold`)!,
            intro: 'This is the menu collapse button.',
          },
          {
            title: 'User Action',
            element: document.querySelector(`.ant-avatar`)!,
            intro: 'This is the user function area.',
          },
        ],
      })
      .start();
  }
</script>
<template>
  <div>
    <Alert
      message="自定义图标"
      description="使用阿里图标库，可以有效减小项目的体积，支持离线本地图标和在线图标"
      type="info"
      show-icon
      style="margin-bottom: 12px"
    />
    <a-card>
      示意图：<Image
        :width="700"
        src="http://ww1.sinaimg.cn/large/005IOlAWgy1gl8bm4ot9dj314r0opabq.jpg"
        @click="showPreview"
      />
      <Descriptions title="使用示例" :column="1">
        <Descriptions.Item label="阿里图标路径">
          <a-input
            v-model:value="state.scriptUrl"
            style="width: 400px"
            placeholder="请输入你的阿里巴巴矢量图标库项目图标的路径"
          />
          (例如：//at.alicdn.com/t/font_1166867_7zdsgx6x88l.js)
        </Descriptions.Item>
        <Descriptions.Item label="图标名字">
          <a-input
            v-model:value="state.iconName"
            placeholder="请输入图标的名字"
            style="width: 200px"
          />
          （例如：icon-huanfu1、icon-zhutipifu、icon-xinwendongtai1）
        </Descriptions.Item>
        <Descriptions.Item label="效果">
          <icon-font
            v-if="state.scriptUrl && state.iconName"
            :script-url="state.scriptUrl"
            :type="state.iconName"
            size="30"
          />
          <span v-else>可以复制示例的地址和图标查看效果</span>
        </Descriptions.Item>
      </Descriptions>
    </a-card>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'CustomIcon',
  };
</script>

<script lang="ts" setup>
  import { reactive } from 'vue';
  import { Alert, Descriptions, Image } from 'ant-design-vue';
  import { IconFont } from '@/framework/components/basic/iconfont';

  /**
   * @description ant-design-vue配置阿里巴巴矢量图标库使用
   */
  const state = reactive({
    scriptUrl: '',
    iconName: '',
    visible: false,
    imageUrl: '',
  });

  const showPreview = (e) => {
    state.imageUrl = e.target.currentSrc;
    state.visible = true;
  };
</script>
<template>
  <SuperTable :columns="columns" :data-request="fetchData" search :pager="true" />
</template>

<script lang="tsx">
  export default {
    name: 'SuperTableDemo',
  };
</script>
<script setup lang="tsx">
  import { SuperTable } from '@/framework/components/core/super-table';
  import { columns } from './columns';
  import { VxeGridPropTypes } from 'vxe-table';

  const fetchData = (ori: VxeGridPropTypes.ProxyAjaxQueryParams, data) => {
    console.log(data);
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        console.log(1233);
        let resp = {
          // data: {
          data: [
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 2,
            },
            {
              name: '123',
              sex: 2,
            },
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 1,
            },
            {
              name: '123',
              sex: 2,
            },
            {
              name: '123',
              sex: 2,
            },
            {
              name: '123',
              sex: 1,
            },
          ],
          total: 100,
          // },
        };
        resolve(resp);
      }, 1000);
    });
  };
</script>

<style></style>
<template>
  <Card :bordered="false">
    <Card.Grid style="width: 25%" :hoverable="false" :bordered="false">
      <Card class="posters" :bordered="false">
        <template #cover>
          <Carousel arrows :dots="false">
            <template #prevArrow>
              <div class="custom-slick-arrow" style="left: 10px">
                <LeftCircleOutlined />
              </div>
            </template>
            <template #nextArrow>
              <div class="custom-slick-arrow" style="right: 10px">
                <RightCircleOutlined />
              </div>
            </template>
            <template v-for="item in heroInfo.posters" :key="item">
              <img :src="item" alt="" />
            </template>
          </Carousel>
        </template>
        <Card.Meta :title="`${heroInfo.name}  ${heroInfo.title}`">
          <template #description>
            <a
              :href="`https://101.qq.com/#/hero-detail?heroid=${heroInfo.heroId}&datatype=5v5`"
              target="_blank"
            >
              详细资料
            </a>
          </template>
        </Card.Meta>
      </Card>
    </Card.Grid>
    <Card.Grid class="skins" style="width: 75%" :hoverable="false" :bordered="false">
      <Carousel arrows effect="fade" dots-class="slick-dots slick-thumb">
        <template #customPaging="props">
          <a>
            <img :src="heroInfo.skins[props.i]" />
          </a>
        </template>
        <div v-for="item in heroInfo.skins" :key="item">
          <img :src="item" />
        </div>
      </Carousel>
    </Card.Grid>
  </Card>
</template>

<script lang="ts">
  export default {
    name: 'LoLHeroInfo',
  };
</script>

<script lang="ts" setup>
  import { onMounted, ref } from 'vue';
  import { Carousel, Card } from 'ant-design-vue';
  import { LeftCircleOutlined, RightCircleOutlined } from '@ant-design/icons-vue';
  import { getLolHeroInfo } from '@/api/demos/hero';
  import { useRoute } from 'vue-router';
  import { useTabsViewStore } from '@/store/modules/tabsView';

  const route = useRoute();
  const tabsViewStore = useTabsViewStore();
  const heroInfo = ref<any>({});

  onMounted(async () => {
    const { data } = await getLolHeroInfo({ id: route.params.id });
    heroInfo.value = data;
    tabsViewStore.updateTabTitle(`${route.meta.title}(${heroInfo.value.title})`);
  });
</script>

<style lang="less" scoped>
  .skins :deep(.ant-carousel) {
    text-align: center;
    .slick-dots {
      position: relative;
      height: auto;
    }
    .slick-slide img {
      border: 5px solid #fff;
      display: block;
      margin: auto;
    }
    .slick-arrow {
      display: none !important;
    }
    .slick-thumb {
      bottom: 0px;
    }
    .slick-thumb li {
      width: 60px;
      height: 45px;
    }
    .slick-thumb li img {
      width: 100%;
      height: 100%;
      filter: grayscale(100%);
    }
    .slick-thumb li.slick-active img {
      filter: grayscale(0%);
    }
  }
  /* For demo */

  /* For demo */
  .posters :deep(.ant-carousel) {
    .slick-arrow.custom-slick-arrow {
      width: 25px;
      height: 25px;
      font-size: 25px;
      color: #fff;
      background-color: rgba(31, 45, 61, 0.11);
      opacity: 0.3;
      z-index: 1;
    }
    .slick-prev {
      left: 10px;
    }

    .custom-slick-arrow:hover {
      opacity: 0.5;
    }
  }
</style>
<template>
  <div>
    <Alert message="游戏介绍" type="info" show-icon>
      <template #description> 英雄联盟 -- 根据数组格式的数据进行导出 </template>
    </Alert>
    <Card title="英雄列表mock数据" style="margin-top: 20px">
      <dynamic-table
        size="small"
        bordered
        :data-request="loadData"
        :columns="columns"
        rowKey="heroid"
        export-file-name="表格自带导出"
        :customRow="customRow"
      >
        <template #export-button> <a-button type="primary">表格自带导出</a-button> </template>
        <template #toolbar>
          <a-button type="primary" @click="aoaToExcel"> 数组格式导出 </a-button>
          <a-button type="primary" @click="openExportModal"> 自定义导出格式 </a-button>
        </template>
      </dynamic-table>
    </Card>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'DemosTablesLolTable',
  };
</script>

<script lang="ts" setup>
  import { Alert, Card } from 'ant-design-vue';
  import { DynamicTable } from '@/framework/components/core/dynamic-table';
  import { getLolHeroList } from '@/api/demos/hero';
  import { columns } from './columns';
  import { useContextMenu } from '@/framework/hooks/functions/useContextMenu';
  import { useRouter } from 'vue-router';
  import { useExportExcelModal, jsonToSheetXlsx, aoaToSheetXlsx } from '@/framework/components/basic/excel';

  const router = useRouter();
  const [createContextMenu] = useContextMenu();

  const exportExcelModal = useExportExcelModal();
  let tableData: any[] = [];

  const aoaToExcel = () => {
    const colFilters = columns.filter((n) => n.dataIndex !== '$action');
    const colFilterKeys = colFilters.map((n) => n.dataIndex);
    // 保证data顺序与header一致
    aoaToSheetXlsx({
      data: tableData
        .map((item) => {
          return colFilterKeys.reduce((p, k) => {
            p[k] = Array.isArray(item[k]) ? item[k].toString() : item[k];
            return p;
          }, {});
        })
        .map((item) => Object.values(item)),
      // ['头像', '英雄名称', '英雄称号', '定位']
      header: colFilters.map((column) => column.title),
      filename: '二维数组方式导出excel.xlsx',
    });
  };

  const openExportModal = () => {
    exportExcelModal.openModal({
      onOk: ({ filename, bookType }) => {
        // 默认Object.keys(data[0])作为header
        jsonToSheetXlsx({
          data: tableData,
          filename,
          write2excelOpts: {
            bookType,
          },
        });
      },
    });
  };

  const loadData = async (params) => {
    const { data } = await getLolHeroList(params);
    tableData = data.list;
    return data;
  };

  const customRow = (record) => {
    return {
      onContextmenu: (e: MouseEvent) => {
        createContextMenu({
          event: e,
          items: [
            {
              label: '查看',
              handler: () => {
                console.log('record', record);
                router.push({ name: 'demos-table-lol-info', params: { id: record.heroId } });
              },
            },
            {
              label: '编辑',
              handler: () => {
                console.log('record', record);
              },
            },
          ],
        });
      },
    };
  };
</script>

<style lang="less" scoped></style>
<template>
  <div>
    <Alert message="查询表格" type="info" show-icon>
      <template #description> 查询表格-查询表单使用示例 </template>
    </Alert>
    <Card title="查询表单基本使用示例" style="margin-top: 20px">
      <dynamic-table
        ref="dynamicTableRef"
        size="small"
        bordered
        :data-request="loadData"
        :columns="columns"
        rowKey="heroid"
        @toggle-advanced="toggleAdvanced"
      />
    </Card>
  </div>
</template>

<script lang="ts" setup>
  import { Alert, Card } from 'ant-design-vue';
  import { DynamicTable } from '@/framework/components/core/dynamic-table';
  import  type { DynamicTableInstance } from '@/framework/components/core/dynamic-table';
  import { columns, tableData } from './columns';
  import { ref } from 'vue';

  const dynamicTableRef = ref<DynamicTableInstance>();

  // 展开搜索表单时更新英雄皮肤选项值
  const toggleAdvanced = (e) => {
    if (e) {
      // 手动设置搜索表单的搜索项
      dynamicTableRef.value?.getQueryFormRef().updateSchema([
        {
          field: 'price',
          componentProps: {
            options: [
              {
                label: '0-199',
                value: '0-199',
              },
              {
                label: '200-999',
                value: '200-999',
              },
            ],
          },
        },
      ]);
    }
  };

  const loadData = async (params) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          list: tableData,
          ...params,
        });
      }, 500);
    });
  };
</script>

<style lang="less" scoped></style>
<template>
  <div>
    <Alert message="游戏介绍" type="info" show-icon>
      <template #description> 《王者荣耀》-- 根据JSON格式的数据进行导出</template>
    </Alert>
    <Card title="英雄列表mock数据" style="margin-top: 20px">
      <dynamic-table
        ref="dynamicTableRef"
        size="small"
        bordered
        :data-request="loadData"
        :columns="columns"
        rowKey="heroid"
        @toggle-advanced="toggleAdvanced"
      >
        <template #toolbar>
          <a-button type="primary" @click="defaultHeader"> 导出：默认头部</a-button>
          <a-button type="primary" @click="customHeader"> 导出：自定义头部</a-button>
        </template>
      </dynamic-table>
    </Card>
  </div>
</template>

<script lang="ts" setup>
  import { Alert, Card } from 'ant-design-vue';
  import type { DynamicTableInstance } from '@/framework/components/core/dynamic-table';
  import { DynamicTable } from '@/framework/components/core/dynamic-table';
  import { jsonToSheetXlsx } from '@/framework/components/basic/excel';

  import { getWzryHeroList } from '@/api/demos/hero';
  import { columns } from './columns';
  import { ref } from 'vue';

  let tableData = [];

  const dynamicTableRef = ref<DynamicTableInstance>();

  function defaultHeader() {
    // 默认Object.keys(data[0])作为header
    jsonToSheetXlsx({
      data: tableData,
      filename: '使用key作为默认头部.xlsx',
    });
  }

  // 自定义头部
  function customHeader() {
    jsonToSheetXlsx({
      data: tableData,
      header: {
        heroid: 'ID',
        cname: '英雄名称',
        title: '英雄称号',
        occupation: '定位',
        skin_name: '皮肤',
      },
      filename: '自定义头部.xlsx',
      json2sheetOpts: {
        // 指定顺序
        header: ['cname', 'heroid'],
      },
    });
  }

  // 展开搜索表单时更新英雄皮肤选项值
  const toggleAdvanced = (e) => {
    if (e) {
      // dynamicTableRef.value?.getQueryFormRef().updateSchema([
      //   {
      //     field: 'skin_name',
      //     componentProps: {
      //       options: [
      //         {
      //           label: '皮肤1',
      //           value: 'aa',
      //         },
      //         {
      //           label: '皮肤2',
      //           value: 'bb',
      //         },
      //       ],
      //     },
      //   },
      // ]);
    }
  };

  const loadData = async (params) => {
    const { data } = await getWzryHeroList(params);

    tableData = data.list;
    dynamicTableRef.value?.getQueryFormRef().updateSchema([
      {
        field: 'skin_name',
        componentProps: {
          options: [
            {
              label: '皮肤1',
              value: 'aa',
            },
            {
              label: '皮肤2',
              value: 'bb',
            },
          ],
        },
      },
    ]);
    return data;
  };
</script>

<style lang="less" scoped></style>
<template>
  <div>
    <div>{{x}},{{y}}</div>
  </div>
</template>

<script lang="tsx">
import { useMouse, usePreferredDark, useLocalStorage } from '@vueuse/core'

export default {
  setup() {
    // tracks mouse position
    const { x, y } = useMouse()

    // is user prefers dark theme
    const isDark = usePreferredDark()

    // persist state in localStorage
    const store = useLocalStorage(
      'my-storage',
      {
        name: 'Apple',
        color: 'red',
      },
    )

    return { x, y, isDark, store }
  }
}
</script>
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
import { t } from '@/framework/hooks/useI18n';

const moduleName = 'demos';

const routes: Array<RouteRecordRaw> = [
  {
    path: '/demos',
    name: moduleName,
    redirect: { name: `${moduleName}-custom-modal` },
    component: RouterView,
    meta: {
      title: t('routes.demo.demo'),
      icon: 'icon-home',
    },
    children: [
      {
        path: 'custom-modal',
        name: `${moduleName}-custom-modal`,
        meta: {
          title: t('routes.demo.modal'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/demo/pages/custom-modal.vue'
          ),
      },
      {
        path: 'custom-drawer',
        name: `${moduleName}-custom-drawer`,
        meta: {
          title: t('routes.demo.drawer'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "demos-custom-a-custom-drawer" */ '@/modules/demo/pages/drawer/index.vue'
          ),
      },
      {
        path: 'button',
        name: `${moduleName}-button`,
        meta: {
          title: t('routes.demo.button'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(/* webpackChunkName: "demos-button" */ '@/modules/demo/pages/button.vue'),
      },
      {
        path: 'form',
        name: `${moduleName}-form`,
        meta: {
          title: t('routes.demo.form.demo'),
          icon: 'icon-home',
          keepAlive: true,
        },
        redirect: { name: `${moduleName}-form-basic` },
        component: RouterView,
        children: [
          {
            path: 'basic',
            name: `${moduleName}-form-basic`,
            meta: {
              title: t('routes.demo.form.basic'),
              icon: 'icon-home',
              keepAlive: true,
            },
            component: () =>
              import(
                /* webpackChunkName: "basic-form" */ '@/modules/demo/pages/form/basic-form/index.vue'
              ),
          },
          {
            path: 'rule',
            name: `${moduleName}-form-rule`,
            meta: {
              title: t('routes.demo.form.rule'),
              icon: 'icon-home',
              keepAlive: true,
            },
            component: () =>
              import(
                /* webpackChunkName: "rule-form" */ '@/modules/demo/pages/form/rule-form/index.vue'
              ),
          },
        ],
      },
      {
        path: 'table',
        name: `${moduleName}-table`,
        meta: {
          title: t('routes.demo.table.demo'),
          icon: 'icon-home',
          keepAlive: true,
        },
        redirect: { name: `${moduleName}-table-wzry` },
        component: RouterView,
        children: [
          {
            path: 'search-table',
            name: `${moduleName}-query-form`,
            meta: {
              title: t('routes.demo.table.searchTable'),
              icon: 'icon-home',
              keepAlive: false,
            },
            component: () =>
              import(
                /* webpackChunkName: "search-table" */ '@/modules/demo/pages/tables/search-table/index.vue'
              ),
          },
          {
            path: 'wzry',
            name: `${moduleName}-table-wzry`,
            meta: {
              title: t('routes.demo.table.wzry'),
              icon: 'icon-home',
              keepAlive: false,
            },
            component: () =>
              import(
                /* webpackChunkName: "wzry-table" */ '@/modules/demo/pages/tables/wzry-table/index.vue'
              ),
          },
          {
            path: 'lol',
            name: `${moduleName}-table-lol`,
            meta: {
              title: t('routes.demo.table.lol'),
              icon: 'icon-home',
              keepAlive: true,
            },
            component: () =>
              import(
                /* webpackChunkName: "lol-table" */ '@/modules/demo/pages/tables/lol-table/index.vue'
              ),
          },
          {
            path: 'lol/:id',
            name: `${moduleName}-table-lol-info`,
            meta: {
              title: '英雄详情',
              icon: 'icon-home',
              hideInMenu: true,
              keepAlive: true,
              activeMenu: `${moduleName}-table-lol`,
            },
            component: () =>
              import(
                /* webpackChunkName: "lol-info-table" */ '@/modules/demo/pages/tables/lol-table/heroInfo.vue'
              ),
          },
        ],
      },
      {
        path: 'super-table',
        name: `${moduleName}-table-super`,
        meta: {
          title: t('routes.demo.table.super'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "demos-table-super" */ '@/modules/demo/pages/super-table/index.vue'
          ),
      },
      {
        path: 'icons',
        name: `${moduleName}-icons`,
        meta: {
          title: t('routes.demo.icon'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(/* webpackChunkName: "demos-button" */ '@/modules/demo/pages/icons/Iconfont.vue'),
      },
      {
        path: 'dict',
        name: `${moduleName}-dict`,
        meta: {
          title: t('routes.demo.dict'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(/* webpackChunkName: "demos-button" */ '@/modules/demo/pages/dict.vue'),
      },
      {
        path: 'vueuse',
        name: `${moduleName}-vueuse`,
        meta: {
          title: 'VUE-USE',
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(/* webpackChunkName: "demos-button" */ '@/modules/demo/pages/vueuse.vue'),
      },
      {
        path: 'guide',
        name: `${moduleName}-guide`,
        meta: {
          title: t('routes.demo.guide'),
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(/* webpackChunkName: "demos-button" */ '@/modules/demo/pages/guide.vue'),
      },
    ],
  },
];

export default routes;
import { request } from '@/framework/utils/request';

/**
 * 首页列表
 */
// 列表获取所有单位备案信息
export const getAllRecord = (params: {
  compnayId: string;
  orderBy: [{ field: 'auditStatus'; order: 'asc' }];
}) => {
  return request({
    url: '/companyInfo/',
    method: 'get',
    params,
  });
};
// 复制创建旧信息
export const addOldData = (params: { oldAccId?: string }) => {
  return request({
    url: `/companyInfo/addOldData?oldAccId=${params.oldAccId}`,
    method: 'post',
  });
};

/**
 * 单位信息获取
 */
// id获取单位主表
export const getCompanyInfo = (id) => {
  return request({
    url: `/companyInfo/${id}`,
    method: 'get',
  });
};
// 分页获取单位主表
export const getCompanyList = (params) => {
  return request({
    url: `companyInfo/page`,
    method: 'get',
    params,
  });
};
// 获取审批流
export const getApproveProcess = (id) => {
  return request({
    url: `companyInfo/getApproveProcess/${id}`,
    method: 'get',
  });
};
// 获取审批数量
export const getStateNumber = () => {
  return request({
    url: '/companyInfo/getStateNumber',
    method: 'get',
  });
};
// 审批历史
export const getComHistoryApproveData = (id: number | string) => {
  return request({
    url: `/changeLog/getComHistoryApproveData/${id}`,
    method: 'get',
  });
};
// 获取文件列表
export const getFileType = () => {
  return request({
    url: '/companyInfo/getFileType',
    method: 'get',
  });
};
/**
 * 单位信息操作
 */
// 单位端
// 保存
export const saveCompanyInfo = (params) => {
  return request({
    url: `/companyInfo/save`,
    method: 'post',
    data: params,
  });
};
// 提交
export const commitCompanyInfo = (params) => {
  return request({
    url: `/companyInfo/commit`,
    method: 'post',
    data: params,
  });
};
// 审核端
export const approveCompanyInfo = (params: {
  approveState: number;
  businessId: string;
  userId: string;
}) => {
  return request({
    url: `/companyInfo/approve`,
    method: 'post',
    data: params,
  });
};
import { request } from '@/framework/utils/request';

/**
 * 首页列表
 */
// 列表获取所有实验室备案信息
export const getAllRecord = (params: {
  labId: string;
  orderBy: [{ field: 'auditStatus'; order: 'asc' }];
}) => {
  return request({
    url: '/labInfo/',
    method: 'get',
    params,
  });
};
// 复制创建旧信息
export const addOldData = (params: { oldAccId?: string }) => {
  return request({
    url: `/labInfo/addOldData?oldAccId=${params.oldAccId}`,
    method: 'post',
  });
};

/**
 * 基本信息
 */
// 实验室备案：基本信息
export const getLabInfo = (id) => {
  return request({
    url: `/labInfo/${id}`,
    method: 'get',
  });
};
// 实验室备案：基本信息（列表）
export const getLabInfoList = (params) => {
  return request({
    url: '/labInfo/page',
    method: 'get',
    params,
  });
};
export const getStateNumber = () => {
  return request({
    url: '/labInfo/getStateNumber',
    method: 'get',
  });
};

/**
 * 真菌
 */
// 实验室备案：真菌表
export const getFungusList = (params) => {
  return request({
    url: '/labActionFungus/page',
    method: 'get',
    params,
  });
};

// 真菌：添加
export const addFungusData = (params) => {
  return request({
    url: '/labActionFungus/',
    method: 'post',
    data: params,
  });
};

// 真菌：删除
export const delFungusData = (id) => {
  return request({
    url: `/labActionFungus/${id}`,
    method: 'delete',
  });
};

/**
 * 细菌
 */
// 实验室备案：细菌表
export const getBacterialList = (params) => {
  return request({
    url: '/labActionBacterial/page',
    method: 'get',
    params,
  });
};

// 细菌：添加
export const addBacterialData = (params) => {
  return request({
    url: '/labActionBacterial/',
    method: 'post',
    data: params,
  });
};

// 细菌：删除
export const delBacterialData = (id) => {
  return request({
    url: `/labActionBacterial/${id}`,
    method: 'delete',
  });
};

/**
 * 其他
 */
// 实验室备案：其他表
export const getOtherList = (params) => {
  return request({
    url: '/labActionOther/page',
    method: 'get',
    params,
  });
};
// 其他：添加
export const addOtherData = (params) => {
  return request({
    url: '/labActionOther/',
    method: 'post',
    data: params,
  });
};

// 其他：删除
export const delOtherData = (id) => {
  return request({
    url: `/labActionOther/${id}`,
    method: 'delete',
  });
};

/**
 * 病毒
 */
// 实验室备案：病毒表
export const getVirusList = (params) => {
  return request({
    url: '/labActionVirus/page',
    method: 'get',
    params,
  });
};
// 病毒：删除
export const delVirusData = (id) => {
  return request({
    url: `/labActionVirus/${id}`,
    method: 'delete',
  });
};
// 病毒：添加
export const addVirusData = (params) => {
  return request({
    url: `/labActionVirus/`,
    method: 'post',
    data: params,
  });
};

/**
 * 设备
 */
// 实验室备案：设备表
export const getEquipmentList = (params) => {
  return request({
    url: '/labEquipment/page',
    method: 'get',
    params,
  });
};

// 设备：删除
export const delEquipmentData = (id) => {
  return request({
    url: `/labEquipment/${id}`,
    method: 'delete',
  });
};
// 设备：添加
export const addEquipmentData = (params) => {
  return request({
    url: `/labEquipment/`,
    method: 'post',
    data: params,
  });
};
// 修改
export const editEquipmentData = (params) => {
  return request({
    url: `/labEquipment/${params.id}`,
    method: 'put',
    data: params,
  });
};

/**
 * 人员
 */
// 实验室备案：人员表
export const getPersonList = (params) => {
  return request({
    url: '/labPerson/page',
    method: 'get',
    params,
  });
};

// 删除
export const delPersonData = (id) => {
  return request({
    url: `/labPerson/${id}`,
    method: 'delete',
  });
};
// 添加
export const addPersonData = (params) => {
  return request({
    url: `/labPerson/`,
    method: 'post',
    data: params,
  });
};
// 修改
export const editPersonData = (params) => {
  return request({
    url: `/labPerson/${params.id}`,
    method: 'put',
    data: params,
  });
};

/**
 * 基本信息管理
 */
// 保存基本信息
export const saveLabInfo = (params) => {
  return request({
    url: '/labInfo/save',
    method: 'post',
    data: params,
  });
};
// 提交基本信息
export const commitLabInfo = (params) => {
  return request({
    url: '/labInfo/commit',
    method: 'post',
    data: params,
  });
};
// 分页日志查询
export const getLabLog = (params) => {
  return request({
    url: '/changeLog/page',
    method: 'get',
    params,
  });
};
// 修改行政区划
export const saveDivision = (params: { id: string; divisionId: string }) => {
  return request({
    url: `labInfo/${params.id}`,
    method: 'put',
    data: {
      divisionId: params.divisionId,
    },
  });
};
/**
 * 实验室信息审批
 */
// 受理
export const acceptLabInfo = (params: { userId: string; labAccId: string }) => {
  return request({
    url: '/labInfo/accept',
    method: 'post',
    params,
  });
};
// 审核、退回
export const approveLabInfo = (params: {
  userId: string;
  labAccId: string;
  username: string;
  comments: string;
  approveState: 2 | 3;
}) => {
  return request({
    url: '/labInfo/approve',
    method: 'post',
    data: params,
  });
};
// 审批流
export const getApproveProcess = (id: number | string) => {
  return request({
    url: `/labInfo/getApproveProcess/${id}`,
    method: 'get',
  });
};
// 审批历史
export const getHistoryApproveData = (id: number | string) => {
  return request({
    url: `/changeLog/getHistoryApproveData/${id}`,
    method: 'get',
  });
};
declare namespace API {
    // 实验室信息
    type BaseInfo = {
        companyName: string //单位名称
        labName: string //实验室名称
        divisionId: string; // 行政区域
        address: {
            address: string
            latitude: number
            longitude: number
        }; // 实验室地址
        principal: string //实验室负责人
        principalIdcard: string //负责人身份证
        principalTitle: string //负责人职称
        principalContact: string //负责人联系方式
        area: string; // 实验室总面积
        labType: string //实验室类别
        labSubclass: string //实验室子类别
        safetyLevel: number; // 实验室安全级别 0-bsl1 1-bsl2 2-加强型bsl2 3-bsl3 4-bsl4
        isNegativepressureLab: string //是否为负压实验室
        isNovelcoronavirusLab: string //是否为新冠核酸检测实验室
        facilityCharacteristics: number; // 实验室特点 0-固定 1-离开固定设施的现场 2-临时 3-移动
        facilityType: string //设施类型  实验室类型 0-方舱 1-车载 2-气膜
        propertyUnit?: string; // 产权单位
        facilityUser?: string; // 设施使用单位
        isAnimalInfectionExperiment: string //是否进行动物感染实验
        animalUsePermit: string; // 实验动物使用许可证
        highPathogenicityLeakage: string //高致病性微生物泄露情况
        floorPlan: string //备案实验室单元平面示意图
        processState: '1' | '2' | '3' | '4' | '5' | '6'; // 审批流程 6-实验室 5-单位 4-区 3-市 2-省 1-管理员
        submitState: 0 | 1 | 2 | 3 | 4; // 当前节点状态 0-待提交 1-待受理 2-待审批 3-已审批 4-已退回
        auditStatus: number // 总状态 -1-待提交 0-待审批 1-已提交 2-已审批 3-已退回
        certCode: string //备案编号

        animalUsePermit: string[] // 动物实验
        highPathogenicityLeakage: string[] // 高致病
        floorPlan: string[] // 平面图
        principalEvidenceMaterial: string[] // 负责人任命佐证材料
        letterOfAuthenticity: string[] // 上传材料真实性承诺书
        // auditTime:string //最近一次审核时间
        // auditPersonName:string // 最近一次地市审核人
        // auditResult:string // 最近一次审核结果
        // certFileIds:string //备案证书file_id
        // companyId:string //所属单位ID
        // createTime:string //
        // creatorId:string //
        // id:string //
        // modifierId:string //
        // modifyTime:string //
        // orderBy[0].field:string //排序字段名称
        // orderBy[0].order:string //排序类型
        // organizationId:string //数据归属机构
        // pageNum:string //当前页码
        // pageSize:string //每页显示条数
        // startSize:string //分页开始条目数
        // companyAuditOpinion: string;
        // companyAuditor?: string;
        // cityAuditOpinion: string;
        // cityAuditor?: string;
        // provinceAuditOpinion: string;
        // provinceAuditor?: string;
    };
    type VirusInfo = {
        id: number;
        virusType: string
        virusName: string;
        vertifyLevel: string; // 分类学地位
        hazardClass: string; // 危害程度分类
        isVirusCultrue: boolean; // 病毒培养
        isAnimalInfectionExpe: boolean; // 动物感染实验
        isHandleNotCulttureInfectedMaterial: boolean; // 未经培养的感染材料操作
        isHandleInactivateMaterial: boolean; // 灭活材料操作
        isHandleInfectedMaterial: boolean; // 无感染材料操作
        isUnkownVirus: boolean; // 未知病毒
        memo: string;
    };
    type BacteriaInfo = {
        id: number;
        bacterialType: string
        bacterialName: string;
        hazardClass: string; // 危害程度分类
        isLiveBecteriaOperation: boolean; // 活菌操作
        isAnimalInfectionExpe: boolean; // 动物感染实验
        isSampleTesting: boolean; // 样本检测
        isHandleInfectedMaterial: boolean; // 无感染材料操作
        isUnkownVirus: boolean; // 未知病毒
        memo: string;
    };
    type FungusInfo = {
        id: number;
        fungusType: string
        fungusName: string;
        hazardClass: string; // 危害程度分类
        isLiveFungusOperation: boolean; // 活菌操作
        isAnimalInfectionExpe: boolean; // 动物感染实验
        isSampleTesting: boolean; // 样本检测
        isHandleInfectedMaterial: boolean; // 无感染材料操作
        memo: string;
    };
    type OtherInfo = {
        id: number;
        sampleName: string;
        hazardClass: string; // 危害程度分类
        isLiveFungusOperation: boolean // 大量活菌操作
        isAnimalInfectionExpe: boolean; // 动物感染实验
        isSampleTesting: boolean // 样本检测
        isHandleInfectedMaterial: boolean; // 无感染材料操作

        isUnkownVirus: boolean
        memo: string;
    };
    type EquipmentConfigInfo = {
        id: number;
        type: number; // 设备类型
        name: string; // 设备名称
        purchaseDate: string; //购置日期
        lastTestTime: string; //最近检定日期
        specifications: string; //规格型号
        testCycle: number; //检定日期
        manufacturer: string; //生产厂家
        code: string; //设备编号
        status: number; //设备状态
        imgUrl: string
        remarks: string
    };
    type RelevantPersonnelInfo = {
        name: string;
        sex: number;
        birthDate: string;
        workDate: string;
        jobTitle: number;
        academic: number;
        major: string;
        jobs: number;
        idcard: string;
        certNum: string;
        imgUrl: string
        remarks: string
    };

    // 单位信息
    type UnitInfo = {
        createTime: string
        id: string;
        auditStatus: -1 | 0 | 1 | 2 | 3; // -1-待提交 0-待审批 1-已提交 2-备案通过 3-已退回
        processState: number;
        submitState: 0 | 1 | 2 | 3 | 4; // 0-待提交 1-待受理 2-待审核 3-已审核 4-已退回
        creditCode: string;
        companyName: string;
        companyAddress: string;
        zipCode: string;
        divisionId: string;
        legalRepresentative: string;
        legalRepresentativeId: string;
        legalRepresentativePhone: string;
        contactPerson: string;
        contactPhone: string;
        companyNature: string;
        companyLevel: string;
        isMedicalCommunity: boolean;
        isMedicalSubject: boolean;
        medicalCommunity: string;
        isAffiliatedHospital: boolean;
        affiliatedUniversity: string;
        biosafetyManagementManual: string;
        safetyManual: string;
        programFile: string;
        recordForm: string;
        riskAssessmentReports: string;
        sop: string;
        otherFile: string;
    };
}
import { request } from "@/framework/utils/request";


// 获取文章审批统计个数
export const getArticleStat = () => {
  return request({
    url: '/infoDist/getStateNumber',
    method: 'get'
  })
}

// 审批
export const approveArticle = (data: {
  userId: string,
  businessId: string,
  approveState: 2 | 3
}) => {
  return request({
    url: '/infoDist/approve',
    method: 'post',
    data
  })
}import {DictConfig} from '@/framework/core/dict/types';
import {DictNameType} from '@/api/dict/types'
import {getDictByType} from '@/api/dict'

const dict: Partial<Record<DictNameType, DictConfig>> = {
    /**
     * lab
     */
    Sex: {
        data: [
            {
                label: '男',
                name: '男',
                value: 1
            },
            {
                label: '女',
                name: '女',
                value: 2
            }
        ]
    },
    labCategory: {
        data: [
            {
                label: '微生物实验室',
                value: 1,
                children: [
                    {subName: '微生物实验室（细菌放线菌）', subValue: '微生物实验室（细菌放线菌）'},
                    {subName: '微生物实验室（真菌）', subValue: '微生物实验室（真菌）'},
                    {subName: '微生物实验室（病毒）', subValue: '微生物实验室（病毒）'},
                    {subName: '微生物实验室（朊病毒）', subValue: '微生物实验室（朊病毒）'},
                ],
            },
            {
                label: '检验实验室',
                value: 2,
                children: [
                    {subName: '生化', subValue: '生化'},
                    {subName: '免疫', subValue: '免疫'},
                    {subName: 'PCR', subValue: 'PCR'},
                    {subName: '门诊', subValue: '门诊'},
                    {subName: '急诊', subValue: '急诊'},
                    {subName: '急诊检测', subValue: '急诊检测'},
                    {subName: '细菌', subValue: '细菌'},
                    {subName: '细胞', subValue: '细胞'},
                    {subName: '病理', subValue: '病理'},
                ],
            },
            {
                label: '虫媒实验室',
                value: 3,
                children: [
                    {subName: '消毒杀虫', subValue: '消毒杀虫'},
                    {subName: '虫媒病毒', subValue: '虫媒病毒'},
                    {subName: '媒介生物', subValue: '媒介生物'},
                ],
            },
            {
                label: '专病实验室',
                value: 4,
                children: [
                    {subName: '艾滋病', subValue: '艾滋病'},
                    {subName: '结核病', subValue: '结核病'},
                    {subName: '流感', subValue: '流感'},
                    {subName: '脊灰', subValue: '脊灰'},
                    {subName: '麻疹', subValue: '麻疹'},
                    {subName: '布鲁氏病菌', subValue: '布鲁氏病菌'},
                ],
            },
            {
                label: '专业实验室',
                value: 5,
                children: [
                    {subName: '肠道病毒（病原）', subValue: '肠道病毒（病原）'},
                    {subName: '呼吸道病毒（病原）', subValue: '呼吸道病毒（病原）'},
                    {subName: '专业实验室（血液）', subValue: '专业实验室（血液）'},
                ],
            },
            {
                label: '其他特殊实验室',
                value: 6,
            },
        ],
    },
    // BioSecurityLevel: {
    //     data: async () => await getDictByType('BioSecurityLevel')
    // },
    // FacilityCharacteristics: {
    //     data: async () => await getDictByType('FacilityCharacteristics'),
    // },
    // FacilityType: {
    //     data: async () => await getDictByType('FacilityType'),
    // },
    // VirusType: {
    //     data: async () => await getDictByType('VirusType'),
    // },
    // // tag: 设备
    // DeviceType: {
    //     data: async () => await getDictByType('DeviceType'),
    // },
    // DeviceStatus: {
    //     data: async () => await getDictByType('DeviceStatus'),
    // },
    // // tag: 相关人员
    // JobTitle: {
    //     data: async () => await getDictByType('JobTitle'),
    // },
    // Academic: {
    //     data: async () => await getDictByType('Academic'),
    // },
    // Job: {
    //     data: async () => await getDictByType('Job'),
    // },
    /**
     * unit
     */
    // NatureOfTheUnit: {
    //     data: async () => await getDictByType('NatureOfTheUnit'),
    // },
    // UnitLevel: {
    //     data: async () => await getDictByType('UnitLevel'),
    // },
    // Whether: {
    //     data: async () => await getDictByType('Whether'),
    // },


};

export default dict;
<template>
  <div class="tabs">
    <div class="tabs-btn">
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_APPROVAL' }"
        @click="changTabFn('TO_BE_APPROVAL')"
      >
        待审核 · {{ stateList['2'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'PASSED' }"
        @click="changTabFn('PASSED')"
      >
        已审核 · {{ stateList['3'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'RETURNED' }"
        @click="changTabFn('RETURNED')"
      >
        已退回 · {{ stateList['4'] }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === '' }" @click="changTabFn('')">
        全部 · {{ stateList['-1'] }}
      </div>
    </div>
    <div class="tabs-content">
      <SuperTable
        ref="superTableRef"
        :mode="1"
        search
        pager
        headerTitle=""
        border
        align="center"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
        :auto-load="false"
        search-btn-type="white-blue"
        :height="tableHeightComputed"
      />
    </div>
  </div>
</template>

<script setup lang="ts" name="cityCompanyInfoApprove">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { onActivated, ref, Ref, inject, computed } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { baseColumns } from './columns';
  import type { TableColumnItem } from './columns';
  import { useUserStore } from '@/store/modules/user';
  import { getCompanyList, getStateNumber } from '@/modules/infoManagement/api/company';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight!.value - 56
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const userStore = useUserStore();
  const id = userStore.roles[0].id; // 用户id
  const level = userStore.organization.level;
  const current = Number(id) + level * 10;

  // 状态值
  const activeKey = ref('');
  const changTabFn = (key: string) => {
    activeKey.value = key;
    superTableRef.value?.refreshTable();
  };

  /**
   * 状态数量
   */
  const stateList = ref({
    '1': 0,
    '2': 0,
    '3': 0,
    '4': 0,
    '-1': 0,
  });
  const getStateNumberFn = async () => {
    stateList.value = await getStateNumber();
  };
  getStateNumberFn();

  /**
   * 表格
   */
  // 数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      status: activeKey.value,
    };
    let res = await getCompanyList(params);
    await getStateNumberFn();
    return res;
    // return {
    //   data: [
    //     {id: '1', submitState: 1, processState: 1},
    //     {id: '2', submitState: 2, processState: 1},
    //     {id: '2', submitState: 3, processState: 1},
    //     {id: '2', submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        let value = row.submitState;
        if (current > row.processState) value = 3;
        if (row.auditStatus === 3) value = 4;
        if (row.auditStatus === 2) value = 3;
        switch (value) {
          case 2:
            return [
              {
                label: '审核',
                onClick() {
                  router.push({
                    name: 'cityCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 3:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'cityCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 4:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'cityCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
        }
      },
    },
  ];
  const refreshTable = () => {
    superTableRef.value?.refreshTable();
  };
  onActivated(() => {
    if (route.params.activeKey) {
      activeKey.value = String(route.params.activeKey)
    }
    superTableRef.value?.queryTable();
  });
</script>

<style scoped lang="less"></style>
<template>
  <div class="tabs">
    <div class="tabs-btn">
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_REVIEWED' }"
        @click="changTabFn('TO_BE_REVIEWED')"
      >
        待受理 · {{ stateList['待受理'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_APPROVAL' }"
        @click="changTabFn('TO_BE_APPROVAL')"
      >
        待审核 · {{ stateList['待审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'PASSED' }"
        @click="changTabFn('PASSED')"
      >
        已审核 · {{ stateList['已审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'RETURNED' }"
        @click="changTabFn('RETURNED')"
      >
        已退回 · {{ stateList['已退回'] }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === '' }" @click="changTabFn('')">
        全部 · {{ stateList['全部'] }}
      </div>
    </div>
    <div class="tabs-content">
      <SuperTable
        ref="superTableRef"
        :mode="1"
        search
        pager
        headerTitle=""
        border
        align="center"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
        :auto-load="false"
        search-btn-type="white-blue"
        :height="tableHeightComputed"
      />
    </div>
  </div>
</template>

<script setup lang="ts" name="cityLabInfoApprove">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { computed, onActivated, ref, Ref, inject } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { baseColumns as columnsWait } from './columns-wait';
  import type { TableColumnItem } from './columns-wait';
  import { getLabInfoList, acceptLabInfo, getStateNumber } from '@/modules/infoManagement/api/lab';
  import { useUserStore } from '@/store/modules/user';
  import { message } from 'ant-design-vue';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight');
  const tableHeightComputed = computed(() => {
    return tableHeight!.value - 56;
  });
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const userStore = useUserStore();
  const id = userStore.roles[0].id; // 用户id
  const level = userStore.organization.level;
  const current = Number(id) + level * 10;

  // 状态值
  const activeKey = ref('');
  const changTabFn = (key: string) => {
    activeKey.value = key;
    superTableRef.value?.refreshTable();
  };

  /**
   * 实验室状态数量
   */
  const stateList = ref({
    待受理: 0,
    待审核: 0,
    已审核: 0,
    已退回: 0,
    全部: 0,
  });
  const getStateNumberFn = async () => {
    stateList.value = await getStateNumber();
  };
  getStateNumberFn();

  /**
   * 表格
   */
  // 数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      status: activeKey.value,
    };
    let res = await getLabInfoList(params);
    await getStateNumberFn();
    return res;
    // return {
    //   data: [
    //     {id: '1', submitState: 1, processState: 1},
    //     {id: '2', submitState: 2, processState: 1},
    //     {id: '2', submitState: 3, processState: 1},
    //     {id: '2', submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...columnsWait,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        let value = row.submitState;
        if (current > row.processState) value = 3;
        if (row.auditStatus === 3) value = 4;
        if (row.auditStatus === 2) value = 3;
        switch (value) {
          case 1:
            return [
              {
                label: '受理',
                popConfirm: {
                  title: '确定受理吗？',
                  onCancel() {},
                  async onConfirm() {
                    await acceptLabInfo({ userId: userStore.organization.id, labAccId: row.id });
                    message.success('受理成功');
                    superTableRef.value?.refreshTable();
                  },
                },
              },
            ];
          case 2:
            return [
              {
                label: '审核',
                onClick() {
                  router.push({
                    name: 'cityLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 3:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'cityLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 4:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'cityLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
        }
      },
    },
  ];
  // #endregion end-数据源

  //
  const refreshTable = () => {
    superTableRef.value?.refreshTable();
  };
  onActivated(() => {
    if (route.params.activeKey) {
      activeKey.value = String(route.params.activeKey)
    }
    superTableRef.value?.queryTable();
  });
  // #endregion end
</script>

<style scoped lang="less"></style>
<template>
  <SuperTable
    ref="superTableRef"
    border
    search
    headerTitle=""
    align="center"
    :mode="1"
    :pager="false"
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :toolbar="{}"
    search-btn-type="white-blue"
    :height="tableHeight"
  >
    <template #action>
      <a-button type="blue-white" @click="state.modal.showModal = true">
        <template #icon>
          <BtnSvgIcon name="tianjia" />
        </template>
        添加
      </a-button>
      <a-button type="white-blue" @click="changeExport">
        <template #icon>
          <BtnSvgIcon name="daochu" />
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
  <DraggableModal
    v-model:visible="state.modal.showModal"
    title="添加单位备案"
    :destroy-on-close="true"
    @cancel="modalCancelFn"
  >
    <template v-if="!state.modal.isApproval">
      <Row justify="center">
        <Col :span="10">
          <a-radio-group v-model:value="state.modal.addType">
            <a-radio :style="radioStyle" :value="1">添加新的单位备案</a-radio>
            <a-radio :style="radioStyle" :value="2">复制往期单位备案</a-radio>
          </a-radio-group>
        </Col>
      </Row>
      <Row justify="center" v-if="state.modal.addType === 2">
        <Col :span="12">
          <a-select v-model:value="state.modal.addId" :style="selectStyle" placeholder="请选择往期备案数据">
            <a-select-option v-for="item in state.recordList" :key="item.id" :value="item.id">
              {{ dayjs(item.createTime).format('YYYY-MM-DD') }}
            </a-select-option>
          </a-select>
        </Col>
      </Row>
    </template>
    <template v-else>
      <Row justify="center" align="middle">
        <info-circle-two-tone twoToneColor="#fd0015" style="margin-right: 5px" />
        当前有单位备案申请正在审批中，无法添加新的单位备案申请。
      </Row>
    </template>
    <template #footer>
      <template v-if="!state.modal.isApproval">
        <a-button type="white-blue" @click="modalCancelFn">取消</a-button>
        <a-button type="blue-white" @click="modalSaveFn">保存</a-button>
        <a-button type="blue-white" @click="modalEditFn">保存并编辑</a-button>
      </template>
      <template v-else>
        <a-button type="blue-white" @click="modalCancelFn">关闭</a-button>
      </template>
    </template>
  </DraggableModal>
</template>

<script setup lang="ts">
  import dayjs from 'dayjs';
  import router from '@/router';
  import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
  import type { TableColumnItem } from './columns';
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { baseColumns } from './columns';
  import { reactive, ref, Ref, inject, watch } from 'vue';
  import { getAllRecord, addOldData } from '@/modules/infoManagement/api/company';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import { message, Row, Col } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';
  import { InfoCircleTwoTone } from '@ant-design/icons-vue';
  import _ from 'lodash-es';

  const tableHeight = inject<Ref<number>>('tableHeight');
  /**
   * type
   */
  type state = {
    modal: {
      addType: 1 | 2;
      addId: string;
      showModal: boolean;
      isApproval: boolean;
    };
    recordList: any[];
  };

  /**
   * data
   */
  const userStore = useUserStore();
  const state: state = reactive({
    modal: {
      addType: 1,
      showModal: false,
      isApproval: true,
    },
  } as state);

  watch(
    () => state.recordList,
    () => {
      const arr = [-1, 0, 1];
      state.modal.isApproval = state.recordList?.some((item) => {
        return arr.includes(item.auditStatus);
      });
    },
    {
      deep: true,
      immediate: true,
    },
  );
  /**
   * request
   */
  // 使用旧信息
  const addOldDataFn = async () => {
    let params = {
      oldAccId: state.modal.addId ?? '',
    };
    return await addOldData(params);
  };
  /**
   * modal
   */
  // 取消
  const modalCancelFn = () => {
    state.modal = {
      ...state.modal,
      addType: 1,
      addId: '',
      showModal: false,
    };
  };
  // 保存
  const modalSaveFn = _.debounce(async () => {
    if (state.modal.addType === 2 && !state.modal.addId?.trim()) {
      return message.warn('未选择需要复制的备案信息');
    }
    await addOldDataFn();
    message.success('保存成功！');
    await refreshData();
    modalCancelFn();
  }, 300);
  // 保存编辑
  const modalEditFn = _.debounce(async () => {
    if (state.modal.addType === 2 && !state.modal.addId?.trim()) {
      return message.warn('未选择需要复制的备案信息');
    }
    const res = await addOldDataFn();
    await router.push({
      name: 'companyInfoDetail',
      query: {
        id: res,
      },
    });
  }, 300);
  /**
   * 表格
   */
  const superTableRef = ref<InstanceType<typeof SuperTable>>();

  let columns: TableColumnItem[] = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }: { row: any }) => [
        {
          label: '查看',
          onClick: () => {
            let params: any = {
              name: 'companyInfoDetail',
              query: {
                id: row.id,
              },
            };
            if ([1, 2, 4].includes(row.auditStatus)) { // -1和3可以编辑
              params.query.readonly = 'true';
            }
            router.push(params);
          },
        },
      ],
    },
  ];
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      ...data,
      compnayId: userStore.userInfo.id,
      orderBy: [{ field: 'auditStatus', order: 'asc' }],
    };
    const res = await getAllRecord(params);
    state.recordList = res;
    return {
      data: res,
    };
    // return {
    //   data: [{}, {}, {}],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  const refreshData = async () => {
    await superTableRef.value?.refreshTable();
  };
  const changeExport = () => {
    superTableRef.value?.openExport();
  };

  /**
   * style
   */
  const radioStyle = {
    display: 'flex',
    height: '30px',
    lineHeight: '30px',
  };
  const selectStyle = {
    'margin-left': '45px',
    ' margin-top': '10px',
    width: '200px',
    height: '30px',
  };
</script>

<style scoped lang="less"></style>
<template>
  <div class="tabs">
    <div class="tabs-btn">
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_APPROVAL' }"
        @click="changTabFn('TO_BE_APPROVAL')"
      >
        待审核 · {{ stateList['待审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'PASSED' }"
        @click="changTabFn('PASSED')"
      >
        已审核 · {{ stateList['已审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'RETURNED' }"
        @click="changTabFn('RETURNED')"
      >
        已退回 · {{ stateList['已退回'] }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === '' }" @click="changTabFn('')">
        全部 · {{ stateList['全部'] }}
      </div>
    </div>
    <div class="tabs-content">
      <SuperTable
        ref="superTableRef"
        search
        pager
        :mode="1"
        headerTitle=""
        border
        align="center"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
        search-btn-type="white-blue"
        :height="tableHeightComputed"
      />
    </div>
  </div>
</template>

<script setup lang="ts" name="companyLabInfoApprove">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { onActivated, ref, Ref, computed, inject } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { baseColumns as columnsWait } from './columns-wait';
  import type { TableColumnItem } from './columns-wait';
  import { getLabInfoList, getStateNumber } from '@/modules/infoManagement/api/lab';
  import { useUserStore } from '@/store/modules/user';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight');
  const tableHeightComputed = computed(() => {
    return tableHeight!.value - 56;
  });
  // 通用值
  const route = useRoute()
  const router = useRouter();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const userStore = useUserStore();
  const id = userStore.roles[0].id;
  const level = userStore.organization.level;
  const current = Number(id) + level * 10;

  // 状态值
  const activeKey = ref(''); // tab
  const changTabFn = (key: string) => {
    activeKey.value = key;
    superTableRef.value?.refreshTable();
  };

  /**
   * 实验室状态数量
   */
  const stateList = ref({
    待受理: 0,
    待审核: 0,
    已审核: 0,
    已退回: 0,
    全部: 0,
  });
  const getStateNumberFn = async () => {
    stateList.value = await getStateNumber();
  };
  getStateNumberFn();

  /**
   * 表格
   */
  // #region  start

  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      status: activeKey.value,
    };
    let res = await getLabInfoList(params);
    await getStateNumberFn();
    return res;
  };

  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...columnsWait,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        let value = row.submitState;
        if (current > row.processState) value = 3;
        if (row.auditStatus === 3) value = 4;
        if (row.auditStatus === 2) value = 3;
        switch (value) {
          case 2:
            return [
              {
                label: '审核',
                onClick() {
                  router.push({
                    name: 'companyLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 3:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'companyLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 4:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'companyLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
        }
      },
    },
  ];
  // #endregion end-数据源

  //
  const refreshTable = () => {
    superTableRef.value?.refreshTable();
  };
  onActivated(() => {
    if (route.params.activeKey) {
      activeKey.value = String(route.params.activeKey)
    }
    refreshTable();
  });
  // #endregion end
</script>

<style scoped lang="less"></style>
<template>
  <SuperTable
    ref="superTableRef"
    :mode="1"
    search
    headerTitle=""
    :pager="false"
    border
    align="center"
    :columns="columns"
    :data-request="fetchData"
    :export-config="{}"
    :toolbar="{}"
    search-btn-type="white-blue"
    :height="tableHeight"
  >
    <template #action>
      <a-button type="blue-white" @click="state.modal.showModal = true">
        <template #icon>
          <BtnSvgIcon name="tianjia" />
        </template>
        添加
      </a-button>
      <a-button type="white-blue" @click="changeExport">
        <template #icon>
          <BtnSvgIcon name="daochu" />
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
  <DraggableModal
    v-model:visible="state.modal.showModal"
    title="添加实验室备案"
    :destroy-on-close="true"
    @cancel="modalCancelFn"
  >
    <template v-if="!state.modal.isApproval">
      <Row justify="center">
        <Col :span="10">
          <a-radio-group v-model:value="state.modal.addType">
            <a-radio :style="radioStyle" :value="1">添加新的实验室备案</a-radio>
            <a-radio :style="radioStyle" :value="2">复制往期实验室备案</a-radio>
          </a-radio-group>
        </Col>
      </Row>
      <Row justify="center" v-if="state.modal.addType === 2">
        <Col :span="12">
          <a-select
            v-model:value="state.modal.addId"
            :style="selectStyle"
            placeholder="请选择往期备案数据"
          >
            <a-select-option v-for="item in state.recordList" :key="item.id" :value="item.id">
              {{ (item.certCode || '') + `(${dayjs(item.createTime).format('YYYY-MM-DD')})` }}
            </a-select-option>
          </a-select>
        </Col>
      </Row>
    </template>
    <template v-else>
      <Row justify="center" align="middle">
        <info-circle-two-tone twoToneColor="#fd0015" style="margin-right: 5px" />
        当前有实验室备案申请正在审批中，无法添加新的实验室备案申请。
      </Row>
    </template>
    <template v-if="!state.modal.isApproval" #footer>
      <a-button type="white-blue" @click="modalCancelFn">取消</a-button>
      <a-button type="blue-white" @click="modalSaveFn">保存</a-button>
      <a-button type="blue-white" @click="modalEditFn">保存并编辑</a-button>
    </template>
    <template v-else #footer>
      <a-button type="blue-white" @click="modalCancelFn">确定</a-button>
    </template>
  </DraggableModal>
</template>

<script setup lang="ts">
  import type { TableColumnItem } from './columns';
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { baseColumns } from './columns';
  import { watch, reactive, ref, inject, Ref } from 'vue';
  import { getAllRecord, addOldData } from '@/modules/infoManagement/api/lab';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import router from '@/router';
  import { message, Row, Col } from 'ant-design-vue';
  import { useUserStore } from '@/store/modules/user';
  import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
  import { InfoCircleTwoTone } from '@ant-design/icons-vue';
  import dayjs from 'dayjs';
  import { downloadFile } from '@/utils/file';
  import _ from 'lodash-es';

  const tableHeight = inject<Ref<number>>('tableHeight');
  const userStore = useUserStore();
  type state = {
    modal: {
      addType: 1 | 2;
      addId: string | null;
      showModal: boolean;
      isApproval: boolean;
    };
    recordList: any[];
  };

  const state: state = reactive({
    modal: {
      addType: 1,
      addId: null,
      showModal: false,
      isApproval: true,
    },
  } as state);

  watch(
    () => state.recordList,
    () => {
      const arr = [-1, 0, 1];
      state.modal.isApproval = state.recordList?.some((item) => {
        return arr.includes(item.auditStatus);
      });
    },
    {
      deep: true,
      immediate: true,
    },
  );
  /**
   * 请求
   */
  // 使用旧信息
  const addOldDataFn = async () => {
    let params = {
      oldAccId: state.modal.addId ?? '',
    };
    return await addOldData(params);
  };
  /**
   * 弹窗
   */
  // 取消
  const modalCancelFn = () => {
    state.modal = {
      ...state.modal,
      addType: 1,
      addId: '',
      showModal: false,
    };
  };
  // 保存
  const modalSaveFn = _.debounce(async () => {
    if (state.modal.addType === 2 && !state.modal.addId?.trim()) {
      return message.warn('未选择需要复制的备案信息');
    }
    await addOldDataFn();
    message.success('保存成功！');
    await refreshData();
    modalCancelFn();
  }, 300);

  // 保存编辑
  const modalEditFn = _.debounce(async () => {
    if (state.modal.addType === 2 && !state.modal.addId?.trim()) {
      return message.warn('未选择需要复制的备案信息');
    }
    const res = await addOldDataFn();
    await router.push({
      name: 'labInfoDetail',
      query: {
        id: res,
      },
    });
  }, 300);
  /**
   * 表格
   */
  const superTableRef = ref<InstanceType<typeof SuperTable>>();

  let columns: TableColumnItem[] = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }: { row: any }) => [
        {
          label: '查看',
          onClick: () => {
            // todo
            router.push({
              name: 'labInfoDetail',
              query: {
                id: row.id,
              },
            });
          },
        },
        // 备案证书下载
        {
          label: '备案证书下载',
          ifShow: row.auditStatus === 2,
          onClick: () => {
            downloadFile({ name: `${row.labAccount || ''}备案证书`, md5: row.certFileMD5 });
          },
        },
      ],
    },
  ];
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      ...data,
      // 实验室id（登录实验室用户id）
      labId: userStore.userInfo.id,
      orderBy: [{ field: 'auditStatus', order: 'asc' }],
    };
    const res = await getAllRecord(params);
    state.recordList = res;
    return {
      data: res,
    };
    // return {
    //   data: [{}, {}, {}],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };
  const refreshData = () => {
    superTableRef.value?.refreshTable();
  };
  const changeExport = () => {
    superTableRef.value?.openExport();
  };

  /**
   * style
   */
  const radioStyle = {
    display: 'flex',
    height: '30px',
    lineHeight: '30px',
  };
  const selectStyle = {
    'margin-left': '45px',
    ' margin-top': '10px',
    width: '200px',
    height: '30px',
  };
</script>

<style scoped lang="less">
  .a {
    color: #fd0015;
  }
</style>
<template>
  <div class="tabs">
    <div class="tabs-btn">
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_APPROVAL' }"
        @click="changTabFn('TO_BE_APPROVAL')"
      >
        待审核 · {{ stateList['2'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'PASSED' }"
        @click="changTabFn('PASSED')"
      >
        已审核 · {{ stateList['3'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'RETURNED' }"
        @click="changTabFn('RETURNED')"
      >
        已退回 · {{ stateList['4'] }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === '' }" @click="changTabFn('')">
        全部 · {{ stateList['-1'] }}
      </div>
    </div>
    <div class="tabs-content">
      <SuperTable
        ref="superTableRef"
        :mode="1"
        search
        pager
        headerTitle=""
        border
        align="center"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
        :auto-load="false"
        :height="tableHeightComputed"
        search-btn-type="white-blue"
      />
    </div>
  </div>
</template>

<script setup lang="ts" name="provinceCompanyInfoApprove">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { onActivated, ref, Ref, inject, computed } from 'vue';
  import { onBeforeRouteUpdate, useRouter, useRoute } from 'vue-router';
  import { baseColumns } from './columns';
  import type { TableColumnItem } from './columns';
  import { useUserStore } from '@/store/modules/user';
  import { getCompanyList, getStateNumber } from '@/modules/infoManagement/api/company';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight')
  const tableHeightComputed = computed(() => {
    return tableHeight!.value - 56
  })
  // 通用值
  const router = useRouter();
  const route = useRoute();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const userStore = useUserStore();
  const id = userStore.roles[0].id; // 用户id
  const level = userStore.organization.level;
  const current = Number(id) + level * 10;

  // 状态值
  // tab
  const activeKey = ref('');
  const changTabFn = (key: string) => {
    activeKey.value = key;
    superTableRef.value?.refreshTable();
  };

  /**
   * 状态数量
   */
  const stateList = ref({
    '1': 0,
    '2': 0,
    '3': 0,
    '4': 0,
    '-1': 0,
  });
  const getStateNumberFn = async () => {
    stateList.value = await getStateNumber();
  };
  getStateNumberFn();

  /**
   * 表格
   */
  // 数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      status: activeKey.value,
    };
    let res = await getCompanyList(params);
    await getStateNumberFn();
    return res;
    // return {
    //   data: [
    //     {id: '1', submitState: 1, processState: 1},
    //     {id: '2', submitState: 2, processState: 1},
    //     {id: '2', submitState: 3, processState: 1},
    //     {id: '2', submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...baseColumns,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        let value = row.submitState;
        if (current > row.processState) value = 3;
        if (row.auditStatus === 3) value = 4;
        if (row.auditStatus === 2) value = 3;
        switch (value) {
          case 2:
            return [
              {
                label: '审核',
                onClick() {
                  router.push({
                    name: 'provinceCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 3:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'provinceCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
          case 4:
            return [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'provinceCompanyInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
        }
      },
    },
  ];
  const refreshTable = () => {
    superTableRef.value?.refreshTable();
  };
  onActivated(() => {
    if (route.params.activeKey) {
      activeKey.value = String(route.params.activeKey)
    }
    superTableRef.value?.queryTable();
  });
</script>

<style scoped lang="less"></style>
import type { TableColumn } from '@/framework/components/core/super-table';
import { getCategorylist } from '@/modules/cms/api/column';
import dayjs from 'dayjs';
export type TableListItem = API.ProvinceInfoPublishApproveListResultItem;
export type TableColumnItem = TableColumn<TableListItem>;

export const baseColumns: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '标题',
    field: 'title',
  },
  {
    title: '发布栏目',
    field: 'categoryCnName',
    // formItemProps: {
    //   component: 'Select',
    //   componentProps: {
    //     request: async () => {
    //       let res = await getCategorylist({})
    //       let list = res.map( item => ({
    //         label: item.cnname,
    //         value: item.id
    //       }))
    //       return list
    //     },
    //   }
    // }
  },
  {
    title: '类型',
    field: '类型',
    dict: 'ArticleType',
    hideInSearch: true
  },
  {
    title: '状态',
    field: 'status',
    dict: 'InfoPublishStatus',
    hideInSearch: true,
  },
  {
    title: '创建时间',
    field: 'createTime',
    hideInSearch: true,
    formatter: ({ row }) => {
      return row.createTime ? dayjs(row.createTime).format('YYYY-MM-DD HH:mm:ss') : ''
    }
  },
];
<template>
  <div class="tabs">
    <div class="tabs-btn">
      <div class="tabs-btn-item" :class="{ active: activeKey === 1 }" @click="changTabFn(1)">待审批 · {{state.wait}}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 2 }" @click="changTabFn(2)">已审批 · {{state.approve}}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === 3 }" @click="changTabFn(3)">已退回 · {{state.refuse}}</div>
      <div class="tabs-btn-item" :class="{ active: activeKey === -1 }" @click="changTabFn(-1)">全部 · {{state.all}}</div>
    </div>
    <div class="tabs-content">
      <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="" align="center" border
        ref="supertable" :export-config="{}" :mode="1" :auto-load="false" :height="tableHeightComputed" search-btn-type="white-blue">
      </SuperTable>
    </div>
  </div>
</template>
<script setup lang="tsx" name="provinceInfoPublishApprove">
import { reactive, ref, onActivated, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { useRouter } from 'vue-router'
import type { TableColumnItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { getArticleList } from '@/modules/cms/api/article';
import { getArticleStat } from '@/modules/infoManagement/api/org'

const tableHeight = inject<Ref<number>>('tableHeight')
const tableHeightComputed = computed(() => {
  return tableHeight!.value - 56
})
const router = useRouter()
const activeKey = ref(1)
const changTabFn = (key: number) => {
  activeKey.value = key
  supertable.value?.queryTable()
}
const state = reactive({
  wait: 0,
  approve: 0,
  refuse: 0,
  all: 0,
})

const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  let data = supertable.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    tableName: 'cms_article',
    ...data,
  };
  if (activeKey.value !== -1) {
    params.status = activeKey.value
  } else {
    params.status = '1,2,3'
  }
  const res = await getArticleStat()
  state.all = res['全部']
  state.approve = res['已审核']
  state.refuse = res['已退回']
  state.wait = res['待审核']
  return await getArticleList(params)
};
let columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 140,
    actions: ({ row }) => [
      {
        label: '审批',
        ifShow: row.status === 1,
        onClick: () => {
          router.push({
            name: 'provinceInfoPublishApproveDetail',
            query: {
              title: '3',
              id: row.aid,
              approve: 1,
            }
          })
        },
      },
      {
        label: '查看',
        onClick: () => {
          router.push({
            name: 'provinceInfoPublishApproveDetail',
            query: {
              title: '3',
              id: row.aid,
              approve: 0
            }
          })
        }
      },
    ],
  },
]

onActivated(() => {
  supertable.value?.queryTable()
})
</script>
<style lang="less" scoped>

</style><template>
  <ArticlePublishDetail />
</template>
<script setup lang="tsx">
import ArticlePublishDetail from '@/modules/cms/pages/articleManagement/appear/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <div class="tabs">
    <div class="tabs-btn">
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_REVIEWED' }"
        @click="changTabFn('TO_BE_REVIEWED')"
      >
        待受理 · {{ stateList['待受理'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'TO_BE_APPROVAL' }"
        @click="changTabFn('TO_BE_APPROVAL')"
      >
        待审核 · {{ stateList['待审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'PASSED' }"
        @click="changTabFn('PASSED')"
      >
        已审核 · {{ stateList['已审核'] }}
      </div>
      <div
        class="tabs-btn-item"
        :class="{ active: activeKey === 'RETURNED' }"
        @click="changTabFn('RETURNED')"
      >
        已退回 · {{ stateList['已退回'] }}
      </div>
      <div class="tabs-btn-item" :class="{ active: activeKey === '' }" @click="changTabFn('')">
        全部 · {{ stateList['全部'] }}
      </div>
    </div>
    <div class="tabs-content">
      <SuperTable
        ref="superTableRef"
        :mode="1"
        search
        pager
        headerTitle=""
        border
        align="center"
        :columns="columns"
        :data-request="fetchData"
        :export-config="{}"
        :auto-load="false"
        :height="tableHeightComputed"
        search-btn-type="white-blue"
      />
    </div>
  </div>
</template>

<script setup lang="ts" name="provinceLabInfoApprove">
  import { VxeGridPropTypes } from 'vxe-table';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { onActivated, ref, Ref, inject, computed } from 'vue';
  import { useRouter, useRoute } from 'vue-router';
  import { baseColumns as columnsWait } from './columns-wait';
  import type { TableColumnItem } from './columns-wait';
  import { getLabInfoList, acceptLabInfo, getStateNumber } from '@/modules/infoManagement/api/lab';
  import { useUserStore } from '@/store/modules/user';
  import { message } from 'ant-design-vue';

  /**
   * 数据
   */
  const tableHeight = inject<Ref<number>>('tableHeight');
  const tableHeightComputed = computed(() => {
    return tableHeight!.value - 56;
  });
  // #region  start

  // #region  start-通用值
  const router = useRouter();
  const route = useRoute();
  const superTableRef = ref<InstanceType<typeof SuperTable>>();
  const userStore = useUserStore();
  const id = userStore.roles[0].id; // 用户id
  const level = userStore.organization.level;
  const current = Number(id) + level * 10;
  // #endregion end-通用值

  //

  // #region  start-状态值
  // tab
  const activeKey = ref('');
  const changTabFn = (key: string) => {
    activeKey.value = key;
    superTableRef.value?.refreshTable();
  };
  // #endregion end-状态值

  // #endregion end

  /**
   * 实验室状态数量
   */
  const stateList = ref({
    待受理: 0,
    待审核: 0,
    已审核: 0,
    已退回: 0,
    全部: 0,
  });
  const getStateNumberFn = async () => {
    stateList.value = await getStateNumber();
  };
  getStateNumberFn();

  /**
   * 表格
   */
  // #region  start

  // #region  start-数据源
  // 表格数据请求方法
  const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
    let data = superTableRef.value?.getFormModel();
    let params = {
      pageSize: ori.page.pageSize,
      pageNum: ori.page.currentPage,
      ...data,
      status: activeKey.value,
    };
    let res = await getLabInfoList(params);
    await getStateNumberFn();
    return res;
    // return {
    //   data: [
    //     {id: '1', type: 0, submitState: 1, processState: 1},
    //     {id: '2', type: 1, submitState: 2, processState: 1},
    //     {id: '2', type: 0, submitState: 3, processState: 1},
    //     {id: '2', type: 1, submitState: 4, processState: 1},
    //   ],
    //   pageIndex: 1,
    //   pageSize: 20,
    //   total: 43,
    // };
  };

  // 表格配置项
  let columns: Array<TableColumnItem> = [
    ...columnsWait,
    {
      title: '操作',
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      width: 200,
      actions: ({ row }) => {
        let params;
        let value = row.submitState;
        if (current > row.processState) value = 3;
        if (row.auditStatus === 3) value = 4;
        if (row.auditStatus === 2) value = 3;
        switch (value) {
          case 1:
            params = [
              {
                label: '受理',
                popConfirm: {
                  title: '确定受理吗？',
                  onCancel() {},
                  async onConfirm() {
                    await acceptLabInfo({ userId: userStore.organization.id, labAccId: row.id });
                    message.success('受理成功');
                    superTableRef.value?.refreshTable();
                  },
                },
              },
            ];
            break;
          case 2:
            params = [
              {
                label: '审核',
                onClick() {
                  router.push({
                    name: 'provinceLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
            break;
          case 3:
            params = [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'provinceLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
            break;
          case 4:
            params = [
              {
                label: '查看',
                onClick: () => {
                  router.push({
                    name: 'provinceLabInfoApproveDetail',
                    query: {
                      id: row.id,
                    },
                  });
                },
              },
            ];
            break;
        }

        return params;
      },
    },
  ];
  // #endregion end-数据源

  //
  const refreshTable = () => {
    superTableRef.value?.refreshTable();
  };
  onActivated(() => {
    if (route.params.activeKey) {
      activeKey.value = String(route.params.activeKey)
    }
    superTableRef.value?.queryTable();
  });
  // #endregion end
</script>

<style scoped lang="less"></style>
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';

const routes: Array<RouteRecordRaw> = [
  /**
   * 省市主管部门 信息审批模块
   *
   */
  {
    path: '/infoApprove',
    name: 'infoApprove',
    // redirect: { name: `${moduleName}-custom-modal` },
    component: RouterView,
    meta: {
      title: '信息审批',
      icon: 'icon-shengpi',
      keepAlive: true,
    },
    children: [
      {
        path: 'provinceCompanyInfoApprove',
        name: 'provinceCompanyInfoApprove',
        meta: {
          title: '单位信息审批',
          icon: 'icon-company',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "provinceCompanyInfoApprove" */ '@/modules/infoManagement/pages/provinceCompanyInfoApprove/index.vue'
          ),
      },
      {
        path: 'provinceCompanyInfoApproveDetail',
        name: 'provinceCompanyInfoApproveDetail',
        meta: {
          title: '单位信息审批详情',
          icon: 'icon-company',
          hideInMenu: true,
          activeMenu: 'provinceCompanyInfoApprove',
          keepAlive: true,
        },
        props: {
          isOrg: true,
        },
        component: () => import('@/components/unit-info/index.vue'),
      },
      {
        path: 'provinceLabInfoApprove',
        name: 'provinceLabInfoApprove',
        meta: {
          title: '实验室信息审批',
          icon: 'icon-lab',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "provinceLabInfoApprove" */ '@/modules/infoManagement/pages/provinceLabInfoApprove/index.vue'
          ),
      },
      {
        path: 'provinceLabInfoApproveDetail',
        name: 'provinceLabInfoApproveDetail',
        meta: {
          title: '实验室信息审批详情',
          icon: 'icon-lab',
          hideInMenu: true,
          activeMenu: 'provinceLabInfoApprove',
          keepAlive: true,
        },
        props: {
          isOrg: true,
        },
        component: () => import('@/components/lab-info/index.vue'),
      },
      {
        path: 'provinceInfoPublishApprove',
        name: 'provinceInfoPublishApprove',
        meta: {
          title: '信息发布审批',
          icon: 'icon-home',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "provinceInfoPublishApprove" */ '@/modules/infoManagement/pages/provinceInfoPublishApprove/index.vue'
          ),
      },
      {
        path: 'provinceInfoPublishApproveDetail',
        name: 'provinceInfoPublishApproveDetail',
        meta: {
          title: '信息发布审批详情',
          icon: 'icon-check',
          hideInMenu: true,
          activeMenu: 'provinceInfoPublishApprove',
        },
        component: () =>
          import(
            /* webpackChunkName: "provinceInfoPublishApprove" */ '@/modules/infoManagement/pages/provinceInfoPublishApprove/provinceInfoPublishApproveDetail/index.vue'
          ),
      },
      {
        path: 'cityCompanyInfoApprove',
        name: 'cityCompanyInfoApprove',
        meta: {
          title: '单位信息审批',
          icon: 'icon-company',
          keepAlive: true,
        },
        component: () =>
          import(
            /* webpackChunkName: "cityCompanyInfoApprove" */ '@/modules/infoManagement/pages/cityCompanyInfoApprove/index.vue'
          ),
      },
      {
        path: 'cityCompanyInfoApproveDetail',
        name: 'cityCompanyInfoApproveDetail',
        meta: {
          title: '单位信息审批详情',
          icon: 'icon-company',
          hideInMenu: true,
          keepAlive: true,
          activeMenu: 'cityCompanyInfoApprove',
        },
        props: {
          isOrg: true,
        },
        component: () => import('@/components/unit-info/index.vue'),
      },
      {
        path: 'cityLabInfoApprove',
        name: 'cityLabInfoApprove',
        meta: {
          title: '实验室信息审批',
          keepAlive: true,
          icon: 'icon-lab',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityLabInfoApprove" */ '@/modules/infoManagement/pages/cityLabInfoApprove/index.vue'
          ),
      },
      {
        path: 'cityLabInfoApproveDetail',
        name: 'cityLabInfoApproveDetail',
        meta: {
          title: '实验室信息审批详情',
          icon: 'icon-lab',
          keepAlive: true,
          hideInMenu: true,
          activeMenu: 'cityLabInfoApprove',
        },
        props: {
          isOrg: true,
        },
        component: () => import('@/components/lab-info/index.vue'),
      },
    ],
  },

  /**
   * 单位
   */
  {
    path: '/companyInfo',
    name: 'companyInfo',
    meta: {
      title: '单位信息',
      keepAlive: true,
      icon: 'icon-company',
    },
    component: () =>
      import(
        /* webpackChunkName: "companyInfo" */ '@/modules/infoManagement/pages/companyInfo/index.vue'
      ),
  },
  {
    path: '/companyInfoDetail',
    name: 'companyInfoDetail',
    meta: {
      title: '单位信息详情',
      icon: 'icon-company',
      hideInMenu: true,
      activeMenu: 'companyInfo',
      keepAlive: true,
    },
    component: () =>
      import(/* webpackChunkName: "companyInfo" */ '@/components/unit-info/index.vue'),
  },
  {
    path: '/companyLabInfoApprove',
    name: 'companyLabInfoApprove',
    meta: {
      title: '实验室信息审批',
      icon: 'icon-lab',
      keepAlive: true,
    },
    component: () =>
      import(
        /* webpackChunkName: "companyLabInfoApprove" */ '@/modules/infoManagement/pages/companyLabInfoApprove/index.vue'
      ),
  },
  {
    path: '/companyLabInfoApproveDetail',
    name: 'companyLabInfoApproveDetail',
    meta: {
      title: '实验室信息审批详情',
      icon: 'icon-lab',
      hideInMenu: true,
      activeMenu: 'companyLabInfoApprove',
      keepAlive: true,
    },
    props: {
      isOrg: true,
    },
    component: () => import('@/components/lab-info/index.vue'),
  },
  /**
   * 实验室
   */
  {
    path: '/labInfo',
    name: 'labInfo',
    meta: {
      title: '实验室信息',
      icon: 'icon-letter',
      keepAlive: true,
    },
    component: () =>
      import(/* webpackChunkName: "labInfo" */ '@/modules/infoManagement/pages/labInfo/index.vue'),
  },
  {
    path: '/labInfoDetail',
    name: 'labInfoDetail',
    meta: {
      title: '实验室信息详情',
      icon: 'icon-letter',
      hideInMenu: true,
      activeMenu: 'labInfo',
      keepAlive: true,
    },
    component: () => import(/* webpackChunkName: "labInfo" */ '@/components/lab-info/index.vue'),
  },
];

export default routes;
import { request } from '@/framework/utils/request'

export const getActivityPage = (params: API.PageParams) => {
  return request({
    url: '/labActionApplyDetail/page',
    method: 'get',
    params
  })
}

export const getAllActivity = (params) => {
  return request({
    url: '/labActionApplyDetail/',
    method: 'get',
    params
  })
}

export const getActivityById = (id: string) => {
  return request({
    url: '/labActionApplyDetail/' + id,
    method: 'get',
  })
}

export const postActivity = (data) => {
  return request({
    url: '/labActionApplyDetail/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putActivity = (data) => {
  return request({
    url: '/labActionApplyDetail/',
    method: 'put',
    data
  })
}

export const deleteActivity = (id: string) => {
  return request({
    url: '/labActionApplyDetail/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

// 实验室提交活动
export const commitActivity = (data) => {
  return request({
    url: '/labActionApplyDetail/commit',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

// 单位审批活动
export const approveActivity = (data: {
  userId: string,
  approveState: 2 | 3, // 2同意 3拒绝
  businessId: string, // 实验室活动id
}) => {
  return request({
    url: '/labActionApplyDetail/approve',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

// 获取各个状态的实验室 tabs
export const getActivityStateNumber = () => {
  return request({
    url: '/labActionApplyDetail/getStateNumber',
    method: 'get',
  })
}

// 获取各个类型的数量 labActionApplyDetail/getNumByActType
export const getActivityNumberByType = () => {
  return request({
    url: '/labActionApplyDetail/getNumByActType',
    method: 'get',
  })
}

// 病毒类型列表 用于活动类型
export const getLabVirusList = (params) => {
  return request({
    url: '/labActionVirus/',
    method: 'get',
    params
  })
}


// 真菌类型列表
export const getLabFungusList = (params) => {
  return request({
    url: '/labActionFungus/',
    method: 'get',
    params
  })
}

// 细菌类型列表
export const getLabBacterialList = (params) => {
  return request({
    url: '/labActionBacterial/',
    method: 'get',
    params
  })
}

// 其他类型列表
export const getLabOtherList = (params) => {
  return request({
    url: '/labActionOther/',
    method: 'get',
    params
  })
}import { request } from '@/framework/utils/request'

export const getBacterialPage = (params: API.PageParams) => {
  return request({
    url: '/labActionBacterialDetail/page',
    method: 'get',
    params
  })
}

export const postBacterial = (data) => {
  return request({
    url: '/labActionBacterialDetail/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putBacterial = (data) => {
  return request({
    url: '/labActionBacterialDetail/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteBacterial = (id: string) => {
  return request({
    url: '/labActionBacterialDetail/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

import { request } from '@/framework/utils/request'

export const getFungusPage = (params: API.PageParams) => {
  return request({
    url: '/labActionFungusDetail/page',
    method: 'get',
    params
  })
}

export const postFungus = (data) => {
  return request({
    url: '/labActionFungusDetail/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putFungus = (data) => {
  return request({
    url: '/labActionFungusDetail/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteFungus = (id: string) => {
  return request({
    url: '/labActionFungusDetail/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

import { request } from '@/framework/utils/request'

export const getUserData = params => {
  return request<API.UserListResultItem[]>({
    url: '/warnLogEnv/page',
    method: 'get',
    params
  })
}

export const getDeviceData = params => {
  return request<API.DeviceListResultItem[]>({
    url: '/warnLogEnv/page',
    method: 'get',
    params
  })
}import { request, BaseResponse } from '@/framework/utils/request';

//设备管理-获取分页列表  
export function getLabDeviceList(data: any) {
  return request({
    url: '/labEquipment/page',
    method: 'get',
    params: data
  });
}

//设备管理-新增
export function addLabDeviceList(data: any) {
  return request({
    url: '/labEquipment/',
    method: 'post',
    data,
  });
}

//设备管理-删除
export function delLabDeviceList(id) {
  return request({
    url: `/labEquipment/${id}`,
    method: 'delete',
  });
}

//设备管理-修改
export function putlLabDeviceList(data) {
  return request({
    url: `/labEquipment/${data.id}`,
    method: 'put',
    data
  });
}

//设备维护-新增
export function addLabDeviceMaintain(data) {
  return request({
    url: '/equipmentMaintenance/',
    method: 'post',
    data,
  }, {
    isGetDataDirectly: false
  });
}

//设备维护-获取分页列表  
export function getLabDeviceMaintain(data) {
  return request({
    url: '/equipmentMaintenance/page',
    method: 'get',
    params: data
  });
}import { request, BaseResponse } from '@/framework/utils/request';

//相关人员管理-获取分页列表  
export function getLabPersonList(data) {
  return request({
    url: '/labPerson/page',
    method: 'get',
    params: data
  });
}

//相关人员管理-新增
export function addLabPersonList(data) {
  return request({
    url: '/labPerson/',
    method: 'post',
    data,
  });
}

//相关人员管理-删除
export function delLabPersonList(id) {
  return request({
    url: `/labPerson/${id}`,
    method: 'delete',
  });
}

//相关人员管理-修改
export function putLabPersonList(data) {
  return request({
    url: `/labPerson/${data.id}`,
    method: 'put',
    data
  });
}

//下载图片
export function downloadImg(id, data) {
  return request({
    url: `/file/md5/${id}`,
    method: 'get',
    params: data,
    responseType: 'blob'
  });
}


declare namespace API {
  type TempColumnsItem = {
    city: string;
    county: string;
    companyName: string;
    labName: string;
    id: string;

    alarmTime: string;
    pointName: string;
    roomName: string;
    warnRule: string;
    warnValue: string;
    warnType: string;
    warnTime: string;
    handleStatus: number;
  };
  type UserListResultItem = {
    name: string;
    sex: string | number;
    birthDate: string;
    workDate: string;
    jobTitle: string;
    academic: string | number;
    major: string;
    jobs: string;
    certNum: number | string;
    idcard: string | number;
    remarks: string;
    imgUrl: string;
  };
  type DeviceListResultItem = {
    id: string;
    type: string | number;
    name: string;
    manufacturer: string;
    specifications: string;
    purchaseDate: string;
    testCycle: string;
    lastTestTime: string;
    code: number | string;
    status: number | string;
    remarks: string;
    imgUrl: string;
  };

  type ActivityListResultItem = {
    id: string;
    labName: string;
    summaryTime: string;
    workflowState: ActivityStatusEnum,
    memo: string,
    principal: string,
    principalContact: string,
  }
}
import { request } from '@/framework/utils/request'

export const getOtherPage = (params: API.PageParams) => {
  return request({
    url: '/labActionOtherDetail/page',
    method: 'get',
    params
  })
}

export const postOther = (data) => {
  return request({
    url: '/labActionOtherDetail/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putOther = (data) => {
  return request({
    url: '/labActionOtherDetail/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteOther = (id: string) => {
  return request({
    url: '/labActionOtherDetail/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

import { request } from '@/framework/utils/request'

export const getVirusPage = (params: API.PageParams) => {
  return request({
    url: '/labActionVirusDetail/page',
    method: 'get',
    params
  })
}

export const postVirus = (data) => {
  return request({
    url: '/labActionVirusDetail/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putVirus = (data) => {
  return request({
    url: '/labActionVirusDetail/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteVirus = (id: string) => {
  return request({
    url: '/labActionVirusDetail/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

import { DictConfig } from "@/framework/core/dict/types";
import { DictNameType } from '@/api/dict/types'
import { getDictByType } from '@/api/dict'
const dict: Partial<Record<DictNameType, DictConfig>> = {
  sex: {
    data: [
      { label: '男', name: '男', value: 1 },
      { label: '女', name: '女', value: 2 }
    ],
  },
  FilterSubmitState: {
    data: [
      { label: '待审核', name: '待审核', value: 2 },
      { label: '审核通过', name: '审核通过', value: 3 },
      { label: '已退回', name: '已退回', value: 4 },
    ],
  },
  ExtraDeviceStatus: {
    data: [
      { name: "合格（启用）", label: "合格（启用）", value: 1 },
      { name: "不合格（禁用）", label: "不合格（禁用）", value: 2 }
    ],
  }
}

export default dict
<template>
  <SuperTable :columns="columns" :data-request="fetchData" search pager headerTitle="实验室活动列表" align="center" border
    ref="supertable" :export-config="{}" :query-form-default-show-item-count="5" :form-props="{ labelCol: { span: 8 } }"
    :toolbar="{}" search-btn-type="white-blue" :auto-load="false" :mode="1" :height="tableHeight">
    <template #action>
      <a-button type="blue-white" @click="addActivity">
        <template #icon>
          <BtnSvgIcon name="tianjia"></BtnSvgIcon>
        </template>
        添加
      </a-button>
      <a-button type="white-blue" @click="openExport">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
  <DraggableModal :title="state.modalTitle" v-model:visible="state.modalVisible">
    <a-form :model="state.formData" :label-col="{ span: 8 }" :wrapper-col="{ span: 16 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="实验室名称" name="labName">
        <a-input v-model:value="state.formData.labName" disabled></a-input>
      </a-form-item>
      <a-form-item label="所报数据汇总时间" name="summaryTime">
        <a-select v-model:value="state.formData.summaryTime" :options="state.dateOptions" placeholder="请选择时间段" showSearch>
        </a-select>
      </a-form-item>
      <a-form-item label="选择往期活动数据" name="oldActionId">
        <a-select v-model:value="state.formData.oldActionId" :options="state.oldActionOptions" allowClear
          placeholder="请选择往期活动数据" :fieldNames="{ label: 'summaryTime', value: 'id' }">
        </a-select>
      </a-form-item>
      <a-form-item label="备注" name="memo">
        <a-input v-model:value="state.formData.memo"></a-input>
      </a-form-item>
    </a-form>
    <template #footer>
      <div>
        <a-button type="white-blue" @click="modalCancel">取消</a-button>
        <a-button type="blue-white" @click="modalOk(false)">保存</a-button>
        <a-button type="blue-white" @click="modalOk(true)">保存并编辑</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx" name="labActivityRecord">
import { useRouter } from 'vue-router'
import { VxeGridPropTypes } from 'vxe-table';
import type { TableColumnItem, TableListItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { reactive, ref, onActivated, inject, Ref } from 'vue';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue'
import { FormInstance, message } from 'ant-design-vue';
import { useDateOptions } from '../labActivityRecordAdd/hooks/useDateOptions'
import { useUserStore } from '@/store/modules/user';
import { getActivityPage, getAllActivity, deleteActivity, postActivity, putActivity } from '../../api/activity'
import { dict } from '@/framework/core/dict';
import { ActivityStatusEnum } from '@/enums/state'

const tableHeight = inject<Ref<number>>('tableHeight')
const router = useRouter()
const supertable = ref<InstanceType<typeof SuperTable>>();
const userStore = useUserStore()
const organization = userStore.getOrganizationInfo
const dateOptions = useDateOptions()
const state = reactive({
  modalVisible: false,
  modalTitle: '添加活动记录',
  dateOptions: dateOptions,
  oldActionOptions: [],
  formData: {
    // accId: organization.id,
    labName: organization.name,
    summaryTime: null,
    memo: null,
    oldActionId: null,
  },
  formRules: {
    summaryTime: [{ required: true, message: '请选择数据汇总时间', trigger: 'change' }],
  }
})

const getAllActivityFn = () => {
  getAllActivity({ workflowState: ActivityStatusEnum.ApprovePass }).then(res => {
    state.oldActionOptions = res
  })
}
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
    // 'orderBy[0].field': 'createTime',
    // 'orderBy[0].order': 'desc',
  };
  return await getActivityPage(params)
};
const columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 140,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          router.push({
            name: 'labActivityRecordAdd',
            query: {
              id: row.id
            }
          })
        },
      },
      {
        label: '删除',
        ifShow: row.workflowState === 0 || row.workflowState === 4,
        popConfirm: {
          title: '是否删除该活动？',
          onCancel() { },
          async onConfirm() {
            // req
            const res = await deleteActivity(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          },
        },
      },
    ],
  },
];

const addActivity = () => {
  formRef.value?.resetFields()
  state.modalVisible = true
}

const openExport = () => {

}

const formRef = ref<FormInstance>()
const modalCancel = () => {
  state.modalVisible = false
}
const modalOk = async (linkTo = false) => {
  try {
    await formRef.value?.validateFields()
    const res = await postActivity({ ...state.formData, auditStatuses: [2],})
    if (res.code === 200 && res.success) {
      state.modalVisible = false
      message.success('添加成功')
      if (linkTo) {
        router.push({
          name: 'labActivityRecordAdd',
          query: {
            id: res.data
          }
        })
      }
      supertable.value?.refreshTable()
    }
  } catch (error) {
    message.error('请输入数据')
  }
}

onActivated(() => {
  getAllActivityFn()
  supertable.value?.queryTable()
})
</script>
<style lang="less" scoped></style><template>
  <div class="supertable">
    <SuperTable :columns="columns" :data-request="fetchData" pager align="center" border ref="supertable"
      :export-config="{}" :query-form-default-show-item-count="4" :form-props="{ labelCol: { span: 8 } }"
      :search="false" :toolbar="{}">
      <template #action>
        <a-button type="blue-white" @click="addEvent" :disabled="rowOperatorDisabled">添加</a-button>
      </template>
    </SuperTable>
  </div>
  <!-- modal -->

  <DraggableModal :title="state.modalTitle" v-model:visible="state.modalVisible" destroy-on-close>
    <a-form :model="state.formData" :label-col="{ span: 6 }" :wrapper-col="{ span: 18 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="细菌放线菌类型" name="bacterialId">
        <a-select v-model:value="state.formData.bacterialId" :options="state.bacterialOptions" placeholder="请选择细菌放线菌类型"
          :disabled="state.disabled" :fieldNames="{ label: 'bacterialType', value: 'id' }">
        </a-select>
      </a-form-item>
      <a-form-item label="细菌放线菌名称" name="bacterialName">
        <a-input v-model:value="state.formData.bacterialName" disabled></a-input>
      </a-form-item>
      <!-- <a-form-item label="分类学地位" name="vertifyLevel">
        <a-input v-model:value="state.formData.vertifyLevel" disabled></a-input>
      </a-form-item> -->
      <a-form-item label="危害程度分类" name="hazardClass">
        <a-input v-model:value="state.formData.hazardClass" disabled></a-input>
      </a-form-item>
      <a-form-item label="实验活动类型" name="actionType">
        <a-select v-model:value="state.formData.actionType" :options="actionTypeValiable" placeholder="请选择实验活动类型"
          :disabled="state.disabled">
        </a-select>
        <!-- <a-input placeholder="请选实验活动类型" v-model:value="state.formData.actionType"></a-input> -->
      </a-form-item>
      <a-form-item label="总检测数" name="sampleCount">
        <a-input placeholder="请输入总检测数" v-model:value="state.formData.sampleCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="阳性数" name="samplePositiveCount">
        <a-input placeholder="请输入阳性数" v-model:value="state.formData.samplePositiveCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="备注" name="memo">
        <a-textarea v-model:value="state.formData.memo" :rows="3" placeholder="请输入备注" :disabled="state.disabled" />
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="modalCancel">取消</a-button>
        <a-button @click="modalReset">重置</a-button>
        <a-button type="primary" @click="modalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
import { ref, reactive, watch, computed } from 'vue'
import { VxeGridPropTypes } from 'vxe-table'
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message } from 'ant-design-vue';
import { useRoute } from 'vue-router'
import { SuperTable } from '@/framework/components/core/super-table';
import { getLabBacterialList } from '../../../api/activity'
import { getBacterialPage, postBacterial, putBacterial, deleteBacterial } from '../../../api/bacteria'
import { dict } from '@/framework/core/dict';
const route = useRoute()
const ID = route.query.id
const supertable = ref<InstanceType<typeof SuperTable>>()
console.log(ID, 'ID')

const props = defineProps({
  rowOperatorDisabled: {
    type: Boolean,
    required: true
  },
  rowOperatorShow: {
    type: Boolean,
    required: true
  },
  accId: String,
})

const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    activeId: ID,
  };
  return await getBacterialPage(params)
};

const columns = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '细菌放线菌类类型',
    field: 'bacterialType',
  },
  {
    title: '名称',
    field: 'bacterialName',
  },
  {
    title: '实验室活动类型',
    field: 'actionType',
    dict: 'LabActivityBacteriaType'
  },
  {
    title: '总检测数',
    field: 'sampleCount',
  },
  {
    title: '阳性数',
    field: 'samplePositiveCount',
  },
  {
    title: '备注',
    field: 'memo',
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          state.modalVisible = true
          state.showFooter = false
          state.modalTitle = '查看细菌放线菌类实验活动'
          state.disabled = true
          state.formData.bacterialId = row.bacterialId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '编辑',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        onClick: () => {
          state.modalVisible = true
          state.showFooter = true
          state.modalTitle = '编辑细菌放线菌类实验活动'
          state.disabled = false
          state.modalMode = ModalModeEnum.Edit
          state.formData.bacterialId = row.bacterialId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '删除',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        popConfirm: {
          title: '您确定删除吗？删除后不可恢复',
          onConfirm: async () => {
            const res = await deleteBacterial(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          }
        }
      }
    ]
  }
];

enum ModalModeEnum {
  Add = 1,
  Edit = 2,
}

const state = reactive({
  disabled: false, // form-item disabled
  showFooter: false,
  bacterialOptions: [] as any[],
  modalVisible: false,
  modalMode: ModalModeEnum.Add,
  modalTitle: '新增细菌放线菌类实验活动',
  formData: {
    activeId: ID,
    bacterialId: null,
    bacterialName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as null | string,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  },
  formRules: {
    bacterialId: [{ required: true, message: '请选择病毒类型', trigger: 'change' }],
    actionType: [{ required: true, message: '请选择活动类型', trigger: 'change' }],
    sampleCount: [{ required: true, message: '请输入总检测数', trigger: 'blur' }],
    samplePositiveCount: [{ required: true, message: '请输入阳性数', trigger: 'blur' }],
  }
})
const formRef = ref<FormInstance>()
// 添加按钮弹出
const addEvent = () => {
  state.showFooter = true
  state.modalVisible = true
  state.modalTitle = '新增细菌放线菌类实验活动'
  state.disabled = false
  state.modalMode = ModalModeEnum.Add
  state.formData = {
    activeId: ID,
    bacterialId: null,
    bacterialName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as null | string,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  }
  formRef.value?.resetFields()
}
const modalCancel = () => {
  state.modalVisible = false
}
const modalReset = () => {
  formRef.value?.resetFields()
}
const modalOk = async () => {
  try {
    await formRef.value?.validate()
    if (state.modalMode === ModalModeEnum.Add) {
      console.log(state.formData, 'add')
      const res = await postBacterial(state.formData)
      if (res.code === 200 && res.success) {
        message.success('添加成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    } else if (state.modalMode === ModalModeEnum.Edit) {
      console.log(state.formData, 'edit')
      const res = await putBacterial(state.formData)
      if (res.code === 200 && res.success) {
        message.success('修改成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    }
  } catch (error) {

  }
}

const getBacterialList = async () => {
  const res = await getLabBacterialList({ accId: props.accId })
  state.bacterialOptions = res
}
getBacterialList()
watch(() => state.formData.bacterialId, (nval) => {
  if (nval) {
    state.formData.actionType = null
    const optionItem = state.bacterialOptions.find(item => item.id === nval)
    if (optionItem) {
      state.formData.bacterialName = optionItem.bacterialName
      state.formData.hazardClass = optionItem.hazardClass
      state.formData.vertifyLevel = optionItem.vertifyLevel
    }
  } else {
    state.formData.actionType = null
  }
})

const actionTypeValiable = computed(() => {
  const optionItem = state.bacterialOptions.find(item => item.id === state.formData.bacterialId)
  let res: any[] = []
  if (optionItem) {
    res = dict.get('LabActivityBacteriaType')?.filter(i => {
      if (i.value === '2' && optionItem.isAnimalInfectionExpe) {
        return true
      }
      if (i.value === '4' && optionItem.isHandleInfectedMaterial) { // 感染材料的操作
        return true
      }
      if (i.value === '1' && optionItem.isLiveBecteriaOperation) { // 大量活菌操作
        return true
      }
      if (i.value === '3' && optionItem.isSampleTesting) { // 样本检测
        return true
      }
      if (i.value === '5' && optionItem.isUnkownVirus) { // 未知病毒
        return true
      }
      return false
    })
  }
  return res
})
</script>
<style lang="less" scoped>
@import './common.less';
</style><template>
  <div class="supertable">
    <SuperTable :columns="columns" :data-request="fetchData" pager align="center" border ref="supertable"
      :export-config="{}" :query-form-default-show-item-count="4" :form-props="{ labelCol: { span: 8 } }"
      :search="false" :toolbar="{}">
      <template #action>
        <a-button type="blue-white" @click="addEvent" :disabled="rowOperatorDisabled">添加</a-button>
      </template>
    </SuperTable>
  </div>
  <!-- modal -->

  <DraggableModal :title="state.modalTitle" v-model:visible="state.modalVisible" destroy-on-close>
    <a-form :model="state.formData" :label-col="{ span: 6 }" :wrapper-col="{ span: 18 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="真菌类型" name="fungusId">
        <a-select v-model:value="state.formData.fungusId" :options="state.fungusOptions" placeholder="请选择真菌类型"
          :disabled="state.disabled" :fieldNames="{ label: 'fungusType', value: 'id' }">
        </a-select>
      </a-form-item>
      <a-form-item label="真菌名称" name="fungusName">
        <a-input v-model:value="state.formData.fungusName" disabled></a-input>
      </a-form-item>
      <!-- <a-form-item label="分类学地位">
        <a-input v-model:value="state.formData.vertifyLevel" disabled></a-input>
      </a-form-item> -->
      <a-form-item label="危害程度分类">
        <a-input v-model:value="state.formData.hazardClass" disabled></a-input>
      </a-form-item>
      <a-form-item label="实验活动类型" name="actionType">
        <a-select v-model:value="state.formData.actionType" :options="actionTypeValiable" placeholder="请选择实验活动类型"
          :disabled="state.disabled">
        </a-select>
        <!-- <a-input placeholder="请选实验活动类型" v-model:value="state.formData.actionType"></a-input> -->
      </a-form-item>
      <a-form-item label="总检测数" name="sampleCount">
        <a-input placeholder="请输入总检测数" v-model:value="state.formData.sampleCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="阳性数" name="samplePositiveCount">
        <a-input placeholder="请输入阳性数" v-model:value="state.formData.samplePositiveCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="备注" name="memo">
        <a-textarea v-model:value="state.formData.memo" :rows="3" placeholder="请输入备注" :disabled="state.disabled" />
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="modalCancel">取消</a-button>
        <a-button @click="modalReset">重置</a-button>
        <a-button type="primary" @click="modalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
import { ref, reactive, watch, computed } from 'vue'
import { VxeGridPropTypes } from 'vxe-table'
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message } from 'ant-design-vue';
import { useRoute } from 'vue-router'
import { SuperTable } from '@/framework/components/core/super-table';
import { getLabFungusList } from '../../../api/activity'
import { getFungusPage, postFungus, putFungus, deleteFungus } from '../../../api/fungus'
import { dict } from '@/framework/core/dict'

const route = useRoute()
const ID = route.query.id
const supertable = ref<InstanceType<typeof SuperTable>>()
const props = defineProps({
  rowOperatorDisabled: {
    type: Boolean,
    required: true
  },
  rowOperatorShow: {
    type: Boolean,
    required: true
  },
  accId: String,
})

const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    activeId: ID,
  };
  return await getFungusPage(params)
};

const columns = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '真菌类型',
    field: 'fungusType',
  },
  {
    title: '名称',
    field: 'fungusName',
  },
  {
    title: '实验室活动类型',
    field: 'actionType',
    dict: 'LabActivityFungusType'
  },
  {
    title: '总检测数',
    field: 'sampleCount',
  },
  {
    title: '阳性数',
    field: 'samplePositiveCount',
  },
  {
    title: '备注',
    field: 'memo',
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          console.log(row, '12')
          state.modalVisible = true
          state.showFooter = false
          state.modalTitle = '查看真菌类实验活动'
          state.disabled = true
          state.formData.fungusId = row.fungusId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '编辑',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        onClick: () => {
          state.modalVisible = true
          state.showFooter = true
          state.modalTitle = '编辑真菌实验活动'
          state.disabled = false
          state.modalMode = ModalModeEnum.Edit
          state.formData.fungusId = row.fungusId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '删除',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        popConfirm: {
          title: '您确定删除吗？删除后不可恢复',
          onConfirm: async () => {
            const res = await deleteFungus(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          }
        }
      }
    ]
  }
];
enum ModalModeEnum {
  Add = 1,
  Edit = 2,
}
const state = reactive({
  disabled: false,
  showFooter: false,
  fungusOptions: [] as any[],
  modalVisible: false,
  modalMode: ModalModeEnum.Add,
  modalTitle: '添加真菌类实验活动',
  formData: {
    activeId: ID,
    fungusId: null,
    fungusName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as null | string,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  },
  formRules: {
    fungusId: [{ required: true, message: '请选择病毒类型', trigger: 'change' }],
    actionType: [{ required: true, message: '请选择活动类型', trigger: 'change' }],
    sampleCount: [{ required: true, message: '请输入总检测数', trigger: 'blur' }],
    samplePositiveCount: [{ required: true, message: '请输入阳性数', trigger: 'blur' }],
  }
})
const formRef = ref<FormInstance>()
// 添加按钮弹出
const addEvent = () => {
  state.showFooter = true
  state.modalVisible = true
  state.modalTitle = '添加真菌类实验活动'
  state.disabled = false
  state.modalMode = ModalModeEnum.Add
  state.formData = {
    activeId: ID,
    fungusId: null,
    fungusName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as null | string,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  }
  formRef.value?.resetFields()
}
const modalCancel = () => {
  state.modalVisible = false
}
const modalReset = () => {
  formRef.value?.resetFields()
}
const modalOk = async () => {
  try {
    await formRef.value?.validate()
    if (state.modalMode === ModalModeEnum.Add) {
      console.log(state.formData, 'add')
      const res = await postFungus(state.formData)
      if (res.code === 200 && res.success) {
        message.success('添加成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    } else if (state.modalMode === ModalModeEnum.Edit) {
      console.log(state.formData, 'edit')
      const res = await putFungus(state.formData)
      if (res.code === 200 && res.success) {
        message.success('添加成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    }
  } catch (error) {

  }
}

const getFungusList = async () => {
  const res = await getLabFungusList({ accId: props.accId })
  state.fungusOptions = res || []
}
getFungusList()

watch(() => state.formData.fungusId, (nval) => {
  if (nval) {
    state.formData.actionType = null
    const optionItem = state.fungusOptions.find(item => item.id === nval)
    if (optionItem) {
      state.formData.fungusName = optionItem.fungusName
      state.formData.hazardClass = optionItem.hazardClass
      state.formData.vertifyLevel = optionItem.vertifyLevel
    }
  } else {
    state.formData.actionType = null
  }
})

const actionTypeValiable = computed(() => {
  const optionItem = state.fungusOptions.find(item => item.id === state.formData.fungusId)
  let res: any[] = []
  if (optionItem) {
    res = dict.get('LabActivityFungusType')?.filter(i => {
      if (i.value === '2' && optionItem.isAnimalInfectionExpe) { // 动物实验
        return true
      }
      if (i.value === '4' && optionItem.isHandleInfectedMaterial) { // 感染材料的操作
        return true
      }
      if (i.value === '1' && optionItem.isLiveFungusOperation) { // 大量活菌操作
        return true
      }
      if (i.value === '3' && optionItem.isSampleTesting) { // 样本检测
        return true
      }
      return false
    })
  }
  return res
})

</script>
<style lang="less" scoped>
@import './common.less';
</style><template>
  <div class="supertable">
    <SuperTable :columns="columns" :data-request="fetchData" pager align="center" border ref="supertable"
      :export-config="{}" :query-form-default-show-item-count="4" :form-props="{ labelCol: { span: 8 } }"
      :search="false" :toolbar="{}">
      <template #action>
        <a-button type="blue-white" @click="addEvent" :disabled="rowOperatorDisabled">添加</a-button>
      </template>
    </SuperTable>
  </div>
  <!-- modal -->

  <DraggableModal :title="state.modalTitle" v-model:visible="state.modalVisible" destroy-on-close>
    <a-form :model="state.formData" :label-col="{ span: 6 }" :wrapper-col="{ span: 18 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="样本名称" name="sampleName">
        <a-select v-model:value="state.formData.otherId" :options="state.otherOptions" placeholder="请选择样本"
          :disabled="state.disabled" :fieldNames="{ label: 'sampleName', value: 'id' }">
        </a-select>
      </a-form-item>
      <a-form-item label="危害程度分类">
        <a-input v-model:value="state.formData.hazardClass" disabled></a-input>
      </a-form-item>
      <a-form-item label="实验活动类型" name="actionType">
        <a-select v-model:value="state.formData.actionType" :options="actionTypeValiable" placeholder="请选择实验活动类型"
          :disabled="state.disabled">
        </a-select>
      </a-form-item>
      <a-form-item label="总检测数" name="sampleCount">
        <a-input placeholder="请输入总检测数" v-model:value="state.formData.sampleCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="阳性数" name="samplePositiveCount">
        <a-input placeholder="请输入总检测数" v-model:value="state.formData.samplePositiveCount" type="number"
          :min="0" :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="备注" name="memo">
        <a-textarea v-model:value="state.formData.memo" :rows="3" placeholder="请输入备注" :disabled="state.disabled" />
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="modalCancel">取消</a-button>
        <a-button @click="modalReset">重置</a-button>
        <a-button type="primary" @click="modalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
import { ref, reactive, watch, computed } from 'vue'
import { VxeGridPropTypes } from 'vxe-table'
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message } from 'ant-design-vue';
import { useRoute } from 'vue-router'
import { SuperTable } from '@/framework/components/core/super-table';
import { getOtherPage, putOther, postOther, deleteOther } from '../../../api/other'
import { getLabOtherList } from '../../../api/activity'
import { dict } from '@/framework/core/dict';

const route = useRoute()
const ID = route.query.id
const supertable = ref<InstanceType<typeof SuperTable>>()
const props = defineProps({
  rowOperatorDisabled: {
    type: Boolean,
    required: true
  },
  rowOperatorShow: {
    type: Boolean,
    required: true
  },
  accId: String,
})

const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    activeId: ID,
  };
  return await getOtherPage(params)
};

const columns = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '样本名称',
    field: 'sampleName',
  },
  {
    title: '实验室活动类型',
    field: 'actionType',
    dict: 'LabActivityOtherType'
  },
  {
    title: '总检测数',
    field: 'sampleCount',
  },
  {
    title: '阳性数',
    field: 'samplePositiveCount',
  },
  {
    title: '备注',
    field: 'memo',
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          console.log(row, '12')
          state.modalVisible = true
          state.showFooter = false
          state.modalTitle = '查看其他病原菌实验活动'
          state.disabled = true
          state.formData.otherId = row.otherId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '编辑',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        onClick: () => {
          state.modalVisible = true
          state.showFooter = true
          state.modalTitle = '编辑其他病原菌实验活动'
          state.disabled = false
          state.modalMode = ModalModeEnum.Edit
          state.formData.otherId = row.otherId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '删除',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        popConfirm: {
          title: '您确定删除吗？删除后不可恢复',
          onConfirm: async () => {
            const res = await deleteOther(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          }
        }
      }
    ]
  }
];

enum ModalModeEnum {
  Add = 1,
  Edit = 2,
}

const state = reactive({
  disabled: false,
  showFooter: false,
  modalVisible: false,
  modalMode: ModalModeEnum.Add,
  modalTitle: '添加其他病原菌实验活动',
  otherOptions: [] as any[],
  formData: {
    // otherVirusType: 1,
    activeId: ID,
    otherId: null,
    sampleName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: ''
  },
  formRules: {
    otherVirusType: [{ required: true, message: '请选择病毒类型', trigger: 'change' }],
    actionType: [{ required: true, message: '请选择活动类型', trigger: 'change' }],
    sampleCount: [{ required: true, message: '请输入总检测数', trigger: 'blur' }],
    samplePositiveCount: [{ required: true, message: '请输入阳性数', trigger: 'blur' }],
  }
})
const formRef = ref<FormInstance>()
// 添加按钮弹出
const addEvent = () => {
  state.showFooter = true
  state.modalVisible = true
  state.modalTitle = '添加其他病原菌实验活动'
  state.disabled = false
  state.modalMode = ModalModeEnum.Add
  state.formData = {
    activeId: ID,
    otherId: null,
    sampleName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: ''
  }
  formRef.value?.resetFields()
}
const modalCancel = () => {
  state.modalVisible = false
}
const modalReset = () => {
  formRef.value?.resetFields()
}
const modalOk = async () => {
  try {
    await formRef.value?.validate()
    if (state.modalMode === ModalModeEnum.Add) {
      console.log(state.formData, 'add')
      const res = await postOther(state.formData)
      if (res.code === 200 && res.success) {
        message.success('添加成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    } else if (state.modalMode === ModalModeEnum.Edit) {
      const res = await putOther(state.formData)
      if (res.code === 200 && res.success) {
        message.success('修改成功')
        supertable.value?.refreshTable()
        state.modalVisible = false
      }
    }
  } catch (error) {

  }
}

const getOtherList = async () => {
  const res = await getLabOtherList({ accId: props.accId })
  state.otherOptions = res || []
}
getOtherList()

watch(() => state.formData.otherId, (nval) => {
  if (nval) {
    state.formData.actionType = null
    const optionItem = state.otherOptions.find(item => item.id === nval)
    if (optionItem) {
      state.formData.hazardClass = optionItem.hazardClass
      state.formData.vertifyLevel = optionItem.vertifyLevel
    }
  } else {
    state.formData.actionType = null
  }
})
const actionTypeValiable = computed(() => {
  const optionItem = state.otherOptions.find(item => item.id === state.formData.otherId)
  let res: any[] = []
  if (optionItem) {
    res = dict.get('LabActivityOtherType')?.filter(i => {
      if (i.value === '2' && optionItem.isAnimalInfectionExpe) { // 动物实验
        return true
      }
      if (i.value === '4' && optionItem.isHandleInfectedMaterial) { // 感染材料的操作
        return true
      }
      if (i.value === '1' && optionItem.isLiveFungusOperation) { // 大量活菌操作
        return true
      }
      if (i.value === '3' && optionItem.isSampleTesting) { // 样本检测
        return true
      }
      return false
    })
  }
  return res
})
</script>
<style lang="less" scoped>
@import './common.less';
</style><template>
  <div class="supertable">
    <SuperTable :columns="columns" :data-request="fetchData" pager align="center" border ref="supertable"
      :export-config="{}" :query-form-default-show-item-count="4" :form-props="{ labelCol: { span: 8 } }"
      :search="false" :toolbar="{}">
      <template #action>
        <a-button type="blue-white" @click="addEvent" :disabled="rowOperatorDisabled">添加</a-button>
      </template>
    </SuperTable>
  </div>
  <!-- modal -->

  <DraggableModal :title="state.modalTitle" v-model:visible="state.modalVisible" destroy-on-close>
    <a-form :model="state.formData" :label-col="{ span: 6 }" :wrapper-col="{ span: 18 }" :rules="state.formRules"
      ref="formRef">
      <a-form-item label="病毒类型" name="virusId">
        <a-select v-model:value="state.formData.virusId" :options="state.virusOptions" placeholder="请选择病毒类型"
          :disabled="state.disabled" :fieldNames="{ label: 'virusType', value: 'id' }">
        </a-select>
      </a-form-item>
      <a-form-item label="病毒名称" name="virusName">
        <a-input v-model:value="state.formData.virusName" disabled></a-input>
      </a-form-item>
      <a-form-item label="分类学地位" name="vertifyLevel">
        <a-input v-model:value="state.formData.vertifyLevel" disabled></a-input>
      </a-form-item>
      <a-form-item label="危害程度分类" name="hazardClass">
        <a-input v-model:value="state.formData.hazardClass" disabled></a-input>
      </a-form-item>
      <a-form-item label="实验活动类型" name="actionType">
        <a-select v-model:value="state.formData.actionType" :options="actionTypeValiable" placeholder="请选择实验活动类型"
          :disabled="state.disabled">
        </a-select>
        <!-- <a-input placeholder="请选实验活动类型" v-model:value="state.formData.actionType"></a-input> -->
      </a-form-item>
      <a-form-item label="总检测数" name="sampleCount">
        <a-input placeholder="请输入总检测数" v-model:value="state.formData.sampleCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="阳性数" name="samplePositiveCount">
        <a-input placeholder="请输入阳性数" v-model:value="state.formData.samplePositiveCount" type="number" :min="0"
          :disabled="state.disabled"></a-input>
      </a-form-item>
      <a-form-item label="备注" name="memo">
        <a-textarea v-model:value="state.formData.memo" :rows="3" placeholder="请输入备注" :disabled="state.disabled" />
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="modalCancel">取消</a-button>
        <a-button @click="modalReset">重置</a-button>
        <a-button type="primary" @click="modalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>

<script setup lang="tsx">
import { ref, reactive, watch, computed } from 'vue'
import { VxeGridPropTypes } from 'vxe-table'
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message } from 'ant-design-vue';
import { useRoute } from 'vue-router'
import { SuperTable } from '@/framework/components/core/super-table';
import { getLabVirusList } from '../../../api/activity'
import { getVirusPage, putVirus, postVirus, deleteVirus } from '../../../api/virus'
import { dict } from '@/framework/core/dict';
const route = useRoute()
const ID = route.query.id
const supertable = ref<InstanceType<typeof SuperTable>>()
const props = defineProps({
  rowOperatorDisabled: {
    type: Boolean,
    required: true
  },
  rowOperatorShow: {
    type: Boolean,
    required: true
  },
  accId: String,
})

const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    activeId: ID,
  };
  return await getVirusPage(params)
};
const columns = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '病毒类型',
    field: 'virusType',
  },
  {
    title: '病毒名称',
    field: 'virusName',
  },
  {
    title: '实验室活动类型',
    field: 'actionType',
    dict: 'LabActivityVirusType'
  },
  {
    title: '总检测数',
    field: 'sampleCount',
  },
  {
    title: '阳性数',
    field: 'samplePositiveCount',
  },
  {
    title: '备注',
    field: 'memo',
  },
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '查看',
        onClick: () => {
          state.modalVisible = true
          state.showFooter = false
          state.modalTitle = '查看病毒类实验活动'
          state.disabled = true
          state.formData.virusId = row.virusId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '编辑',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        onClick: () => {
          state.modalVisible = true
          state.showFooter = true
          state.modalTitle = '编辑病毒类实验活动'
          state.modalMode = ModalModeEnum.Edit
          state.disabled = false
          state.formData.virusId = row.virusId
          setTimeout(() => {
            state.formData = { ...row }
          })
        }
      },
      {
        label: '删除',
        ifShow: props.rowOperatorShow,
        disabled: props.rowOperatorDisabled,
        popConfirm: {
          title: '您确定删除吗？删除后不可恢复',
          onConfirm: async () => {
            const res = await deleteVirus(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          }
        }
      }
    ]
  }
];
enum ModalModeEnum {
  Add = 1,
  Edit = 2,
}

const state = reactive({
  virusOptions: [] as any[],
  disabled: false, // form-item disabled
  showFooter: false,
  modalVisible: false,
  modalMode: ModalModeEnum.Add,
  modalTitle: '添加病毒类实验活动',
  formData: {
    activeId: ID,
    virusId: null,
    virusName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as string | null,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  },
  formRules: {
    virusId: [{ required: true, message: '请输入病毒类型', trigger: 'blur' }],
    actionType: [{ required: true, message: '请选择活动类型', trigger: 'blur' }],
    sampleCount: [{ required: true, message: '请输入总检测数', trigger: 'blur' }],
    samplePositiveCount: [{ required: true, message: '请输入阳性数', trigger: 'blur' }],
  }
})

const formRef = ref<FormInstance>()
// 添加按钮弹出
const addEvent = () => {
  state.showFooter = true
  state.modalVisible = true
  state.disabled = false
  state.modalTitle = '添加病毒类实验活动'
  state.modalMode = ModalModeEnum.Add
  state.formData = {
    activeId: ID,
    virusId: null,
    virusName: '',
    vertifyLevel: '',
    hazardClass: '',
    actionType: null as string | null,
    sampleCount: 0,
    samplePositiveCount: 0,
    memo: '',
  },
  formRef.value?.resetFields()
}
const modalCancel = () => {
  state.modalVisible = false
}
const modalReset = () => {
  formRef.value?.resetFields()
}
const modalOk = async () => {
  try {
    await formRef.value?.validate()
    if (state.modalMode === ModalModeEnum.Add) {
      console.log(state.formData, 'add')
      const res = await postVirus(state.formData)
      if (res.code === 200 && res.success) {
        state.modalVisible = false
        message.success('添加成功')
        supertable.value?.refreshTable()
      }
    } else if (state.modalMode === ModalModeEnum.Edit) {
      console.log(state.formData, 'edit')
      const res = await putVirus(state.formData)
      if (res.code === 200 && res.success) {
        state.modalVisible = false
        message.success('修改成功')
        supertable.value?.refreshTable()
      }
    }
  } catch (error) {
    console.log(error)
  }
}

const getVirusList = async () => {
  const res = await getLabVirusList({ accId: props.accId })
  state.virusOptions = res
}
getVirusList()

watch(() => state.formData.virusId, (nval) => {
  if (nval) {
    state.formData.actionType = null
    const optionItem = state.virusOptions.find(item => item.id === nval)
    if (optionItem) {
      state.formData.virusName = optionItem.virusName
      state.formData.hazardClass = optionItem.hazardClass
      state.formData.vertifyLevel = optionItem.vertifyLevel
    }
  } else {
    state.formData.actionType = null
  }
})
const actionTypeValiable = computed(() => {
  const optionItem = state.virusOptions.find(item => item.id === state.formData.virusId)
  let res: any[] = []
  if (optionItem) {
    res = dict.get('LabActivityVirusType')?.filter(i => {
      if (i.value === '2' && optionItem.isAnimalInfectionExpe) {
        return true
      }
      if (i.value === '4' && optionItem.isHandleInactivateMaterial) { // 灭活材料的操作
        return true
      }
      if (i.value === '5' && optionItem.isHandleInfectedMaterial) { // 感染材料的操作
        return true
      }
      if (i.value === '3' && optionItem.isHandleNotCulttureInfectedMaterial) { // 未经培养的感染材料的操作
        return true
      }
      if (i.value === '6' && optionItem.isUnkownVirus) { // 未知病毒
        return true
      }
      if (i.value === '1' && optionItem.isVirusCultrue) { // 病毒培养
        return true
      }
      return false
    })
  }
  return res
})

</script>
<style lang="less" scoped>
@import './common.less';
</style>import { ref } from 'vue'
import config from '@/config'
import dayjs from 'dayjs'

const startYear = config.dateOptions.startYear
const offset = config.dateOptions.offset || 0
export const useDateOptions = () => {
  const options = ref<{ label: string, value: string }[]>([])
  const now = dayjs()
  const endYear = now.add(offset, 'year')
  let y = dayjs(startYear)
  while (y.isBefore(endYear)) {
    const strYear = y.format('YYYY')
    options.value.push({
      label: strYear + '上半年',
      value: strYear + '上半年',
    })
    options.value.push({
      label: strYear + '下半年',
      value: strYear + '下半年',
    })
    y = y.add(1, 'year')
  }
  return options
}<template>
  <a-card title="实验活动">
    <template #extra>
      <!-- 审批时按钮逻辑 -->
      <Space v-if="isOrg">
        <template v-if="btnStatus.approveBtnShow">
          <Popconfirm @confirm="approvePass" title="您确定通过吗？">
            <a-button type="blue-white" :disabled="btnStatus.passBtnDisabled">通过</a-button>
          </Popconfirm>
          <Popconfirm @confirm="approveRefuse" title="您确定退回吗？">
            <a-button type="blue-white" :disabled="btnStatus.refuseBtnDisabled">退回</a-button>
          </Popconfirm>
        </template>
        <a-button type="white-blue" @click="backEvent">返回</a-button>
      </Space>
      <!-- 实验室创建时的按钮组 -->
      <Space v-else-if="isCreate">
        <Popconfirm @confirm="saveActivity(false)" title="您确定保存为草稿吗？">
          <a-button type="blue-white">
            <template #icon>
              <BtnSvgIcon name="baocun"></BtnSvgIcon>
            </template>
            保存
          </a-button>
        </Popconfirm>
        <Popconfirm @confirm="saveActivity(true)" title="您确定保存并提交吗？">
          <a-button type="blue-white">
            <template #icon>
              <BtnSvgIcon name="tijiao"></BtnSvgIcon>
            </template>
            提交
          </a-button>
        </Popconfirm>
        <a-button type="white-blue" @click="cancelActivity">
          <template #icon>
            <BtnSvgIcon name="fanhui"></BtnSvgIcon>
          </template>
          返回
        </a-button>
      </Space>
      <!-- 实验编辑时的按钮组 -->
      <Space v-else>
        <template v-if="btnStatus.operatorShow">
          <a-button type="blue-white" v-if="btnStatus.editBtnShow" @click="editBtnEvent">
            <template #icon>
              <BtnSvgIcon name="xiugai"></BtnSvgIcon>
            </template>
            修改
          </a-button>
          <Popconfirm @confirm="saveBtnEvent" title="您确定保存为草稿吗？" v-if="btnStatus.saveBtnShow">
            <a-button type="blue-white">
              <template #icon>
                <BtnSvgIcon name="baocun"></BtnSvgIcon>
              </template>
              保存
            </a-button>
          </Popconfirm>
          <Popconfirm @confirm="submitBtnEvent" title="您确定保存并提交吗？">
            <a-button type="blue-white" :disabled="btnStatus.submitBtnDisabled">
              <template #icon>
                <BtnSvgIcon name="tijiao"></BtnSvgIcon>
              </template>
              提交
            </a-button>
          </Popconfirm>
        </template>
        <a-button type="white-blue" @click="editCancel">
          <template #icon>
            <BtnSvgIcon name="fanhui"></BtnSvgIcon>
          </template>
          返回
        </a-button>
      </Space>
    </template>
    <a-form :model="state.totalFormData" :labelCol="{ span: 8 }" :wrapperCol="{ span: 16 }" ref="totalFormRef">
      <a-row>
        <a-col :span="6">
          <a-form-item label="实验室名称" name="labName">
            <a-input v-model:value="state.totalFormData.labName" disabled></a-input>
          </a-form-item>
        </a-col>
        <a-col :span="6">
          <a-form-item label="所报数据汇总时间" name="summaryTime">
            <!-- <a-input v-model:value="state.totalFormData.summaryTime" :disabled="btnStatus.rowOperatorDisabled"></a-input> -->
            <a-select v-model:value="state.totalFormData.summaryTime" :options="state.dateOptions" placeholder="请选择时间段"
              showSearch disabled>
            </a-select>
          </a-form-item>
        </a-col>
        <a-col :span="6">
          <a-form-item label="备注" name="memo">
            <a-input v-model:value="state.totalFormData.memo" disabled></a-input>
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
    <!-- tab -->
    <Tabs v-model:activeKey="state.activeKey" v-if="state.accId">
      <TabPane :key="1" tab="病毒类实验活动" forceRender>
        <VirusActivityTab ref="virusTabRef" :row-operator-disabled="btnStatus.rowOperatorDisabled"
          :row-operator-show="btnStatus.rowOperatorShow" :accId="state.accId">
        </VirusActivityTab>
      </TabPane>
      <TabPane :key="2" tab="细菌放线菌类实验活动" forceRender>
        <BacteriaActivityTab ref="bacteriaTabRef" :row-operator-disabled="btnStatus.rowOperatorDisabled"
          :row-operator-show="btnStatus.rowOperatorShow" :accId="state.accId">
        </BacteriaActivityTab>
      </TabPane>
      <TabPane :key="3" tab="真菌类实验活动" forceRender>
        <FungusActivityTab ref="fungusTabRef" :row-operator-disabled="btnStatus.rowOperatorDisabled"
          :row-operator-show="btnStatus.rowOperatorShow" :accId="state.accId">
        </FungusActivityTab>
      </TabPane>
      <TabPane :key="4" tab="其他病原菌实验活动" forceRender>
        <OtherActivityTab ref="otherTabRef" :row-operator-disabled="btnStatus.rowOperatorDisabled"
          :row-operator-show="btnStatus.rowOperatorShow" :accId="state.accId">
        </OtherActivityTab>
      </TabPane>
    </Tabs>
  </a-card>
</template>
<script setup lang="tsx">
import { ref, reactive, createVNode, computed } from 'vue';
import { useRouter, useRoute } from 'vue-router';
import { TabPane, Tabs, Space, Modal, FormInstance, Popconfirm, message } from 'ant-design-vue';
import { ExclamationCircleOutlined } from '@ant-design/icons-vue';
import VirusActivityTab from './components/virusActivityTab.vue';
import BacteriaActivityTab from './components/bacteriaActivityTab.vue';
import FungusActivityTab from './components/fungusActivityTab.vue';
import OtherActivityTab from './components/otherActivityTab.vue';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue'
import { useDateOptions } from './hooks/useDateOptions'
import { useUserStore } from '@/store/modules/user';
import { getActivityById, getAllActivity, postActivity, putActivity, commitActivity, approveActivity } from '../../api/activity';
import { ActivityStatusEnum } from '@/enums/state'

const props = defineProps({
  // 实验室路由传false，其他传true
  isOrg: {
    type: Boolean,
    default: false,
  },
});
const router = useRouter();
const route = useRoute();
const ID = route.query.id as string
const isCreate = ref(!ID && !props.isOrg);
const dateOptions = useDateOptions()
const userStore = useUserStore()
const organization = userStore.getOrganizationInfo
const userId = userStore.userInfo.id
type TotalFormData = {
  labName: string;
  summaryTime: string | null;
  memo: string;
};
const state = reactive({
  accId: '', // 当前活动对应的备案id
  dateOptions: dateOptions,
  totalFormData: {
    labName: isCreate.value ? organization.name : '',
    summaryTime: null,
    memo: '',
  } as TotalFormData,
  totalFormRules: {
    labName: [{ required: true, message: '请输入验室名称', trigger: 'blur' }],
    summaryTime: [{ required: true, message: '请选择上传时间段', trigger: 'change' }],
  } as Partial<Record<keyof TotalFormData, any>>,
  activeKey: 1 as 1 | 2 | 3 | 4,
});

const totalFormRef = ref<FormInstance>();
const virusTabRef = ref<InstanceType<typeof VirusActivityTab>>();
const bacteriaTabRef = ref<InstanceType<typeof BacteriaActivityTab>>();
const fungusTabRef = ref<InstanceType<typeof FungusActivityTab>>();
const otherTabRef = ref<InstanceType<typeof OtherActivityTab>>();
const saveActivity = async (commit = true) => {
  try {
    if (commit) {
      const data = {
        id: ID
      }
      const res = await commitActivity(data)
      if (res.code === 200 && res.success) {
        message.success('')
      }
    } else {
      console.log('baocun')
    }
  } catch (error) {
    message.error('请填写信息!');
  }
};
const cancelActivity = () => {
  backEvent();
};
const editCancel = () => {
  backEvent();
};


const btnStatus = reactive({
  // 内部组件状态
  rowOperatorDisabled: true,
  rowOperatorShow: false,
  // 页面上的按钮状态
  operatorShow: false, // 控制除了返回按钮的其他按钮状态

  editBtnShow: true, // 编辑按钮显示
  saveBtnShow: false, // 保存按钮显示/与编辑互斥
  submitBtnDisabled: true, // 提交按钮Disabled

  // 创建时的按钮状态
  createBtns: isCreate.value,

  // org
  passBtnDisabled: true,
  refuseBtnDisabled: true,
  approveBtnShow: false,
});
const setLabBtnStatus = (status: ActivityStatusEnum) => {
  switch (status) {
    case ActivityStatusEnum.Draft:
      btnStatus.rowOperatorShow = true;
      btnStatus.rowOperatorDisabled = true;
      btnStatus.operatorShow = true;
      btnStatus.editBtnShow = true;
      btnStatus.saveBtnShow = false;
      btnStatus.submitBtnDisabled = false;
      break;
    case ActivityStatusEnum.WaitApprove:
      btnStatus.rowOperatorShow = false;
      btnStatus.operatorShow = false;
    case ActivityStatusEnum.ApprovePass:
      btnStatus.rowOperatorShow = false;
      btnStatus.operatorShow = false;
      break;
    case ActivityStatusEnum.ApproveRefuse:
      btnStatus.rowOperatorShow = true;
      btnStatus.rowOperatorDisabled = true;
      btnStatus.operatorShow = false;
      btnStatus.editBtnShow = false;
      btnStatus.saveBtnShow = false;
      btnStatus.submitBtnDisabled = true;
      break;
    default:
      break;
  }
};
const setOrgBtnStatsus = (status: ActivityStatusEnum, needApprove) => {
  if (needApprove) {
    btnStatus.approveBtnShow = true;
  }
  switch (status) {
    case ActivityStatusEnum.Draft:
      break;
    case ActivityStatusEnum.WaitApprove:
      btnStatus.passBtnDisabled = false;
      btnStatus.refuseBtnDisabled = false;
      break;
    case ActivityStatusEnum.ApprovePass:
      btnStatus.passBtnDisabled = true;
      btnStatus.refuseBtnDisabled = true;
      break;
    case ActivityStatusEnum.ApproveRefuse:
      btnStatus.passBtnDisabled = true;
      btnStatus.refuseBtnDisabled = true;
      break;
    default:
      break;
  }
};
const getDefaultData = async () => {
  if (!isCreate.value) {
    const res = await getActivityById(ID)
    state.accId = res.accId
    state.totalFormData.labName = res.labName
    state.totalFormData.memo = res.memo
    state.totalFormData.summaryTime = res.summaryTime
    // req获取单子状态，草稿，待审批，已审批，已退回
    const curState = res.workflowState ?? 0; //
    if (props.isOrg) {
      setOrgBtnStatsus(curState, true);
    } else {
      setLabBtnStatus(curState);
    }
  } else {
    btnStatus.operatorShow = true;
    btnStatus.rowOperatorShow = true;
    btnStatus.rowOperatorDisabled = false;
  }
};
getDefaultData();

const approvePass = async () => {
  // 审批通过
  console.log('审批通过');
  const res = await approveActivity({
    userId: userId!,
    businessId: ID,
    approveState: 2,
  })
  if (res.code === 200 && res.success) {
    message.success('审批成功')
    backEvent();
  }
};
const approveRefuse = async () => {
  console.log('审批不通过');
  const res = await approveActivity({
    userId: userId!,
    businessId: ID,
    approveState: 3,
  })
  if (res.code === 200 && res.success) {
    message.success('审批成功')
    backEvent();
  }
};

// 非新建的按钮事件
const editBtnEvent = () => {
  btnStatus.editBtnShow = false;
  btnStatus.saveBtnShow = true;
  btnStatus.submitBtnDisabled = true;
  btnStatus.rowOperatorDisabled = false;
};
const saveBtnEvent = async () => {
  try {
    console.log('baocun')
    // setLabBtnStatus(1);
    await getDefaultData()
    btnStatus.submitBtnDisabled = false
  } catch (error) {
    message.error('请填写信息!');
  }
};
const submitBtnEvent = async () => {
  // req

  const data = {
    id: ID
  }
  const res = await commitActivity(data)
  if (res.code === 200 && res.success) {
    message.success('提交成功')
    getDefaultData()
  } else {

  }
};
const backEvent = () => {
  router.go(-1);
};
</script>
<style lang="less" scoped></style>
<template>
  <DraggableModal title="设备维护记录" :visible="props.visible" @update:visible="emits('update:visible', $event)"
    width="1200px" destroy-on-close>
    <a-form :model="state.deviceMaintainceFormData" :label-col="{ span: 10 }" :wrapper-col="{ span: 14 }"
      :rules="state.formRules" ref="deviceMaintainceFormRef">
      <a-row>
        <a-col span="12">
          <a-form-item label="设备名称" name="equipmentName">
            <a-input placeholder="请输入设备名称" v-model:value="state.deviceMaintainceFormData.equipmentName"
              disabled></a-input>
          </a-form-item>
          <a-form-item label="下次检验日期" name="nextDate">
            <DatePicker v-model:value="state.deviceMaintainceFormData.nextDate" valueFormat="YYYY-MM-DD" disabled style="width:100%"  >
            </DatePicker>
          </a-form-item>
          <a-form-item label="检验人员" name="maintenancePerson">
            <a-input placeholder="请输入检验人员" v-model:value="state.deviceMaintainceFormData.maintenancePerson"></a-input>
          </a-form-item>
          <a-form-item label="高压灭菌器检定校准信息" v-if="props.data.type == 2" name="files">
            <BUpload :file-list="state.deviceMaintainceFormData.files" is-edit is-one @update:file-data="updateFileData"></BUpload>
          </a-form-item>
          <a-form-item label="生物安全柜年检报告" v-if="props.data.type == 1" name="files">
            <!-- <Upload :action="baseUrl + '/file/'" @change="handleChange" v-model:file-list="state.fileList" :maxCount="1">
              <a-button class="upload-btn">
                <span class="iconfont icon-caogao-bianji-wenjian-04" style="margin-right: 5px"></span>
                上传文件
              </a-button>
            </Upload> -->
            <BUpload :file-list="state.deviceMaintainceFormData.files" is-edit is-one @update:file-data="updateFileData"></BUpload>
          </a-form-item>
        </a-col>
        <a-col span="12">
          <a-form-item label="维护日期" name="maintenanceDate" style="width:100%">
            <DatePicker v-model:value="state.deviceMaintainceFormData.maintenanceDate" valueFormat="YYYY-MM-DD"
              placeholder="请选择维护日期" :allow-clear="false" style="width:100%">
            </DatePicker>
          </a-form-item>
          <a-form-item label="检验单位" name="maintenanceCompany">
            <a-input placeholder="请选择检验单位" v-model:value="state.deviceMaintainceFormData.maintenanceCompany"></a-input>
          </a-form-item>
          <a-form-item label="检验结果" name="result">
            <a-select v-model:value="state.deviceMaintainceFormData.result" :options="$dict.get('ExtraDeviceStatus')"
              placeholder="请选择检验结果">
            </a-select>
          </a-form-item>
        </a-col>
      </a-row>
      <a-form-item label="备注" name="memo" :label-col="{ span: 5 }" :wrapper-col="{ span: 19 }">
        <a-textarea placeholder="请输入备注" v-model:value="state.deviceMaintainceFormData.memo"
          :auto-size="{ minRows: 1, maxRows: 3 }"></a-textarea>
      </a-form-item>
    </a-form>
    <template #footer>
      <div>
        <a-button @click="modalCancel">取消</a-button>
        <a-button @click="modalReset">重置</a-button>
        <a-button type="primary" @click="modalOk">确定</a-button>
      </div>
    </template>
    <a-card title="设备维护记录">
      <vxe-grid :columns="columns" :data="maintainTable" max-height="300" ref="vxeGridRef" border align="center">
        <template #pager>
          <vxe-pager :layouts="['Sizes', 'PrevJump', 'PrevPage', 'Number', 'NextPage', 'NextJump', 'FullJump', 'Total']"
            :page-sizes="[5, 10, 15, 20]" v-model:current-page="tableOptions.pagerConfig.pageNum"
            v-model:page-size="tableOptions.pagerConfig.pageSize" :total="tableOptions.pagerConfig.total"
            @page-change="handlePageChange">
          </vxe-pager>
        </template>
      </vxe-grid>
    </a-card>
  </DraggableModal>
</template>
<script setup lang="tsx">
import config from '@/config';
import { ref, reactive, watch, onMounted, nextTick } from 'vue';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { DatePicker, FormInstance, Upload, message } from 'ant-design-vue';
import type { TableListItem } from './columns';
import { maintainceColumns } from './columns';
import { addLabDeviceMaintain, getLabDeviceMaintain } from '@/modules/lab/api/labDevice';
import type { UploadChangeParam } from 'ant-design-vue';
import { VxeGridProps, VxePagerEvents, VxeGridInstance } from 'vxe-table'
import dayjs from 'dayjs';
import { getFileJSX } from './components/fileCell'
import BUpload from '@/components/upload/index.vue'
/**
 * 上传文件
*/
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro

// 上传进度检查
const handleChange = (info: UploadChangeParam) => {
  if (info.file.status === 'done') {
    state.deviceMaintainceFormData.extendInfo = info.file.response?.data.md5;
  }
  if (info.file.status === 'error') {
    message.error('上传失败');
  }
};

const vxeGridRef = ref<VxeGridInstance>()
let maintainTable = ref([]);

/**
 * 接受父组件数据
*/
const props = defineProps({
  data: {
    type: Object as PropType<TableListItem>,
    required: true,
  },
  visible: {
    type: Boolean,
    required: true,
  },
});
const emits = defineEmits(['update:visible']);


type DeviceMaintainceFormDataType = {
  equipmentId?: '' | string,
  equipmentName: '' | string,
  nextDate: string | null,
  maintenancePerson: '',
  maintenanceDate: '',
  maintenanceCompany: '',
  result: '',
  memo?: '',
  extendInfo: '',
  file: string,
  files: any[]
}
const state = reactive({
  deviceMaintainceFormData: {
    equipmentName: '',
    equipmentId: ''
  } as DeviceMaintainceFormDataType,
  formRules: {
    // deviceName: [{ required: true, message: '请选择设备类型', blur: 'change' }],
    // nextDate: [{ required: true, message: '请选择设备类型', blur: 'change' }],
    maintenancePerson: [{ required: true, message: '请输入检验人员', blur: 'change' }],
    maintenanceDate: [{ required: true, message: '请选择维护日期', blur: 'change' }],
    maintenanceCompany: [{ required: true, message: '请输入检验单位', blur: 'change' }],
    result: [{ required: true, message: '请选择检测结果', }],
    files: [{
      required: true,
      validator: () => {
        if (state.deviceMaintainceFormData.files && state.deviceMaintainceFormData.files.length) {
          return Promise.resolve()
        }
        return Promise.reject('请上传文件')
      },
    }]
  } as Record<keyof DeviceMaintainceFormDataType, any>,
});
const deviceMaintainceFormRef = ref<FormInstance>();

let columns = ref([
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '生物安全柜年检报告',
    field: 'sw',
    visible: false,
    slots: {
      default: ({ row }) => getFileJSX(row)
    }
  },
  {
    title: '高压灭菌器检定校准信息',
    field: 'gy',
    visible: false,
    slots: {
      default: ({ row }) => getFileJSX(row)
    }
  },
  {
    title: '设备名称',
    field: 'equipmentName',
    formatter: ({ cellValue }) => {
      return cellValue ? props.data.name : ''
    }
  },
  ...maintainceColumns,
])

const modalCancel = () => {
  deviceMaintainceFormRef.value?.resetFields();
  emits('update:visible', false);
};
const modalReset = () => {
  state.deviceMaintainceFormData.files = []
  setTimeout(() => {
    deviceMaintainceFormRef.value?.resetFields();
  })
  state.deviceMaintainceFormData.extendInfo = ''
};
const modalOk = async () => {
  try {
    await deviceMaintainceFormRef.value?.validate()
    state.deviceMaintainceFormData.extendInfo = state.deviceMaintainceFormData.files[0].md5
    let res = await addLabDeviceMaintain(state.deviceMaintainceFormData)
    if (res.code === 200 && res.success) {
      message.success('添加成功')
      setTimeout(() => {
        deviceMaintainceFormRef.value?.resetFields()
      })
      state.deviceMaintainceFormData.equipmentName = props.data.name
      state.deviceMaintainceFormData.equipmentId = props.data.id
      state.deviceMaintainceFormData.files = []
      state.deviceMaintainceFormData.extendInfo = '' // 重置文件MD5
    }
  } catch (error) { }
  getList()
};

onMounted(() => {
  getList()
})
// watch(
//   () => props.data.name,
//   (nval) => {
//     console.log('n', nval, props.data.name)
//     state.deviceMaintainceFormData.equipmentName = props.data.name
//     state.deviceMaintainceFormData.equipmentId = props.data.id
//     console.log('watch data id', props.data.name, state.deviceMaintainceFormData.equipmentName)
//   },
// );
watch(
  () => props.visible,
  (nval) => {
    getList()
    if (nval) {
      deviceMaintainceFormRef.value?.resetFields()
      state.deviceMaintainceFormData.equipmentName = props.data.name
      state.deviceMaintainceFormData.equipmentId = props.data.id
      state.deviceMaintainceFormData.files = []
      state.deviceMaintainceFormData.extendInfo = '' // 重置文件MD5
      setTimeout(async () => {
        await vxeGridRef.value?.showColumn(props.data.type === 1 ? 'sw' : 'gy')
        await vxeGridRef.value?.hideColumn(props.data.type === 2 ? 'sw' : 'gy')
      })
    }
  },
);
watch(
  () => state.deviceMaintainceFormData.maintenanceDate,
  (newval) => {
    // var timestr = state.deviceMaintainceFormData.maintenanceDate?.replace(/-/g, '/');
    // var timestamp = new Date(timestr).getTime();
    // function timestampToString(timestamp) {
    //   var time = new Date(timestamp);
    //   var y = time.getFullYear();
    //   var m = time.getMonth() + 1 + props.data.testCycle;
    //   var d = time.getDate();
    //   //补零
    //   if (m < 10) m = '0' + m
    //   if (d < 10) d = '0' + d
    //   return y + '-' + m + '-' + d;
    // }
    // state.deviceMaintainceFormData.nextDate = timestampToString(timestamp)
    state.deviceMaintainceFormData.nextDate = state.deviceMaintainceFormData.maintenanceDate ?
      dayjs(state.deviceMaintainceFormData.maintenanceDate)
        .add(Number(props.data.testCycle), 'month')
        .format('YYYY-MM-DD')
      : null
  }
)

const tableOptions = reactive({
  pagerConfig: {
    enabled: true,
    layouts: [
      'PrevJump',
      'PrevPage',
      'Jump',
      'PageCount',
      'NextPage',
      'NextJump',
      'Sizes',
      'Total',
    ],
    pageNum: 1,
    pageSize: 5,
    total: 5,
    align: 'right',
    border: false,
    background: false,
    perfect: false,
    pageSizes: [10, 15, 20, 50, 100],
    autoHidden: false,
  },
  data: [] as any[],
  loading: false,
});
let getList = async () => {
  let res = await getLabDeviceMaintain({ pageNum: tableOptions.pagerConfig.pageNum, pageSize: tableOptions.pagerConfig.pageSize, equipmentId: props.data.id });
  maintainTable.value = res.data;
  tableOptions.pagerConfig.total = res.total;
}

/**
 * 分页
*/
const handlePageChange: VxePagerEvents.PageChange = ({ currentPage, pageSize }) => {
  tableOptions.pagerConfig.pageNum = currentPage;
  tableOptions.pagerConfig.pageSize = pageSize;
  getList()
}

const updateFileData = (e) => {
  state.deviceMaintainceFormData.files = e
  deviceMaintainceFormRef.value?.validateFields('files')
}
</script>
<style lang="less" scoped>
.upload-btn {
  display: flex;
  justify-content: space-around;
  align-items: center;
  width: 98px;
  height: 32px;
  font-size: 14px;
  font-family: Roboto;
  text-align: center;
  color: #fff;
  border-radius: 5px;
  background-color: #0052d9;
}
</style>
<template>
  <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager headerTitle="设备管理" align="center"
    border :toolbar="{}" :mode="1" search-btn-type="white-blue" :export-config="{}" :height="tableHeight">
    <template #action>
      <a-button type="blue-white" @click="addDevice">
        <template #icon>
          <BtnSvgIcon name="tianjia"></BtnSvgIcon>
        </template>
        添加
      </a-button>
      <a-button type="white-blue" @click="changeExport">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
  <DraggableModal v-model:visible="state.addDeviceModal" width="900px" destroy-on-close>
    <template #title>
      <div style="text-align: center; font-weight: 700"> {{ state.addDeviceModalTitle }}</div>
    </template>
    <a-form ref="addDeviceFormRef" :model="state.addDeviceFormData" :label-col="{ span: 12 }" :wrapper-col="{ span: 10 }"
      :rules="state.formRules">

      <a-row>
        <a-col :span="4">
          <Upload v-model:file-list="fileList" list-type="picture-card" class="avatar-uploader" :show-upload-list="false"
            :action="baseUrl + '/file/'" :headers="headers" :before-upload="beforeUpload" @change="handleChange"
            :disabled="state.disabled">
            <img v-if="imageUrl" :src="imageUrl" alt="avatar" class="img-text" />
            <div v-else>
              <loading-outlined v-if="loading" />
              <plus-outlined v-else />
              <img src="@/assets/images/shangchuanImg.png" alt="" class="ant-upload-imgBg ">
              <div class="ant-upload-text">上传设备照片</div>
            </div>
          </Upload>
          <div v-if="!imageUrl" class="ant-upload-description">支持PNG、JPG格式上传，图片大小不超过5MB
          </div>
        </a-col>

        <a-col :span="20">

          <a-row>
            <a-col :span="12">
              <a-form-item label="设备类型" name="type">
                <a-select v-model:value="state.addDeviceFormData.type" showSearch :options="$dict.get('DeviceType')"
                  placeholder="请选择设备类型" :disabled="state.disabled">
                </a-select>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="设备名称" name="name" :labelCol="rightLabel">
                <a-input placeholder="请输入设备名称" v-model:value="state.addDeviceFormData.name"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
          </a-row>

          <a-row>
            <a-col :span="12">
              <a-form-item label="购置日期" required name="purchaseDate">
                <DatePicker v-model:value="state.addDeviceFormData.purchaseDate" valueFormat="YYYY-MM-DD"
                  placeholder="请选择购置日期" :disabled="state.disabled"></DatePicker>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="最近检定/校准日期" required :labelCol="rightLabel" name="lastTestTime">
                <DatePicker v-model:value="state.addDeviceFormData.lastTestTime" valueFormat="YYYY-MM-DD"
                  placeholder="请选择最近检定/校准日期" :disabled="state.disabled"></DatePicker>
              </a-form-item>
            </a-col>
          </a-row>

          <a-row>
            <a-col :span="12">
              <a-form-item label="规格型号" name="specifications">
                <a-input placeholder="请输入规格型号" v-model:value="state.addDeviceFormData.specifications"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="检定/校准周期" name="testCycle" :labelCol="rightLabel">
                <a-input placeholder="请输入检定/校准周期" v-model:value="state.addDeviceFormData.testCycle"
                  :disabled="state.disabled" suffix="月" type="number" :min="0"></a-input>
              </a-form-item>
            </a-col>
          </a-row>

          <a-row>
            <a-col :span="12">
              <a-form-item label="生产厂家" name="manufacturer">
                <a-input placeholder="请输入生产厂家" v-model:value="state.addDeviceFormData.manufacturer"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="设备编号" name="code" :labelCol="rightLabel">
                <a-input placeholder="请输入设备编号" v-model:value="state.addDeviceFormData.code"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
          </a-row>

          <a-row>
            <a-col :span="12">
              <a-form-item label="是否国产设备" name="isDomestic">
                <!-- <a-select v-model:value="state.addDeviceFormData.isDomestic" :options="$dict.get('DeviceStatus')"
                  placeholder="请选择设备状态" :disabled="state.disabled">
                </a-select> -->
                <a-radio-group v-model:value="state.addDeviceFormData.isDomestic" :disabled="state.disabled">
                  <a-radio :value="true">是</a-radio>
                  <a-radio :value="false">否</a-radio>
                </a-radio-group>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="设备状态" name="status" :labelCol="rightLabel">
                <a-select v-model:value="state.addDeviceFormData.status" showSearch :options="$dict.get('ExtraDeviceStatus')"
                  placeholder="请选择设备状态" :disabled="state.disabled">
                </a-select>
              </a-form-item>
            </a-col>
          </a-row>

          <a-row>
            <a-col>
              <a-form-item label="备注" :labelCol="{ span: 6 }" :wrapperCol="{ span: 16 }" name="remarks">
                <a-textarea v-model:value="state.addDeviceFormData.remarks" :rows="3" :disabled="state.disabled" />
              </a-form-item>
            </a-col>
          </a-row></a-col>
      </a-row>

    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="addDeviceModalCancel">取消</a-button>
        <a-button @click="addDeviceModalReset">重置</a-button>
        <a-button type="primary" @click="addDeviceModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
  <DeviceMaintainceDetail :data="state.deviceMaintainceItem" v-model:visible="state.deviceMaintainceModal">
  </DeviceMaintainceDetail>
</template>
<script setup lang="tsx">
import config from '@/config';
import { VxeGridPropTypes } from 'vxe-table';
import type { TableColumnItem, TableListItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { reactive, ref, Ref, inject } from 'vue';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message, Upload, DatePicker } from 'ant-design-vue';
import { PlusOutlined, LoadingOutlined } from '@ant-design/icons-vue';
import DeviceMaintainceDetail from './deviceMaintainceDetail.vue';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { ACCESS_TOKEN_KEY } from "@/framework/enums/cacheEnum";
import { Storage } from "@/framework/utils/Storage";
import { getLabDeviceList, addLabDeviceList, delLabDeviceList, putlLabDeviceList } from '@/modules/lab/api/labDevice';
import dayjs, { Dayjs } from "dayjs";

const tableHeight = inject<Ref<number>>('tableHeight')
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro

// 上传需要
const headers = {
  Authorization: Storage.get(ACCESS_TOKEN_KEY),
}

const supertable = ref();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  let data = supertable.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
  };
  let res = await getLabDeviceList(params)
  return res
};
let columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 300,
    actions: ({ row }) => [
      {
        label: '设备维护',
        onClick: () => {
          console.log('设备维护');
          state.deviceMaintainceModal = true;
          state.deviceMaintainceItem = { ...row };
        },
      },
      {
        label: '修改',
        onClick: () => {
          state.addDeviceFormData = { ...row };
          state.showFooter = true;
          state.addDeviceModal = true;
          state.addDeviceModalTitle = '修改设备';
          state.statusDeviceMode = StatusDeviceListEnum.Edit
          state.disabled = false;
          // imageUrl.value = `${location.origin}/api/file/md5/${row.imgUrl}`;
          imageUrl.value = row.imgUrl ? `${location.origin}${baseUrl}/file/md5/${row.imgUrl}` : '';
        },
      },
      {
        label: '查看',
        onClick: () => {
          state.addDeviceFormData = { ...row };
          state.showFooter = false;
          state.addDeviceModal = true;
          state.addDeviceModalTitle = '查看设备';
          state.disabled = true;
          // imageUrl.value = `${location.origin}/api/file/md5/${row.imgUrl}`;
          imageUrl.value = row.imgUrl ? `${location.origin}${baseUrl}/file/md5/${row.imgUrl}` : '';
        },
      },
      {
        label: '删除',
        popConfirm: {
          title: '是否删除设备？',
          onCancel() { },
          onConfirm: () => delLabDevice(row)
        },
      },
    ],
  },
];

const state = reactive<{
  statusDeviceMode: number,
  addDeviceModalTitle: string;
  addDeviceModal: boolean;
  addDeviceFormData: TableListItem;
  formRules: any;
  showFooter: boolean;
  disabled: boolean;
  deviceMaintainceModal: boolean;
  deviceMaintainceItem: TableListItem;
  isDomestic: boolean;
}>({
  statusDeviceMode: 1,
  addDeviceModalTitle: '添加设备',
  addDeviceModal: false,
  deviceMaintainceModal: false,
  deviceMaintainceItem: {} as TableListItem,
  addDeviceFormData: {
    id: '',
    type: null,
    name: '',
    manufacturer: '',
    specifications: '',
    purchaseDate: '',
    testCycle: '',
    lastTestTime: '',
    code: '',
    // deviceCount: 0,
    status: null,
    remarks: '',
    imgUrl: '',
    isDomestic: false
  },
  formRules: {
    type: [{ required: true, message: '请选择设备类型', }],
    purchaseDate: [{ required: true, message: '请选择购置日期', blur: 'change' }],
    specifications: [{ required: true, message: '请输入规格型号', blur: 'change' }],
    manufacturer: [{ required: true, message: '请输入生产厂家', blur: 'change' }],
    status: [{ required: true, message: '请选择设备状态', }],
    name: [{ required: true, message: '请输入设备名称', blur: 'change' }],
    lastTestTime: [{ required: true, message: '请选择日期', blur: 'change' }],
    testCycle: [{ required: true, message: '请输入周期' }],
    code: [{ required: true, message: '请输入设备编号', blur: 'change' }],
    isDomestic: [{ required: true, message: '请选择是否是国产设备' }],
    // deviceCount: [{ required: true, message: '请输入设备数量', blur: 'change' }],
  },
  showFooter: true,
  disabled: false,
});
const addDeviceFormRef = ref<FormInstance>();
// const purchaseDate = ref<Dayjs>(dayjs(dayjs(), 'YYYY-MM-DD'));
// const lastTestTime = ref<Dayjs>(dayjs(dayjs(), 'YYYY-MM-DD'));

// watch(purchaseDate, () => {
//   state.addDeviceFormData.purchaseDate = dayjs(purchaseDate.value).format('YYYY-MM-DD')
// }, { immediate: true })
// watch(lastTestTime, () => {
//   state.addDeviceFormData.lastTestTime = dayjs(lastTestTime.value).format('YYYY-MM-DD')
// }, { immediate: true })

// 样式
const rightLabel = { span: 10 };
/**
 * 图片上传
 */
const fileList = ref([]);
const loading = ref<boolean>(false);
const imageUrl = ref<string>('');
const getBase64 = (img: Blob, callback: (base64Url: string) => void) => {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result as string));
  reader.readAsDataURL(img);
};
// 上传进度检查
const handleChange = (info: UploadChangeParam) => {
  console.log(info)
  if (info.file.status === 'uploading') {
    loading.value = true;
    return;
  }
  if (info.file.status === 'done') {
    // Get this url from response in real world.
    getBase64(info.file.originFileObj!, (base64Url: string) => {
      imageUrl.value = base64Url;
      loading.value = false;
    });
    state.addDeviceFormData.imgUrl = info.file.response?.data.md5;
  }
  if (info.file.status === 'error') {
    loading.value = false;
    message.error('上传失败');
  }
};
// 图片类型检查
const beforeUpload = (file: UploadProps['fileList'][number]) => {
  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
  if (!isJpgOrPng) {
    message.error('仅允许上传JPG和PNG类型图片!');
  }
  const isLt2M = file.size / 1024 / 1024 < 5;
  if (!isLt2M) {
    message.error('图片大小不超过5M!');
  }
  return isJpgOrPng && isLt2M;
};

/**
 * 按钮状态
*/
enum StatusDeviceListEnum {
  Add = 1,
  Edit = 2,
}

const addDevice = () => {
  addDeviceFormRef.value?.resetFields();
  // for (let key in state.addDeviceFormData) {
  //   if (state.addDeviceFormData[key] !== '' || state.addDeviceFormData[key] !== undefined || state.addDeviceFormData[key] !== null) {
  //     delete state.addDeviceFormData[key]
  //   }
  // }
  state.addDeviceFormData = {
    id: '',
    type: null,
    name: '',
    manufacturer: '',
    specifications: '',
    purchaseDate: '',
    testCycle: '',
    lastTestTime: '',
    code: '',
    status: null,
    remarks: '',
    imgUrl: '',
    isDomestic: false
  }
  imageUrl.value = '';
  state.showFooter = true;
  state.addDeviceModal = true;
  state.addDeviceModalTitle = '添加设备';
  state.statusDeviceMode = StatusDeviceListEnum.Add,
    state.disabled = false;
};
const addDeviceModalOk = async () => {
  // console.log('state.addDeviceFormData', state.addDeviceFormData)
  try {
    await addDeviceFormRef.value?.validate();
    // req
    state.addDeviceModal = false;
    switch (state.statusDeviceMode) {
      case StatusDeviceListEnum.Add:
        let ress = await addLabDeviceList(state.addDeviceFormData);
        if (ress) message.success('添加设备成功')
        break;
      case StatusDeviceListEnum.Edit:
        let res = await putlLabDeviceList(state.addDeviceFormData);
        break
    }
    supertable.value?.queryTable()
  } catch (error) { }
};
const addDeviceModalCancel = () => {
  state.addDeviceModal = false;
};
const addDeviceModalReset = () => {
  addDeviceFormRef.value?.resetFields();
  fileList.value = []
  imageUrl.value = ''
  state.addDeviceFormData.imgUrl = ''
}
// const uploadDone = (val) => {
//   state.addDeviceFormData.imgUrl = val.url;
// }
/**
 * 删除数据请求
 * @param row
 */
const delLabDevice = async (row) => {
  try {
    let res = await delLabDeviceList(row.id);
    if (res) {
      message.success('删除成功')
      supertable.value?.queryTable()
    }

  } catch (error) {
    message.error('error')
  }
}
/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value.openExport()
}
</script>
<style lang="less" scoped>
.avatar-uploader> :deep(.ant-upload) {
  width: 200px;
  height: 248px;
  text-align: center;

  .ant-upload-text {
    color: #0052d9;
    position: relative;
  }

  .ant-upload-imgBg {
    position: relative;
    left: 17px;
    top: -30px;
    background: #fafafa;
  }
}

.ant-upload-description {
  width: 200px;
  color: rgba(130, 143, 169, 100);
  font-size: 12px;
  font-family: SourceHanSansSC-regular;
}

.ant-upload-select-picture-card i {
  font-size: 32px;
  color: #999;
}

.ant-upload-select-picture-card .ant-upload-text {
  margin-top: 8px;
  color: #666;
}

.img-text {
  width: 150px;
  height: auto;
}
</style>
<template>
  <Upload v-model:file-list="fileList" list-type="picture-card" class="avatar-uploader" :show-upload-list="false"
    :action="baseUrl + '/file/'" :headers="headers" :before-upload="beforeUpload" @change="handleChange">
    <img v-if="imageUrl" :src="imageUrl" alt="avatar" style="width: 90%;max-height: 90%;" />
    <div v-else>
      <loading-outlined v-if="loading"></loading-outlined>
      <plus-outlined v-else></plus-outlined>
      <div class="ant-upload-text">Upload</div>
    </div>
  </Upload>
</template>
<script setup lang="tsx">
import config from '@/config';
import { ref } from 'vue';
import { message, Upload } from 'ant-design-vue';
import { PlusOutlined, LoadingOutlined } from '@ant-design/icons-vue';
import { Storage } from "@/framework/utils/Storage";
import { ACCESS_TOKEN_KEY } from "@/framework/enums/cacheEnum";
import type { UploadChangeParam, UploadProps, UploadFile } from 'ant-design-vue';
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro

// 上传需要
const headers = {
  Authorization: Storage.get(ACCESS_TOKEN_KEY),
}

const fileList = ref([]);
const loading = ref<boolean>(false);
const imageUrl = ref<string>('');
const emits = defineEmits(['uploadDone'])
function getBase64(img: Blob, callback: (base64Url: string) => void) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result as string));
  reader.readAsDataURL(img);
}
const handleChange = (info: UploadChangeParam<UploadFile<UploadFileResponse>>) => {

  if (info.file.status === 'uploading') {
    loading.value = true;
    return;
  }
  if (info.file.status === 'done') {
    // Get this url from response in real world.
    getBase64(info.file.originFileObj!, (base64Url: string) => {
      imageUrl.value = base64Url;
      loading.value = false;
    });
    emits('uploadDone', info.file.response?.data)
    // info.file.response?.data.md5
  }
  if (info.file.status === 'error') {
    loading.value = false;
    message.error('upload error');
  }
};
const beforeUpload = (file: UploadFile) => {
  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/jpg';
  if (!isJpgOrPng) {
    message.error('You can only upload JPG file!');
  }
  const isLt2M = file.size! / 1024 / 1024 < 2;
  if (!isLt2M) {
    message.error('Image must smaller than 2MB!');
  }
  return isJpgOrPng && isLt2M;
};
</script>
<style lang="less" scoped>
.avatar-uploader:deep(.ant-upload) {
  width: 100%;
  height: 300px;
}

.ant-upload-select-picture-card i {
  font-size: 32px;
  color: #999;
}

.ant-upload-select-picture-card .ant-upload-text {
  margin-top: 8px;
  color: #666;
}
</style><template>
  <SuperTable ref="supertable" :columns="columns" :data-request="fetchData" search pager headerTitle="人员信息管理"
    align="center" border :toolbar="{}" :mode="1" search-btn-type="white-blue" :height="tableHeight">
    <template #action>
      <a-button type="blue-white" @click="addUser">
        <template #icon>
          <BtnSvgIcon name="tianjia"></BtnSvgIcon>
        </template>
        添加
      </a-button>
      <a-button type="white-blue" @click="changeExport">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
  <DraggableModal v-model:visible="state.addUserModal" width="900px" destroy-on-close>
    <template #title>
      <div style="text-align: center; font-weight: 700"> {{ state.addUserModalTitle }}</div>
    </template>
    <a-form ref="addUserFormRef" :model="state.addUserFormData" :label-col="{ span: 12 }" :wrapper-col="{ span: 10 }"
      :rules="state.formRules">
      <a-row>
        <a-col :span="4">
          <Upload v-model:file-list="fileList" list-type="picture-card" class="avatar-uploader" :show-upload-list="false"
            :action="baseUrl + '/file/'" :headers="headers" :before-upload="beforeUpload" @change="handleChange"
            :disabled="state.disabled">
            <img v-if="imageUrl" :src="imageUrl" alt="avatar" class="img-text" />
            <div v-else>
              <loading-outlined v-if="loading" />
              <plus-outlined v-else />
              <img src="@/assets/images/shangchuanImg.png" alt="" class="ant-upload-imgBg">
              <div class="ant-upload-text">上传人员照片</div>
            </div>
          </Upload>
          <div v-if="!imageUrl" class="ant-upload-description">支持PNG、JPG格式上传，图片大小不超过5MB</div>
        </a-col>

        <a-col :span="20">
          <a-row>
            <a-col :span="12">
              <a-form-item label="人员姓名" name="name" class="name-form">
                <a-input placeholder="请输入姓名" v-model:value="state.addUserFormData.name"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="人员性别" name="sex" :labelCol="rightLabel">
                <a-radio-group v-model:value="state.addUserFormData.sex" showSearch :options="$dict.get('sex')"
                  placeholder="请选择性别" :disabled="state.disabled"></a-radio-group>
              </a-form-item>
            </a-col>
          </a-row>
          <a-row>
            <a-col :span="12">
              <a-form-item label="出生日期" name="birthDate">
                <DatePicker v-model:value="state.addUserFormData.birthDate" format="YYYY-MM-DD" valueFormat="YYYY-MM-DD"
                  placeholder="请选择出生日期" :disabled="state.disabled"></DatePicker>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="参加工作日期" :labelCol="rightLabel" name="workDate">
                <DatePicker v-model:value="state.addUserFormData.workDate" format="YYYY-MM-DD" valueFormat="YYYY-MM-DD"
                  placeholder="请选择参加工作日期" :disabled="state.disabled"></DatePicker>
              </a-form-item>
            </a-col>
          </a-row>
          <a-row>
            <a-col :span="12">
              <a-form-item label="职称" name="jobTitle">
                <a-select v-model:value="state.addUserFormData.jobTitle" showSearch :options="$dict.get('JobTitle')"
                  placeholder="请选择职称" :disabled="state.disabled"></a-select>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="学历" name="academic" :labelCol="rightLabel">
                <a-select v-model:value="state.addUserFormData.academic" showSearch :options="$dict.get('Academic')"
                  placeholder="请选择角色" :disabled="state.disabled"></a-select>
              </a-form-item>
            </a-col>
          </a-row>
          <a-row>
            <a-col :span="12">
              <a-form-item label="所学专业" name="major">
                <a-input placeholder="请输入所学专业" v-model:value="state.addUserFormData.major"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="12">
              <a-form-item label="现从事岗位" name="jobs" :labelCol="rightLabel">
                <a-select v-model:value="state.addUserFormData.jobs" showSearch :options="$dict.get('Job')"
                  placeholder="请选择现从事岗位" :disabled="state.disabled"></a-select>
              </a-form-item>
            </a-col>
          </a-row>
          <a-row>
            <a-col :span="11">
              <a-form-item label="身份证号" name="idcard" :labelCol="{ span: 13 }" :wrapperCol="{ span: 12 }">
                <a-input placeholder="请输入身份证号" v-model:value="state.addUserFormData.idcard"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
            <a-col :span="13">
              <a-form-item label="生物安全培训合格证号" name="certNum" :labelCol="{ span: 11 }" :wrapperCol="{ span: 9 }">
                <a-input placeholder="请输入生物安全培训合格证号" v-model:value="state.addUserFormData.certNum"
                  :disabled="state.disabled"></a-input>
              </a-form-item>
            </a-col>
          </a-row>
          <a-row>
            <a-col>
              <a-form-item label="备注" name="remarks" :label-col="{ span: 6 }" :wrapper-col="{ span: 16 }">
                <a-textarea placeholder="请输入备注" v-model:value="state.addUserFormData.remarks"
                  :disabled="state.disabled"></a-textarea>
              </a-form-item>
            </a-col>
          </a-row>
        </a-col>
      </a-row>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="addUserModalCancel">取消</a-button>
        <a-button @click="addUserModalReset">重置</a-button>
        <a-button type="primary" @click="addUserModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import config from '@/config';
import { VxeGridPropTypes } from 'vxe-table';
import type { TableColumnItem, TableListItem } from './columns';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import { reactive, ref, Ref, inject } from 'vue';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message, Upload, DatePicker } from 'ant-design-vue';
import { PlusOutlined, LoadingOutlined } from '@ant-design/icons-vue';
import type { UploadChangeParam, UploadProps } from 'ant-design-vue';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { ACCESS_TOKEN_KEY } from "@/framework/enums/cacheEnum";
import { Storage } from "@/framework/utils/Storage";
import { getLabPersonList, addLabPersonList, delLabPersonList, putLabPersonList } from '@/modules/lab/api/labPerson';
import dayjs, { Dayjs } from "dayjs";

const tableHeight = inject<Ref<number>>('tableHeight')
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro

// 上传需要
const headers = {
  Authorization: Storage.get(ACCESS_TOKEN_KEY),
}

const supertable = ref();


// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  let data = supertable.value?.getFormModel();
  let params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
  };
  let res = await getLabPersonList(params)
  return res
};

let columns: Array<TableColumnItem> = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          state.addUserFormData = { ...row };
          console.log(state.addUserFormData, '修改')
          state.showFooter = true;
          state.addUserModal = true;
          state.addUserModalTitle = '修改相关人员';
          state.addUserMode = AddUserModeEnum.Edit;
          state.disabled = false;
          imageUrl.value = state.addUserFormData.imgUrl ? `${location.origin}${baseUrl}/file/md5/${state.addUserFormData.imgUrl}` : '';
          // imageUrl.value = `${location.origin}/api/file/md5/${row.imgUrl}`;
        },
      },
      {
        label: '查看',
        onClick: () => {
          state.addUserFormData = { ...row };
          console.log(state.addUserFormData, '查看')
          console.log(row, '查看row')
          state.showFooter = false;
          state.addUserModal = true;
          state.addUserModalTitle = '查看相关人员';
          state.disabled = true;
          imageUrl.value = state.addUserFormData.imgUrl ? `${location.origin}${baseUrl}/file/md5/${state.addUserFormData.imgUrl}` : '';
          // imageUrl.value = `${location.origin}/api/file/md5/${row.imgUrl}`;
        },
      },
      {
        label: '删除',
        popConfirm: {
          title: '是否确认删除？',
          onCancel() { },
          onConfirm: () => delLabPerson(row)
        },
      },
    ],
  },
];

const state = reactive<{
  addUserMode: number;
  addUserModalTitle: string;
  addUserModal: boolean;
  addUserFormData: TableListItem;
  formRules: Partial<Record<keyof TableListItem, any>>;
  showFooter: boolean;
  disabled: boolean;
}>({
  addUserMode: 1,
  addUserModalTitle: '添加相关人员',
  addUserModal: false,
  addUserFormData: {
    name: '',
    sex: 1,
    birthDate: '',
    workDate: '',
    jobTitle: '',
    academic: '',
    major: '',
    jobs: '',
    certNum: '',
    idcard: '',
    remarks: '',
    imgUrl: '',
  },
  formRules: {
    name: [{ required: true, min: 2, max: 5, message: '用户名长度需为2~5之间', blur: 'change' }],
    birthDate: [{ required: true, message: '请选择出生日期', blur: 'change' }],
    jobTitle: [{ required: true, message: '请选择职称', }],
    major: [{ required: true, message: '请输入所学专业', blur: 'change' }],
    idcard: [{
      required: true, message: '请输入身份证号', pattern: new RegExp(/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/), blur: 'change'
    }],
    sex: [{ required: true, message: '请选择人员性别', }],
    workDate: [{ required: true, message: '请选择参加工作日期', blur: 'change' }],
    academic: [{ required: true, message: '请选择学历', }],
    jobs: [{ required: true, message: '请选择从事岗位', }],
    certNum: [{ message: '请输入生物安全培训合格证' }],
  },
  showFooter: true,
  disabled: false,
});

const addUserFormRef = ref<FormInstance>();
// const birthDate = ref<Dayjs>(dayjs(dayjs(), 'YYYY-MM-DD'));
// const workDate = ref<Dayjs>(dayjs(dayjs(), 'YYYY-MM-DD'));

// watch(birthDate, () => {
//   state.addUserFormData.birthDate = dayjs(birthDate.value).format('YYYY-MM-DD')
// }, { immediate: true })
// watch(workDate, () => {
//   state.addUserFormData.workDate = dayjs(workDate.value).format('YYYY-MM-DD')
// }, { immediate: true })


// 样式
const rightLabel = { span: 10 };
/**
 * 图片上传
 */
const fileList = ref([]);
const loading = ref<boolean>(false);
const imageUrl = ref<string>('');
const getBase64 = (img: Blob, callback: (base64Url: string) => void) => {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result as string));
  reader.readAsDataURL(img);
};
// 上传进度检查
const handleChange = (info: UploadChangeParam) => {
  console.log(info)
  if (info.file.status === 'uploading') {
    loading.value = true;
    return;
  }
  if (info.file.status === 'done') {
    // Get this url from response in real world.
    getBase64(info.file.originFileObj!, (base64Url: string) => {
      imageUrl.value = base64Url;
      loading.value = false;
    });
    state.addUserFormData.imgUrl = info.file.response?.data.md5;
  }
  if (info.file.status === 'error') {
    loading.value = false;
    message.error('上传失败');
  }
};
// 图片类型检查
const beforeUpload = (file: UploadProps['fileList'][number]) => {
  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
  if (!isJpgOrPng) {
    message.error('仅允许上传JPG和PNG类型图片!');
  }
  const isLt2M = file.size / 1024 / 1024 < 5;
  if (!isLt2M) {
    message.error('图片大小不超过5M!');
  }
  return isJpgOrPng && isLt2M;
};

/**
 * 相关人员 新增
*/
enum AddUserModeEnum {
  Add = 1,
  Edit = 2,
}
const addUser = () => {
  addUserFormRef.value?.resetFields();
  for (let key in state.addUserFormData) {
    if (state.addUserFormData[key] !== '' || state.addUserFormData[key] !== undefined || state.addUserFormData[key] !== null) {
      delete state.addUserFormData[key]
    }
  }
  imageUrl.value = '';
  state.showFooter = true;
  state.addUserModal = true;
  state.addUserModalTitle = '添加相关人员';
  state.addUserMode = AddUserModeEnum.Add
  state.disabled = false;
};
const addUserModalOk = async () => {
  console.log(state.addUserFormData, 'data')
  try {
    await addUserFormRef.value?.validate();
    // req
    state.addUserModal = false;
    switch (state.addUserMode) {
      case AddUserModeEnum.Add:
        let ress = await addLabPersonList(state.addUserFormData);
        if (ress) message.success('添加人员成功')
        break;
      case AddUserModeEnum.Edit:
        let res = await putLabPersonList(state.addUserFormData);
        break
    }
    supertable.value?.queryTable()

  } catch (error) { console.log('错') }
};
const addUserModalCancel = () => {
  state.addUserModal = false;
};
const addUserModalReset = () => {
  addUserFormRef.value?.resetFields();
  fileList.value = []
  imageUrl.value = ''
  state.addUserFormData.imgUrl = ''
}

/**
 * 删除数据请求
 * @param row
 */
const delLabPerson = async (row) => {
  try {
    let res = await delLabPersonList(row.id);
    if (res) {
      message.success('删除成功');
      supertable.value?.queryTable()
    }

  } catch (error) {
    message.error('error')
  }
}
/**
 * 导出表格
*/
const changeExport = () => {
  supertable.value.openExport()
}
</script>
<style lang="less" scoped>
.avatar-uploader> :deep(.ant-upload) {
  width: 200px;
  height: 248px;
  text-align: center;

  .ant-upload-text {
    color: #0052d9;
    position: relative;
  }

  .ant-upload-imgBg {
    position: relative;
    left: 17px;
    top: -30px;
    background: #fafafa;
  }
}

.ant-upload-description {
  width: 200px;
  color: rgba(130, 143, 169, 100);
  font-size: 12px;
  font-family: SourceHanSansSC-regular;
}

.ant-upload-select-picture-card i {
  font-size: 32px;
  color: #999;
}

.ant-upload-select-picture-card .ant-upload-text {
  margin-top: 8px;
  color: #666;
}

.img-text {
  width: 150px;
  height: auto;
}
</style>
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';


const routes: Array<RouteRecordRaw> = [
  {
    path: '/labActivityRecord',
    name: 'labActivityRecord',
    meta: {
      title: '实验室活动管理',
      icon: 'icon-flag',
      keepAlive: true
    },
    component: () =>
      import(
        /* webpackChunkName: "labActivityRecord" */ '@/modules/lab/pages/labActivityRecord/index.vue'
      ),
  },
  {
    path: '/labActivityRecordAdd',
    name: 'labActivityRecordAdd',
    meta: {
      title: '添加实验室活动',
      icon: 'icon-flag',
      activeMenu: 'labActivityRecord',
      hideInMenu: true
    },
    component: () =>
      import(
        /* webpackChunkName: "labActivityRecordAdd" */ '@/modules/lab/pages/labActivityRecordAdd/index.vue'
      ),
  },
  {
    path: '/labPersonManagement',
    name: 'labPersonManagement',
    meta: {
      title: '相关人员管理',
      icon: 'icon-people1',
    },
    component: () =>
      import(
        /* webpackChunkName: "labPersonManagement" */ '@/modules/lab/pages/labPersonManagement/index.vue'
      ),
  },
  {
    path: '/labDeviceManagement',
    name: 'labDeviceManagement',
    meta: {
      title: '设备管理',
      icon: 'icon-devices',
    },
    component: () =>
      import(
        /* webpackChunkName: "labDeviceManagement" */ '@/modules/lab/pages/labDeviceManagement/index.vue'
      ),
  },
];

export default routes;import { request } from '@/framework/utils/request';

/**
 * 实验室备案人员表()接口(表：acc_lab_person)
 *
 * @author liukaixuan
 * @since 2022-12-29 09:42:39
 */
const path = '/$requestMapping';

// 分页动态查询
export function get(query: API.PageParams) {
  return request({
    url: path + '/page',
    method: 'get',
    params: query,
  });
}

// 删除信息
export function deleteLab(id: number) {
  return request(
    {
      url: path + '/' + id,
      method: 'delete',
    },
    { successMsg: '删除成功' },
  );
}

// 更新信息
export function update(data: API.Update) {
  return request(
    {
      url: path + '/' + data.id,
      method: 'put',
      data,
    },
    { successMsg: '修改成功' },
  );
}

// 创建信息
export function create(data: API.Create) {
  return request(
    {
      url: path,
      method: 'post',
      data,
    },
    { successMsg: '创建成功' },
  );
}
/**
 * 实验室备案人员表()实体(表：acc_lab_person)
 *
 * @author liukaixuan
 * @since 2022-12-29 09:42:38
 */
declare namespace API {
  type Create = {
                                accId: String;
                        name: String;
                        sex: Integer;
                        birthDate: Date;
                        workDate: Date;
                        jobTitle: Integer;
                        academic: Integer;
                        major: String;
                        jobs: Integer;
                        certNum: String;
                        idcard: Integer;
                        organizationId: String;
                                                    };

  type Update = Create & {
    id: string;
  };

  type  = Create & BaseEntity & {};
}

<template>
  <div>
    <SuperTable
      ref="dynamicTableRef"
      :header-title="title"
      :data-request="getDataByPage"
      :columns="columns"
      search
      pager
      bordered
      size="small"
    >
      <template #action>
        <a-button type="primary" @click="handleCreateOrUpdate({})">{{
          $t('common.addText')
        }}</a-button>
      </template>
    </SuperTable>
  </div>
</template>

<script lang="tsx">
  export default {
    name: 'Page',
  };
</script>

<script lang="tsx" setup>
  import { ref } from 'vue';
  import { SuperTable } from '@/framework/components/core/super-table';
  import { get, deleteLab, update, create } from '_m/labacc/api';
  import { baseColumns } from './columns';
  import type { TableListItem, TableColumnItem } from './columns';
  import { formSchemas } from './formSchemas';
  import { useFormModal } from '@/framework/components/core/draggable-modal';
  import { transformI18n } from '@/framework/hooks/useI18n';
  import { VxeGridPropTypes } from 'vxe-table';

  const dynamicTableRef = ref<InstanceType<typeof SuperTable>>();
  const [showModal] = useFormModal();
  const title = '实验室备案人员表';

  const getDataByPage = (
    ori: VxeGridPropTypes.ProxyAjaxQueryParams,
    data,
  ): Promise<API.TableListResult> => {
    return new Promise((resolve, reject) => {
      let reqParams = {
        ...data,
        pageIndex: ori.page?.currentPage,
        pageSize: ori.page?.pageSize,
        orderBy: ori.sort.field ? [{ field: ori.sort.field, order: ori.sort.order }] : null,
      };
      get(reqParams)
        .then((data) => {
          resolve(data);
        })
        .catch(() => {
          reject();
        });
    });
  };
  const columns: TableColumnItem[] = [
    ...baseColumns,
    {
      title: transformI18n('common.actionText'),
      width: 200,
      field: '$action',
      hideInSearch: true,
      align: 'center',
      fixed: 'right',
      actions: ({ row }) => [
        {
          label: transformI18n('common.editText'),
          onClick: () => handleCreateOrUpdate(row),
        },
        {
          label: transformI18n('common.delText'),
          popConfirm: {
            title: transformI18n('common.delConfirmText'),
            onConfirm: () => handleDelete(row),
          },
        },
      ],
    },
  ];

  // 删除信息
  const handleDelete = async (record: TableListItem) => {
    if (!record.id) return;
    await deleteLab(record.id);
    dynamicTableRef.value?.refreshTable();
  };

  const handleCreateOrUpdate = async (record: Partial<TableListItem>) => {
    const [formRef] = await showModal<API.Update>({
      modalProps: {
        title: `${
          record.id ? transformI18n('common.editText') : transformI18n('common.addText')
        }${title}`,
        width: '50%',
        onFinish: async (values, _formRef) => {
          record.id && (values.id = record.id);
          const params = {
            ...values,
          };
          console.log('新增/编辑' + title, params);
          await (record.id ? update : create)(params);
          dynamicTableRef.value?.refreshTable();
        },
      },
      formSchema: {
        labelWidth: 100,
        layout: 'vertical',
        schemas: formSchemas,
      },
    });
    if (record.id) {
      formRef.value?.setFieldsValue({
        ...record,
      });
    }
  };
</script>
/**
 * 定义应用子系统情况以及子系统与模块关系
 */
// 用于SSO单点登录检验与跳转
import Storage from '@/framework/utils/Storage';
import { SSO_SUB_SYSTEMS_KEY } from '@/framework/enums/cacheEnum';

export declare type SSOSubSystem = SSO.SystemInfo;

export declare type LocalSubSystem = {
  name: string;
  subModules?: string[];
};

/**
 * 外部系统信息
 */
export const subSysFromSSO =
  Storage.get<SSOSubSystem[]>(SSO_SUB_SYSTEMS_KEY) || ([] as SSOSubSystem[]);

/**
 * 本地系统信息
 * 若子系统名为default，模块会显示有模块。
 * 若仅有一个模块，效果将和default一致。
 */
export const subSysFromLocal: LocalSubSystem[] = [];

/**
 * menu顺序，只支持单模块，模块中没添加到数组中的会按照文件顺序排在最后
 */
export const singleModuleMenu = [
  'infoManagement', // 信息审批模块在最前面
  'provinCeOrg',
  'cityOrg',
  'company',
  'lab',
  // "system",
  // "demo",
];
import { request } from "@/framework/utils/request"

export const getBioSafePage = (params: API.PageParams) => {
  return request({
    url: '/bioCert/page',
    method: 'get',
    params
  })
}

export const getBioSafe = (params) => {
  return request({
    url: '/bioCert/list',
    method: 'get',
    params
  })
}

export const postBioSafe = (data) => {
  return request({
    url: '/bioCert/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putBioSafe = (data) => {
  return request({
    url: '/bioCert/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteBioSafe = (id: string) => {
  return request({
    url: '/bioCert/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}

export const importLicense = (data) => {
  return request({
    url: '/bioCert/batchInsert',
    method: 'post',
    data,
  }, {
    isGetDataDirectly: false
  })
} import { request } from "@/framework/utils/request"

export const getCompanyPropertyPage = (params: API.PageParams) => {
  return request({
    url: '/companyNature/page',
    method: 'get',
    params
  })
}

export const getCompanyProperty = (params) => {
  return request({
    url: '/companyNature/list',
    method: 'get',
    params
  })
}

export const postCompanyProperty = (data) => {
  return request({
    url: '/companyNature/',
    method: 'post',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const putCompanyProperty = (data) => {
  return request({
    url: '/companyNature/' + data.id,
    method: 'put',
    data
  }, {
    isGetDataDirectly: false
  })
}

export const deleteCompanyProperty = (id: string) => {
  return request({
    url: '/companyNature/' + id,
    method: 'delete',
  }, {
    isGetDataDirectly: false
  })
}import { request } from "@/framework/utils/request"

export const getBioFilesPage = (params: API.PageParams) => {
  return request({
    url: '/biofiles/',
    method: 'get',
    params
  })
}

export const postBioFiles = (data) => {
  return request({
    url: '/biofiles/',
    method: 'post',
    data
  })
}

export const putBioFiles = (data) => {
  return request({
    url: '/biofiles/',
    method: 'put',
    data
  })
}

export const deleteBioFiles = (id: string) => {
  return request({
    url: '/biofiles/' + id,
    method: 'delete',
  })
}import {request} from "@/framework/utils/request";

// 获取列表
export const getFileType = (params?: { typeName?: string, isRequired?: boolean }) => {
    return request({
        url: '/fileType/list',
        method: 'get',
        params,
    })
}

// 添加文件类型
export const addFileType = (params: { typeName: string, tempFileId: string, isRequired: boolean, parentId: string }) => {
    return request({
        url: "/fileType/",
        method: 'post',
        data: params
    })
}

// 修改文件类型
export const editFileType = (params: { id: string, typeName: string, tempFileId: string, isRequired: boolean, parentId: string }) => {
    return request({
        url: `fileType/${params.id}`,
        method: 'put',
        data: params
    })
}
// 删除文件类型
export const delFileType = (params: { id: string }) => {
    return request({
        url: `fileType/${params.id}`,
        method: 'delete',
    })
}import { request } from '@/framework/utils/request'

export const getAlarmTempData = params => {
  return request<API.TempColumnsItem[]>({
    url: '/warnLogEnv/page',
    method: 'get',
    params
  })
}declare namespace API {
  type TempColumnsItem = {
    city: string,
    county: string,
    companyName: string,
    labName: string,
    id: string,

    alarmTime: string,
    pointName: string,
    roomName: string,
    warnRule: string,
    warnValue: string,
    warnType: string, supertable
    warnTime: string,
    handleStatus: number,
  };
  type BiosafetyListItem = {
    id?: string;
    certNum: string,
    name: string,
    sex: 1 | 0,
    academic: number,
    birthDate: string,
    idcard: string,
    workCompany: string,
    jobs: number,
    jobTitle: number,
    contactPhone: string,
    trainResult: string,
    certIssueDate: string,
    trainStartDate: string,
    trainEndDate: string,
    certIssueUnit: string
  }
}import { request } from '@/framework/utils/request'

// 获取医共体-主体
export const getMainPage = (params: API.PageParams) => {
  return request({
    url: '/',
    method: 'get',
    params
  })
}

// 获取医共体-从体
export const getSlavePage = (params: API.PageParams) => {
  return request({
    url: '/',
    method: 'get',
    params
  })
}import { DictConfig } from "@/framework/core/dict/types";
import { DictNameType } from '@/api/dict/types'
const dict: Partial<Record<DictNameType, DictConfig>> = {
  CityNatureStatus: {
    data: [
      {
        name: '启用',
        value: true
      },
      {
        name: '停用',
        value: false
      },
    ],
  }
}

export default dict
import type { TableColumn } from '@/framework/components/core/super-table';
export type TableListItem = API.BiosafetyListItem;
export type TableColumnItem = TableColumn<TableListItem>;


export const baseColumns: Array<TableColumnItem> = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '生物安全培训合格证号',
    field: 'certNum',
    hideInSearch: true,
  },
  {
    title: '姓名',
    field: 'name',
  },
  {
    title: '单位',
    field: 'workCompany',
  },
  {
    title: '身份证号',
    field: 'idcard',
  },
  {
    title: '性别',
    field: 'sex',
    hideInSearch: true,
    dict: 'Sex'
  },
  {
    title: '联系电话',
    field: 'contactPhone',
    hideInSearch: true,
  },
  {
    title: '考试成绩',
    field: 'trainResult',
    hideInSearch: true,
  },
  {
    title: '证书发放日期',
    field: 'certIssueDate',
    hideInSearch: true,
  },
]<template>
  <SuperTable :columns="columns" :data-request="fetchData" search pager align="center" border ref="supertable" :mode="1"
    search-btn-type="white-blue" :toolbar="{}" :height="tableHeight">
    <template #action>
      <a-button type="blue-white" @click="addSafeLicense">
        <template #icon>
          <BtnSvgIcon name="tianjia"></BtnSvgIcon>
        </template>
        添加
      </a-button>
      <a-dropdown style="margin-right: -8px;">
        <template #overlay>
          <a-menu @click="handleMenuClick">
            <a-menu-item key="1">
              下载导入模板
            </a-menu-item>
            <a-menu-item key="2">
              <Upload :custom-request="customRequest" :file-list="fileList" :show-upload-list="false"
                :before-upload="beforeUpload" :max-count="1">导入生物安全合格证</Upload>
            </a-menu-item>
          </a-menu>
        </template>
        <a-button type="white-blue">
          <template #icon>
            <BtnSvgIcon name="daoru"></BtnSvgIcon>
          </template>
          导入
        </a-button>
      </a-dropdown>
      <a-button type="white-blue" style="margin-right: -8px;">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>

    </template>
  </SuperTable>
  <DraggableModal :title="state.addBiosafetyModalTitle" v-model:visible="state.addBiosafetyModal" width="800px"
    destroy-on-close>
    <a-form :model="state.addBiosafetyFormData" :label-col="{ span: 8 }" :wrapper-col="{ span: 14 }"
      :rules="state.formRules" ref="addDeviceBiosafetyRef">
      <a-row>
        <a-col span="12">
          <a-form-item label="培训合格证号" name="certNum">
            <a-input placeholder="请输入培训合格证号" v-model:value="state.addBiosafetyFormData.certNum"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="性别" name="sex">
            <a-select placeholder="请选择性别" v-model:value="state.addBiosafetyFormData.sex" :readonly="state.readonly"
              :options="$dict.get('Sex')"></a-select>
          </a-form-item>
          <a-form-item label="出生日期" name="birthDate">
            <a-date-picker v-model:value="state.addBiosafetyFormData.birthDate" valueFormat="YYYY-MM-DD"
              placeholder="请选择出生日期" :disabled="state.readonly" class="w-100">
            </a-date-picker>
          </a-form-item>
          <a-form-item label="工作单位" name="workCompany">
            <a-input placeholder="请输入输入工作单位" v-model:value="state.addBiosafetyFormData.workCompany"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="技术职称" name="jobTitle">
            <a-select placeholder="请输入技术职称" v-model:value="state.addBiosafetyFormData.jobTitle" :readonly="state.readonly"
              :options="$dict.get('JobTitle')"></a-select>
          </a-form-item>
          <a-form-item label="培训成绩" name="trainResult">
            <a-input placeholder="请输入培训成绩" v-model:value="state.addBiosafetyFormData.trainResult"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="培训开始日期" name="trainStartDate">
            <a-date-picker v-model:value="state.addBiosafetyFormData.trainStartDate" valueFormat="YYYY-MM-DD"
              placeholder="请选择培训开始日期" :disabled="state.readonly" class="w-100">
            </a-date-picker>
          </a-form-item>
          <a-form-item label="证书发放单位" name="certIssueUnit">
            <a-input placeholder="请输入证书发放单位" v-model:value="state.addBiosafetyFormData.certIssueUnit"
              :readonly="state.readonly"></a-input>
          </a-form-item>
        </a-col>

        <a-col span="12">
          <a-form-item label="姓名" name="name">
            <a-input placeholder="请输入姓名" v-model:value="state.addBiosafetyFormData.name"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="学历" name="academic">
            <a-select v-model:value="state.addBiosafetyFormData.academic" showSearch :options="$dict.get('Academic')"
              placeholder="请选择学历" :readonly="state.readonly">
            </a-select>
          </a-form-item>
          <a-form-item label="身份证号" name="idcard">
            <a-input placeholder="请输入身份证号" v-model:value="state.addBiosafetyFormData.idcard"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="工作岗位" name="jobs">
            <a-select placeholder="请输入工作岗位" v-model:value="state.addBiosafetyFormData.jobs" :readonly="state.readonly"
              :options="$dict.get('Job')"></a-select>
          </a-form-item>
          <a-form-item label="联系电话" name="contactPhone">
            <a-input placeholder="请输入联系电话" v-model:value="state.addBiosafetyFormData.contactPhone"
              :readonly="state.readonly"></a-input>
          </a-form-item>
          <a-form-item label="证书发放日期" name="certIssueDate">
            <a-date-picker v-model:value="state.addBiosafetyFormData.certIssueDate" valueFormat="YYYY-MM-DD"
              placeholder="请选择证书发放日期" :disabled="state.readonly" class="w-100">
            </a-date-picker>
          </a-form-item>
          <a-form-item label="培训结束日期" name="trainEndDate">
            <a-date-picker v-model:value="state.addBiosafetyFormData.trainEndDate" valueFormat="YYYY-MM-DD"
              placeholder="请选择培训结束日期" :disabled="state.readonly" class="w-100">
            </a-date-picker>
          </a-form-item>

        </a-col>
      </a-row>

    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="addBiosafetyModalCancel">取消</a-button>
        <a-button @click="addBiosafetyModalReset" v-if="state.mode === ModalModeEnum.Add">重置</a-button>
        <a-button type="primary" @click="addBiosafetyModalOk">保存</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import { reactive, ref, Ref, inject, computed } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import type { TableColumn } from '@/framework/components/core/super-table';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message, DatePicker, Upload } from 'ant-design-vue';
import type { MenuProps } from 'ant-design-vue';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getBioSafe, getBioSafePage, postBioSafe, putBioSafe, deleteBioSafe, importLicense } from '../../api/bioSafeLicense'

const tableHeight = inject<Ref<number>>('tableHeight')
const supertable = ref<InstanceType<typeof SuperTable>>()
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
  };
  return await getBioSafePage(params)
};

enum ModalModeEnum {
  Add,
  Edit,
}
const state = reactive<{
  addBiosafetyModalTitle: string;
  addBiosafetyModal: boolean;
  mode: ModalModeEnum,
  addBiosafetyFormData: any;
  formRules: any;
  showFooter: boolean;
  readonly: boolean;
}>({
  addBiosafetyModalTitle: '添加生物安全培训合格证',
  addBiosafetyModal: false,//弹框的开关
  mode: ModalModeEnum.Add,
  addBiosafetyFormData: {
    id: null,
    certNum: '',
    sex: null,
    name: '',
    birthDate: '',
    workCompany: '',
    jobTitle: null,
    trainResult: '', //培训 考试成绩
    trainStartDate: '', //培训开始时间
    certIssueUnit: '', //证书发放单位
    academic: null, //学历
    idcard: '', //身份证号
    jobs: null, //工作岗位
    contactPhone: '',
    certIssueDate: '', //证书发放日期
    trainEndDate: '', //培训结束日期
  },
  formRules: {
    certNum: [{ required: true, message: '请输入培训合格证号', blur: 'change' }],
    sex: [{ required: true, message: '请选择性别' }],
    name: [{ required: true, message: '请输入姓名', blur: 'change' }],
    birthDate: [{ required: true, message: '请输入出生日期', blur: 'change' }],
    workCompany: [{ required: true, message: '请输入工作单位', blur: 'change' }],
    jobTitle: [{ required: true, message: '请输入技术职称' }],
    trainResult: [{ required: true, message: '请输入培训成绩', blur: 'change' }],
    trainStartDate: [{ required: true, message: '请选择培训开始时间', blur: 'change' }],
    certIssueUnit: [{ required: true, message: '请输入证书发放单位', blur: 'change' }],
    academic: [{ required: true, message: '请选择学历' }],
    idcard: [{ required: true, message: '请输入身份证号', blur: 'change' }],
    jobs: [{ required: true, message: '请输入工作岗位' }],
    contactPhone: [{ required: true, message: '请输入联系电话', blur: 'change' }],
    certIssueDate: [{ required: true, message: '请选择证书发放日期', blur: 'change' }],
    trainEndDate: [{ required: true, message: '请选择培训结束日期', blur: 'change' }],
  },
  showFooter: true,
  readonly: false,
});

const addDeviceBiosafetyRef = ref<FormInstance>();
let columns: TableColumn[] = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 250,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          state.addBiosafetyModalTitle = '修改生物安全培训合格证';
          state.addBiosafetyModal = true;
          state.showFooter = true;
          state.readonly = false;
          state.mode = ModalModeEnum.Edit
          setTimeout(() => {
            state.addBiosafetyFormData = { ...row };
          })
        },
      },
      {
        label: '删除',
        popConfirm: {
          title: '是否删除？',
          onCancel() { },
          async onConfirm() {
            const res = await deleteBioSafe(row.id)
            if (res.code === 200 && res.success) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          },
        },
      },
      {
        label: '下载证书',
        onClick: () => {
        },
      },
    ],
  },
];

//新增
const addSafeLicense = () => {
  state.addBiosafetyModalTitle = '添加生物安全培训合格证';
  state.showFooter = true;
  state.readonly = false;
  state.mode = ModalModeEnum.Add
  state.addBiosafetyModal = true;
  state.addBiosafetyFormData = {
    id: null,
    certNum: '',
    sex: null,
    name: '',
    birthDate: '',
    workCompany: '',
    jobTitle: null,
    trainResult: '',
    trainStartDate: '',
    certIssueUnit: '',
    academic: null,
    idcard: '',
    jobs: null,
    contactPhone: '',
    certIssueDate: '',
    trainEndDate: '',
  }
  setTimeout(() => {
    addDeviceBiosafetyRef.value?.resetFields();
  })
}
//弹框 取消
const addBiosafetyModalCancel = () => {
  state.addBiosafetyModal = false;
}
// 弹框 确认
const addBiosafetyModalOk = async () => {
  try {
    await addDeviceBiosafetyRef.value?.validate();
    if (state.mode === ModalModeEnum.Add) {
      const res = await postBioSafe(state.addBiosafetyFormData)
      if (res.code === 200 && res.success) {
        message.success('添加成功')
        supertable.value?.refreshTable()
        state.addBiosafetyModal = false;
      }
    } else {
      const res = await putBioSafe(state.addBiosafetyFormData)
      if (res.code === 200 && res.success) {
        message.success('修改成功')
        supertable.value?.refreshTable()
        state.addBiosafetyModal = false;
      }
    }
  } catch (error) { }
};
//弹框 重置
const addBiosafetyModalReset = () => {
  addDeviceBiosafetyRef.value?.resetFields();
  console.log('重置')
}
//导出
const handleMenuClick: MenuProps['onClick'] = e => {
  console.log('click', e);
  if (e.key === '1') {
    // download
  } else if (e.key === '2') {
  }
};
const fileList = ref([])
const customRequest = async (data) => {
  const formData = new FormData()
  formData.append('file', data.file)
  const res = await importLicense(formData)
  fileList.value = []
  if (res.code === 200 && res.success) {
    message.success('导入成功')
    supertable.value?.queryTable()
  } else {
    message.error('导入失败')
    supertable.value?.queryTable()
  }
}
const beforeUpload = (file: File) => {
  console.log(file, file.type, 'file')
  if (file.type.indexOf('excel') > -1 || file.type.indexOf('spreadsheet') > -1 ) {
    return true
  }
  message.error('请上传excel文件，可以下载模板后导入')
  return false
}
</script>
<style lang="less" scoped>
.w-100 {
  width: 100%;
}
</style>import type { TableColumn } from '@/framework/components/core/super-table';
import getSwitchJsx from './components/statusSwitch'
export const baseColumns: TableColumn[] = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '单位性质名称',
    field: 'natureName',
  },
  {
    title: '状态',
    field: 'status',
    dict: 'CityNatureStatus',
    slots: {
      default: ({ row }) => getSwitchJsx(row)
    }
  },
]<template>
  <SuperTable :columns="columns" :data-request="fetchData" search pager align="center" border ref="supertable" :mode="1"
    :export-config="{}" search-btn-type="white-blue" :height="tableHeight">
    <template #action>
      <a-button type="blue-white" @click="addCompany">添加</a-button>
    </template>
  </SuperTable>
  <DraggableModal :title="state.addCompanyModalTitle" v-model:visible="state.addCompanyModal" width="500px"
    destroy-on-close>
    <a-form layout="horizontal" :model="state.addCompanyFormData" :label-col="{ span: 8 }" :wrapper-col="{ span: 14 }"
      :rules="state.formRules" ref="addCompanyForm">
      <a-form-item label="单位性质名称" name="natureName">
        <a-input placeholder="请输入单位性质名称" v-model:value="state.addCompanyFormData.natureName"
          :readonly="state.readonly"></a-input>
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button @click="addUserModalCancel">取消</a-button>
        <a-button type="blue-white" @click="addUserModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="ts">
import { reactive, ref, Ref, inject } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import type { TableColumn } from '@/framework/components/core/super-table';
import { DraggableModal } from '@/framework/components/core/draggable-modal';
import { FormInstance, message } from 'ant-design-vue';
import { getCompanyPropertyPage, postCompanyProperty, putCompanyProperty, deleteCompanyProperty } from '../../api/companyProperty'

const tableHeight = inject<Ref<number>>('tableHeight')
const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  const data = supertable.value?.getFormModel();
  const params = {
    pageSize: ori.page.pageSize,
    pageNum: ori.page.currentPage,
    ...data,
  };
  return await getCompanyPropertyPage(params)
};
enum ModalModeEnum {
  Add = 1,
  Edit = 2,
}
const columns: TableColumn[] = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({ row }) => [
      {
        label: '修改',
        onClick: () => {
          state.addCompanyFormData = { ...row };
          state.showFooter = true;
          state.addCompanyModal = true;
          state.addCompanyModalTitle = '修改单位性质';
          state.readonly = false;
          state.mode = ModalModeEnum.Edit
        },
      },
      {
        label: '删除',
        popConfirm: {
          title: '是否删除？',
          onCancel() { },
          async onConfirm() {
            const res = await deleteCompanyProperty(row.id)
            if (res.success && res.code === 200) {
              message.success('删除成功')
              supertable.value?.refreshTable()
            }
          },
        },
      },
    ],
  },
];

//弹框
const state = reactive<{
  addCompanyModalTitle: string;
  addCompanyModal: boolean;
  addCompanyFormData: any;
  formRules: any;
  showFooter: boolean;
  readonly: boolean;
  mode: ModalModeEnum,
}>({
  addCompanyModalTitle: '添加单位性质',
  addCompanyModal: false, //弹框的开关
  addCompanyFormData: {
    natureName: '', //单位性质名称
  },
  formRules: {
    natureName: [{ required: true, message: '请输入单位性质名称', blur: 'change' }],
  },
  showFooter: true,
  readonly: false,
  mode: ModalModeEnum.Add,
});

const addCompanyForm = ref<FormInstance>();
const addUserModalOk = async () => {
  try {
    await addCompanyForm.value?.validate();
    // req
    if (state.mode === ModalModeEnum.Add) {
      const res = await postCompanyProperty(state.addCompanyFormData)
      if (res.success && res.code === 200) {
        message.success('创建成功')
        supertable.value?.refreshTable()
        state.addCompanyModal = false
      }
    } else {
      const res = await putCompanyProperty(state.addCompanyFormData)
      if (res.success && res.code === 200) {
        message.success('创建成功')
        supertable.value?.refreshTable()
        state.addCompanyModal = false
      }
    }

  } catch (error) { }
};
//点击取消
const addUserModalCancel = () => {
  state.addCompanyModal = false;
};

//新增
const addCompany = () => {
  state.addCompanyFormData = {
    id: null,
    natureName: '',
    status: false
  }
  addCompanyForm.value?.resetFields()
  state.showFooter = true;
  state.addCompanyModal = true;
  state.addCompanyModalTitle = '添加单位性质';
  state.readonly = false;
  state.mode = ModalModeEnum.Add
}
</script>
<style lang="less" scoped></style>import type { TableColumn } from '@/framework/components/core/super-table';

export const baseColumns: TableColumn[] = [
  {
    type: 'seq',
    title: '序号',
    width: 60,
  },
  {
    title: '文件类型名称',
    field: 'name',
  },
  {
    title: '状态',
    field: 'status',
  },
]<template>
  <!-- 表格 -->
  <SuperTable :columns="columns" :data-request="fetchData" search pager align="center" border ref="supertable" :mode="1"
              :export-config="{}" search-btn-type="white-blue">
    <template #action>
      <a-button type="blue-white" @click="addFile">添加</a-button>
    </template>
  </SuperTable>
  <DraggableModal :title="state.addFileModalTitle" v-model:visible="state.addFileModal" width="500px">
    <a-form layout="horizontal" :model="state.addFileFormData" :label-col="{ span: 8 }" :wrapper-col="{ span: 14 }"
            :rules="state.formRules" ref="addCompanyForm">
      <a-form-item label="文件类型名称" name="companyName">
        <a-input placeholder="请输入文件类型名称" v-model:value="state.addFileFormData.fileName"
                 :readonly="state.readonly"></a-input>
      </a-form-item>
      <a-form-item label="文件模板" required>
        <Upload action='/file/' :multiple="true" :file-list="fileList" class="base-upload" @change="handleChange">
          <a-button class="upload-btn">
            <template #icon>
              <upload-outlined/>
            </template>
            上传文件
          </a-button>
          <template #itemRender="{ file, actions }">
            <div class="upload-item">
              <div>
                <folder-filled style="margin-right: 10px"/>
                <span :style="file.status === 'error' ? 'color: red' : ''">{{ file.name }}</span>
              </div>
              <div class="upload-item-btn">
                <a href="javascript:;" @click="actions.download">
                  <folder-filled/>
                </a>
                <a href="javascript:;" @click="actions.remove">
                  <delete-outlined/>
                </a>
              </div>
            </div>
          </template>
        </Upload>
      </a-form-item>
      <a-form-item label="必传文件" required>
        <a-radio-group v-model:value="value" name="radioGroup">
          <a-radio value="1">是</a-radio>
          <a-radio value="2">否</a-radio>
        </a-radio-group>
      </a-form-item>
      <a-form-item label="上级栏目" name="topColumn">
        <a-select v-model:value="state.addFileFormData.topColumn" showSearch
                  :options="[{ label: '类型1', value: '1' }, { label: '类型2', value: '2' }]"
                  placeholder="请选择上级栏目"
                  :readonly="state.readonly">
        </a-select>
      </a-form-item>
    </a-form>
    <template #footer>
      <div v-if="state.showFooter">
        <a-button type="white-blue" @click="addFileModalCancel">取消</a-button>
        <a-button type="blue-white" @click="addFileModalOk">确定</a-button>
      </div>
    </template>
  </DraggableModal>
</template>
<script setup lang="tsx">
import {reactive, ref} from 'vue';
import {VxeGridPropTypes} from 'vxe-table';
import {baseColumns} from './columns';
import {SuperTable} from '@/framework/components/core/super-table';
import type {TableColumn} from '@/framework/components/core/super-table';
import {DraggableModal} from '@/framework/components/core/draggable-modal';
import {FormInstance} from 'ant-design-vue';

// import Upload from '@/components/upload/index.vue';
import {Upload} from 'ant-design-vue'
import {UploadOutlined, FolderFilled, DeleteOutlined} from '@ant-design/icons-vue';
import type {UploadProps, UploadChangeParam} from 'ant-design-vue';
import {getBioFilesPage, postBioFiles, putBioFiles, deleteBioFiles} from '../../api/files';

const supertable = ref<InstanceType<typeof SuperTable>>();
const addCompanyForm = ref<FormInstance>();

//上传
const fileList = ref<UploadProps['fileList']>([])
// 文件选择事件
const handleChange = (info: UploadChangeParam) => {
  console.log(info, 'info')
  let resFileList = [...info.fileList];
  resFileList = resFileList.map((file) => {
    if (file.response) {
      file.url = file.response.url;
    }
    return file;
  });

  fileList.value = resFileList;
};


// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  // const data = supertable.value?.getFormModel();
  // const params = {
  //   pageSize: ori.page.pageSize,
  //   pageNum: ori.page.currentPage,
  //   ...data,
  // };
  // erturn await getBioFilesPage(params)
  return {
    data: [{}, {}],
    pageIndex: 1,
    pageSize: 20,
    total: 43,
  };
};

enum FileModalModeEnum {
  Add = 1,
  Edit = 2
}

//弹框
const state = reactive<{
  addFileModalTitle: string;
  mode: FileModalModeEnum,
  addFileModal: boolean;
  addFileFormData: any;
  formRules: any;
  showFooter: boolean;
  readonly: boolean;
}>({
  addFileModalTitle: '添加文件类型',
  mode: FileModalModeEnum.Add,
  addFileModal: false,//弹框的开关
  addFileFormData: {
    fileName: '',//文件名称
    topColumn: '',//上级栏目
  },
  formRules: {
    fileName: [{required: true, message: '请输入单位性质名称', blur: 'change'}],
    topColumn: [{required: true, message: '请选择上级栏目', blur: 'change'}],
  },
  showFooter: true,
  readonly: false,
});

let columns: TableColumn[] = [
  ...baseColumns,
  {
    title: '操作',
    field: '$action',
    hideInSearch: true,
    align: 'center',
    fixed: 'right',
    width: 200,
    actions: ({row}) => [
      {
        label: '修改',
        onClick: () => {
          // state.addCompanyFormData = { ...row };
          state.showFooter = true;
          state.addFileModal = true;
          state.addFileModalTitle = '修改文件类型';
          state.readonly = false;
          state.mode = FileModalModeEnum.Edit
        },
      },
      {
        label: '删除',
        popConfirm: {
          title: '是否删除',
          onCancel() {
          },
          onConfirm({row}) {
            // deleteBioFiles(row.id)
          },
        },
      },
      {
        label: '查看',
        onClick: () => {
          // state.addDeviceFormData = { ...row };
          state.showFooter = false;
          state.addFileModal = true;
          state.addFileModalTitle = '查看文件类型';
          state.readonly = true;
        },
      },
    ],
  },
];

const addFileModalOk = async () => {
  try {
    await addCompanyForm.value?.validate();
    // req
    switch (state.mode) {
      case FileModalModeEnum.Add:
        // postBioFiles()
        break;
      case FileModalModeEnum.Edit:
        // putBioFiles()
        break;
      default:
        break;
    }
    state.addFileModal = false;
  } catch (error) {
  }
};
//点击取消
const addFileModalCancel = () => {
  state.addFileModal = false;
};

//新增
const addFile = () => {
  state.showFooter = true;
  state.addFileModal = true;
  state.addFileModalTitle = '添加文件类型';
  state.readonly = false;
  state.mode = FileModalModeEnum.Add
}

</script>
<style lang="less" scoped>
.upload-btn {
  display: flex;
  justify-content: space-around;
  align-items: center;
  width: 98px;
  height: 32px;
  font-size: 14px;
  font-family: Roboto;
  text-align: center;
  color: #fff;
  border-radius: 5px;
  background-color: #0052d9;
}

.base-upload {
  // display: flex;
  align-items: flex-start;
  margin-left: 10px;

  :deep(.ant-upload-list) {
    display: flex;
    flex-wrap: wrap;
  }
}

.upload-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: auto;
  height: 36px;
  margin: 5px;
  padding: 0 10px;
  border-radius: 4px;
  background-color: rgba(224, 227, 234, 100);

  &-btn {
    display: flex;
    justify-content: space-around;
    width: 50px;
  }
}
</style><template>
  <Card>
    <!--  【1】 标题  -->
    <template #title>
      <Space>
        <Input v-model:value="state.searchData.typeName" placeholder="文件类型" />
        <a-select
          v-model:value="state.searchData.isRequired"
          allowClear
          style="width: 180px"
          placeholder="是否必填项"
        >
          <a-select-option :value="1">必填</a-select-option>
          <a-select-option :value="0">非必填</a-select-option>
        </a-select>
        <a-button type="white-blue" ghost @click="reset"> 重置 </a-button>
        <a-button type="white-blue" ghost @click="getFileTypeFn"> 查询 </a-button>
      </Space>
    </template>
    <template #extra>
      <a-button type="blue-white" @click="addDataFn">
        <plus-outlined />
        添加
      </a-button>
    </template>
    <!--  【2】 表格  -->
    <a-table
      :pagination="false"
      :row-key="(record) => record.id"
      :expanded-row-keys="expandedRowKeys"
      :columns="columns"
      :data-source="state.tableData"
      @expand="expandFn"
      :style="{ minHeight: tableHeight! - 10 + 'px' }"
    >
      <!--   列   -->
      <template #bodyCell="{ record, column, value }">
        <!--    必传文件    -->
        <template v-if="column.key === 'isRequired'">
          <span v-if="value">是</span>
          <span v-else>否</span>
        </template>
        <!--    操作    -->
        <template v-else-if="column.key === 'operation'">
          <Space>
            <Button type="link" @click="editFn(record)">修改</Button>
            <Button type="link" @click="viewFn(record)">查看</Button>
            <Popconfirm type="link" title="是否确认删除?" @confirm="delFn(record)">
              <Button type="link">删除</Button>
            </Popconfirm>
          </Space>
        </template>
      </template>
      <!--   内置表格   -->
      <template #expandedRowRender="{ record, index, indent, expanded }">
        <a-table :columns="innerColumns" :data-source="record.child" :pagination="false">
          <template #bodyCell="{ record, column, value }">
            <template v-if="column.key === 'isRequired'">
              <span v-if="value">是</span>
              <span v-else>否</span>
            </template>
            <template v-else-if="column.key === 'operation'">
              <Button type="link" @click="editFn(record)">修改</Button>
              <Button type="link" @click="viewFn(record)">查看</Button>
              <Popconfirm type="link" title="是否确认删除?" @confirm="delFn(record)">
                <Button type="link">删除</Button>
              </Popconfirm>
            </template>
          </template>
        </a-table>
      </template>
    </a-table>
    <!--  弹出层  -->
    <DraggableModal :title="state.modalTitle" v-model:visible="state.showModal" width="600px" destroy-on-close>
      <a-form
        ref="modalRef"
        layout="horizontal"
        :model="state.modalData"
        :rules="state.modalRules"
        :label-col="{ span: 8 }"
        :wrapper-col="{ span: 14 }"
      >
        <a-form-item label="文件类型名称" name="typeName" required>
          <a-input
            v-model:value="state.modalData.typeName"
            placeholder="请输入文件类型名称"
            :disabled="state.readonly"
          />
        </a-form-item>
        <a-form-item label="文件模板" name="tempFileId">
          <Upload
            :type="true"
            :is-one="true"
            :is-edit="!state.readonly"
            v-model:file-data="state.modalData.tempFileId"
          />
        </a-form-item>
        <a-form-item label="必传文件" required name="isRequired">
          <a-radio-group v-model:value="state.modalData.isRequired" :disabled="state.readonly">
            <a-radio :value="true">是</a-radio>
            <a-radio :value="false">否</a-radio>
          </a-radio-group>
        </a-form-item>
        <a-form-item label="上级栏目" name="parentId">
          <a-select
            v-model:value="state.modalData.parentId"
            :options="state.typeList"
            placeholder="请选择上级栏目"
            :disabled="state.readonly"
          >
          </a-select>
        </a-form-item>
      </a-form>
      <template #footer>
        <div v-if="!state.readonly">
          <a-button type="white-blue" @click="modalCancelFn">取消</a-button>
          <a-button type="blue-white" @click="modalOkFn">确定</a-button>
        </div>
        <div v-else>
          <a-button type="blue-white" @click="modalCancelFn">关闭</a-button>
        </div>
      </template>
    </DraggableModal>
  </Card>
</template>

<script setup lang="ts">
  import { PlusOutlined } from '@ant-design/icons-vue';
  import { Card, Button, Input, Space, message, Popconfirm } from 'ant-design-vue';
  import { computed, reactive, ref, Ref, inject } from 'vue';
  import { DraggableModal } from '@/framework/components/core/draggable-modal';
  import Upload from '@/components/upload/index.vue';
  import {
    getFileType,
    delFileType,
    addFileType,
    editFileType,
  } from '../../api/filesAndRuleManagement';

  const tableHeight = inject<Ref<number>>('tableHeight')
  // DOM
  const modalRef = ref();
  // 表格配置文件
  const columns = [
    { title: '文件类型', dataIndex: 'typeName', key: 'typeName' },
    { title: '模板文件', key: 'fileName' },
    { title: '必传文件', dataIndex: 'isRequired', key: 'isRequired' },
    { title: '操作', key: 'operation', align: 'center' },
  ];
  const innerColumns = [
    { title: '文件类型', dataIndex: 'typeName', key: 'typeName' },
    { title: '模板文件', dataIndex: 'fileName', key: 'fileName' },
    { title: '必传文件', dataIndex: 'isRequired', key: 'isRequired' },
    {
      title: '操作',
      align: 'center',
      key: 'operation',
    },
  ];
  // 数据
  const state = reactive<{
    searchData: {};
    tableData: any;
    modalData: {
      id: string;
      typeName: string;
      tempFileId: any[];
      isRequired: boolean;
      parentId: string;
    };
    modalRules: any;
    modalTitle: string;
    showModal: boolean;
    readonly: boolean;
    typeList: any;
  }>({
    searchData: {
      typeName: '',
    },
    tableData: [],
    modalData: {
      id: '',
      typeName: '',
      tempFileId: [],
      isRequired: true,
      parentId: '',
    },
    modalTitle: '添加',
    showModal: false,
    readonly: false,
    modalRules: {
      typeName: [{ required: true, message: '该项为必填项' }],
      // tempFileId: [{required: true, message: '该项为必填项'}],
      isRequired: [{ required: true, message: '该项为必填项' }],
      parentId: [{ required: true, message: '该项为必填项' }],
    },
    typeList: computed(() => {
      const res = state.tableData?.map((item) => ({
        value: item.id,
        label: item.typeName,
      }));
      return [
        ...res,
        {
          value: '-1',
          label: '顶级',
        },
      ];
    }),
  });
  // 方法
  const arrToTree = (
    arr,
    parentId = '-1',
    { idName = 'id', parentIdName = 'parentId', childrenName = 'child' } = {},
  ) => {
    return arr.reduce((pre, cur) => {
      if (cur[parentIdName] === parentId) {
        const children = arrToTree(arr, cur[idName]);
        if (children?.length) {
          cur[childrenName] = children;
        }
        return [...pre, cur];
      }
      return pre;
    }, []);
  };
  /**
   * 展开行控制
   */
  const expandedRowKeys = ref<string[]>([]);
  const expandFn = (expanded, record) => {
    if (expandedRowKeys.value.length > 0) {
      let index = expandedRowKeys.value.indexOf(record.id);
      if (index > -1) {
        expandedRowKeys.value.splice(index, 1);
      } else {
        expandedRowKeys.value.splice(0, expandedRowKeys.value.length);
        expandedRowKeys.value.push(record.id);
      }
    } else {
      expandedRowKeys.value.push(record.id);
    }
  };

  // 添加类型按钮
  const addDataFn = () => {
    state.modalData = {
      typeName: '',
      tempFileId: [],
      isRequired: true,
      parentId: null,
    };
    state.readonly = false;
    state.showModal = true;
  };

  /**
   * 表格
   */
  // 修改按钮
  const editFn = (params) => {
    state.modalData = {
      id: params?.id,
      typeName: params?.typeName,
      isRequired: params?.isRequired,
      parentId: params?.parentId,
      tempFileId: [],
    };
    if (params?.tempFileId) {
      state.modalData.tempFileId = [
        {
          id: params?.tempFileId,
          name: params?.fileName,
          md5: params?.tempFile?.md5,
        },
      ];
    }
    state.readonly = false;
    state.showModal = true;
  };
  // 查看按钮
  const viewFn = (params) => {
    state.modalData = {
      id: params.id,
      typeName: params.typeName,
      isRequired: params.isRequired,
      parentId: params.parentId,
    };
    if (params?.tempFileId) {
      state.modalData.tempFileId = [
        {
          id: params?.tempFileId,
          name: params?.fileName,
          md5: params?.tempFile?.md5,
        },
      ];
    }
    state.readonly = true;
    state.showModal = true;
  };
  // 删除按钮
  const delFn = async (params) => {
    await delFileType(params);
    message.success('删除成功!');
    await getFileTypeFn();
  };
  /**
   * 弹窗
   */
  // 弹窗取消
  const modalCancelFn = () => {
    state.showModal = false;
    state.readonly = false;
    state.modalData = {
      typeName: '',
      tempFileId: [],
      isRequired: true,
      parentId: '',
    };
  };
  // 弹窗确认
  const modalOkFn = () => {
    if (state.modalData.id) {
      editFileTypeFn();
    } else {
      addFileTypeFn();
    }
    state.showModal = false;
    state.readonly = false;
  };

  // 页面数据请求处理
  const getFileTypeFn = async () => {
    let params: { typeName?: string; isRequired?: boolean } = {
      typeName: state.searchData.typeName ? state.searchData.typeName : null,
    };
    if (state.searchData.isRequired === 0 || state.searchData.isRequired === 1) {
      params.isRequired = Boolean(state.searchData.isRequired);
    }
    const res = await getFileType(params);
    res.forEach((item) => {
      item.fileName = item?.tempFile?.name;
    });
    state.tableData = arrToTree(res);
  };
  getFileTypeFn();
  const reset = () => {
    state.searchData.typeName = '';
    state.searchData.isRequired = null;
    getFileTypeFn()
  }
  // 添加类型请求
  const addFileTypeFn = async () => {
    const params = {
      ...state.modalData,
      tempFileId: state.modalData.tempFileId[0]?.id || '',
    };
    await addFileType(params);
    message.success('添加成功');
    await getFileTypeFn();
  };
  // 修改类型请求
  const editFileTypeFn = async () => {
    const params = {
      ...state.modalData,
      tempFileId: state.modalData.tempFileId[0]?.id || '',
    };
    await editFileType(params);
    message.success('修改成功');
    await getFileTypeFn();
  };
</script>

<style scoped lang="less">
  .header {
    display: flex;
    justify-content: space-between;
    padding-bottom: 10px;
    margin-bottom: 20px;
    border-bottom: 1px solid rgb(240, 240, 240);
  }

</style>
<template>
  <ArticlePublish :type="4" />
</template>
<script setup lang="tsx" name="provinceInfoPublish">
import ArticlePublish from '@/modules/cms/pages/articleManagement/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <ArticlePublishDetail :need-approve="false"/>
</template>
<script setup lang="tsx">
import ArticlePublishDetail from '@/modules/cms/pages/articleManagement/appear/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <LabActivity isProvince></LabActivity>
</template>
<script setup lang="tsx" name="provinceLabActivity">
import LabActivity from '@/modules/cityOrg/pages/cityLabActivity/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <div class="big-box">
    <!-- 左侧 -->
    <div class="left-box">
      <h3>行政区划</h3>
      <a-input placeholder="搜索" class="search-input" v-model:value="state.searchDivideName"
        @pressEnter="searchDivideEnter" allowClear @change="searchDivideChange">
        <template #prefix>
          <SearchOutlined />
        </template>
      </a-input>

      <a-tree show-line :tree-data="state.treeData" @select="treeSelect" defaultExpandAll blockNode
        :fieldNames="{ children: 'children', title: 'name', key: 'id' }" v-model:expandedKeys="state.expandedKeys">
      </a-tree>
    </div>
    <!-- 右侧 -->
    <div class="tab-box">
      <div class="tab-head">
        <span>河北省直属</span>
        <a-tabs v-model:activeKey="activeKey">
          <a-tab-pane :key="0" tab="医共体-主体">
            <mainBody ref="mainBodyRef" />
          </a-tab-pane>
          <a-tab-pane :key="1" tab="医共体-从体">
            <slaveBody ref="slaveBodyRef" />
          </a-tab-pane>
        </a-tabs>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, reactive, watch } from 'vue';
import mainBody from './mainBody/index.vue';
import slaveBody from './slaveBody/index.vue';
import type { TreeProps } from 'ant-design-vue';
import { SearchOutlined } from '@ant-design/icons-vue'
import { getMyDivides } from '@/api/divide';
import { useUserStore } from '@/store/modules/user';

const userStore = useUserStore()
const myDivideId = userStore.getOrganizationInfo.parentId

const mainBodyRef = ref<InstanceType<typeof mainBody>>()
const slaveBodyRef = ref<InstanceType<typeof slaveBody>>()

const activeKey = ref(0);//tab切换

const state = reactive({
  searchDivideName: '',
  expandedKeys: [] as any[],
  selectedNodes: [] as any[],
  selectedKeys: [] as Array<string | number>,
  treeData: [] as any[],
})

const getTreeData = async () => {
  const res = await getMyDivides()
  state.treeData = res // 直接将结果赋值给treeData
  const funcs = (list: any[]) => {
    try {
      list.forEach(i => {
        if (i.id === myDivideId) {
          state.treeData = [i]
          state.expandedKeys = [i.id]
          throw new Error("finded");
        }
        if (i.children && i.children.length) {
          funcs(i.children)
        }
      })
    } catch (error) {
      console.log('error', error)
      return
    }
  }
  funcs(res)
}
getTreeData()

const searchDivideEnter = async () => {
  await getTreeData()
  if (state.searchDivideName) {
    const name = state.searchDivideName
    const arr: any[] = []
    const func = (list: Array<any>) => {
      list.forEach(i => {
        if (i.name.indexOf(name) > -1) {
          arr.push(i)
        }
        if (i.children && i.children.length) {
          func(i.children)
        }
      })
    }
    func(state.treeData)
    state.treeData = arr
    if (arr && arr.length) {
      state.expandedKeys = [arr[0].id]
    }
  }
}

const searchDivideChange = (e: InputEvent) => {
  const value = (e.target as HTMLInputElement).value
  if (!value) {
    getTreeData()
  }
}

const refreshAllTable = () => {
  mainBodyRef.value?.refreshTable()
  slaveBodyRef.value?.refreshTable()
}

watch(() => state.selectedKeys, (nval) => {
  if (nval && nval.length) {
    refreshAllTable()
  }
})
const treeSelect: TreeProps['onSelect'] = (selectedKeys, info) => {
  state.selectedNodes = info.selectedNodes
  state.selectedKeys = selectedKeys
}

</script>
<style scoped lang="less">
.big-box {
  border-radius: 8px;
  background-color: #fff;
  // min-height: 800px;
  padding: 25px;
  display: flex;

  .left-box {
    width: 15%;

    h3 {
      font-weight: 600;
    }
  }

  .tab-box {
    margin-left: 20px;
    flex: 1;
  }

  .tab-head {
    position: relative;

    >span {
      margin: 0 30px;
      font-size: 16px;
      font-weight: 600;
      position: absolute;
      left: 0;
      line-height: 50px;
    }
  }
}

:deep(.ant-tabs>.ant-tabs-nav) {
  margin-left: 150px !important;
}

.search-input {
  margin-bottom: 10px;
  width: 100%;
}
</style>import type { TableColumn } from '@/framework/components/core/super-table';

export const baseColumns: TableColumn[] = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '医共体名称',
    field: 'name',
  },
  {
    title: '医共体主体单位',
    field: 'unit',
    hideInSearch: true,
  },
  {
    title: '关联医共体-从体',
    field: 'nature',
    hideInSearch: true,
  },
]<template>
  <SuperTable :columns="columns" :data-request="fetchData" search pager align="center" border ref="supertable" :mode="1"
    :toolbar="{}" search-btn-type="white-blue">
    <template #action>
      <span class="allNum">XX省直属医共体主体单位共计<b>234</b> 家</span>
      <a-button @click="exportExcel" type="white-blue" style="margin-right: -8px;">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
</template>
<script setup lang="ts">
import { ref } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import type { TableColumn } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getMainPage } from '@/modules/provinceOrg/api/statistic';
const supertable = ref<InstanceType<typeof SuperTable>>();
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  // const data = supertable.value?.getFormModel();
  // const params = {
  //   pageSize: ori.page.pageSize,
  //   pageNum: ori.page.currentPage,
  //   ...data,
  // };
  // return await getMainPage(params)
  return {
    data: [{}, {}],
    pageIndex: 1,
    pageSize: 20,
    total: 1,
  };
};

const columns: TableColumn[] = [
  ...baseColumns,
];

const refreshTable = () => {
  supertable.value?.refreshTable()
}

const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}
defineExpose({
  refreshTable
})
</script>
<style scoped lang="less">
.allNum {
  position: absolute;
  right: 120px;
  top: 15px;

  b {
    color: #0354D9;
  }
}
</style>
import type { TableColumn } from '@/framework/components/core/super-table';

export const baseColumns: TableColumn[] = [
  {
    type: 'checkbox',
    title: '',
    width: 60,
  },
  {
    title: '医共体名称',
    field: 'name',
  },
  {
    title: '医共体从体单位',
    field: 'unit',
    hideInSearch: true,
  },
  {
    title: '关联医共体-从体',
    field: 'nature',
    hideInSearch: true,
  },
]<template>
  <SuperTable :columns="columns" :data-request="fetchData" pager search align="center" border ref="supertable" :mode="1"
    :toolbar="{}" search-btn-type="white-blue">
    <template #action>
      <a-button @click="exportExcel" type="white-blue" style="margin-right: -8px;">
        <template #icon>
          <BtnSvgIcon name="daochu"></BtnSvgIcon>
        </template>
        导出
      </a-button>
    </template>
  </SuperTable>
</template>
<script setup lang="ts">
import { ref } from 'vue';
import { VxeGridPropTypes } from 'vxe-table';
import { baseColumns } from './columns';
import { SuperTable } from '@/framework/components/core/super-table';
import type { TableColumn } from '@/framework/components/core/super-table';
import BtnSvgIcon from '@/components/btn-svg-icon/index.vue';
import { getSlavePage } from '@/modules/provinceOrg/api/statistic';

const supertable = ref<InstanceType<typeof SuperTable>>();
// 表格数据请求方法
const fetchData = async (ori: VxeGridPropTypes.ProxyAjaxQueryParams) => {
  // const data = supertable.value?.getFormModel();
  // const params = {
  //   pageSize: ori.page.pageSize,
  //   pageNum: ori.page.currentPage,
  //   ...data,
  // };
  // return await getSlavePage(params)
  return {
    data: [{}, {}],
    pageIndex: 1,
    pageSize: 20,
    total: 43,
  };
};

const columns: TableColumn[] = [
  ...baseColumns,
];

const exportExcel = () => {
  const records = supertable.value?.getCheckboxRecords()
  console.log(records, 'records')
}

const refreshTable = () => {
  supertable.value?.refreshTable()
}
defineExpose({
  refreshTable
})
</script>
<template>
  <RecordLicense></RecordLicense>
</template>
<script setup lang="tsx">
import RecordLicense from '@/modules/company/pages/companyRecordLicense/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <RecordLicenseDetail></RecordLicenseDetail>
</template>
<script setup lang="tsx">
import RecordLicenseDetail from '@/components/lab-info/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <CategoryDetail></CategoryDetail>
</template>
<script setup lang="tsx">
import CategoryDetail from '@/modules/cms/pages/columnManagement/appear/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <CategoryManagement></CategoryManagement>
</template>
<script setup lang="tsx">
import CategoryManagement from '@/modules/cms/pages/columnManagement/index.vue'
</script>
<style lang="less" scoped>

</style><template>
  <UserManagement is-province></UserManagement>
</template>
<script setup lang="tsx">
import UserManagement from '@/modules/cityOrg/pages/cityUserManagement/index.vue'
</script>
<style lang="less" scoped>

</style>import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
// import { t } from '@/framework/hooks/useI18n';


const routes: Array<RouteRecordRaw> = [
  // provinceRecordLicense
  {
    path: '/provinceRecordLicense',
    name: 'provinceRecordLicense',
    meta: {
      title: '备案证书',
      icon: 'icon-license',
    },
    component: () => import(
      /* webpackChunkName: "provinceRecordLicense" */ '@/modules/provinceOrg/pages/provinceRecordLicense/index.vue'
    ),
  },
  {
    path: '/provinceRecordLicenseDetail',
    name: 'provinceRecordLicenseDetail',
    meta: {
      title: '备案证书详情',
      icon: 'icon-license',
      hideInMenu: true,
      activeMenu: 'provinceRecordLicense'
    },
    component: () => import(
      /* webpackChunkName: "provinceRecordLicenseDetail" */ '@/modules/provinceOrg/pages/provinceRecordLicenseDetail/index.vue'
    ),
  },
  {
    path: '/provinceInfoPublish',
    name: 'provinceInfoPublish',
    meta: {
      title: '信息发布',
      icon: 'icon-ic-published',
      keepAlive: true
    },
    component: () => import(
      /* webpackChunkName: "provinceInfoPublish" */ '@/modules/provinceOrg/pages/provinceInfoPublish/index.vue'
    ),
  },
  {
    path: '/provinceInfoPublishDetail',
    name: 'provinceInfoPublishDetail',
    meta: {
      title: '信息发布详情',
      icon: 'icon-ic-published',
      hideInMenu: true,
      activeMenu: 'provinceInfoPublish'
    },
    component: () => import(
      /* webpackChunkName: "provinceInfoPublishDetail" */ '@/modules/provinceOrg/pages/provinceInfoPublishDetail/index.vue'
    ),
  },
  {
    path: '/provinceLabActivity',
    name: 'provinceLabActivity',
    meta: {
      title: '实验室活动',
      icon: 'icon-flag',
      keepAlive: true
    },
    component: () => import(
      /* webpackChunkName: "provinceLabActivity" */ '@/modules/provinceOrg/pages/provinceLabActivity/index.vue'
    ),
  },
  {
    path: '/provinceLabActivityDetail',
    name: 'provinceLabActivityDetail',
    meta: {
      title: '实验室活动详情',
      icon: 'icon-flag',
      hideInMenu: true,
      activeMenu: 'provinceLabActivity'
    },
    props: {
      isOrg: true,
    },
    component: () =>
      import(
        /* webpackChunkName: "provinceLabActivityDetail" */ '@/modules/lab/pages/labActivityRecordAdd/index.vue'
      ),
  },
  // 生物安全培训合格证
  {
    path: 'bioSafeLicense',
    name: 'bioSafeLicense',
    meta: {
      title: '生物安全培训合格证',
      icon: 'icon-hegezheng-01',
    },
    component: () =>
      import(
        /* webpackChunkName: "bioSafeLicense" */ '@/modules/provinceOrg/pages/bioSafeLicense/index.vue'
      ),
  },
  // 信息统计
  {
    path: '/provinceStatistics',
    name: 'provinceStatistics',
    meta: {
      title: '信息统计',
      icon: 'icon-statistic-2',
    },
    component: RouterView,
    children: [
      {
        path: '/provinceCompanyStatistics',
        name: 'provinceCompanyStatistics',
        meta: {
          title: '单位信息',
          icon: 'icon-company',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityCompanyStatistics" */ '@/modules/cityOrg/pages/cityCompanyStatistics/index.vue'
          ),
      },
      {
        path: '/provinceLabStatistics',
        name: 'provinceLabStatistics',
        meta: {
          title: '实验室信息',
          icon: 'icon-lab',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityLabStatistics" */ '@/modules/cityOrg/pages/cityLabStatistics/index.vue'
          ),
      },
      {
        path: '/provinceDeviceStatistics',
        name: 'provinceDeviceStatistics',
        meta: {
          title: '设备信息',
          icon: 'icon-devices',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityDeviceStatistics" */ '@/modules/cityOrg/pages/cityDeviceStatistics/index.vue'
          ),
      },
      {
        path: '/provincePersonStatistics',
        name: 'provincePersonStatistics',
        meta: {
          title: '人员信息',
          icon: 'icon-people1',
        },
        component: () =>
          import(
            /* webpackChunkName: "cityPersonStatistics" */ '@/modules/cityOrg/pages/cityPersonStatistics/index.vue'
          ),
      },
      {
        path: '/provinceMedicalCommunityStatistics',
        name: 'provinceMedicalCommunityStatistics',
        meta: {
          title: '医共体信息',
          icon: 'icon-union',
        },
        component: () =>
          import(
            /* webpackChunkName: "provinceMedicalCommunityStatistics" */ '@/modules/provinceOrg/pages/provinceMedicalCommunityStatistics/index.vue'
          ),
      },
    ],
  },
  {
    path: '/systemManagement',
    name: 'systemManagement',
    component: RouterView,
    meta: {
      title: '系统管理',
      icon: 'icon-system',
    },
    children: [
      {
        path: 'userManagement',
        name: 'userManagement',
        meta: {
          title: '用户管理',
          icon: 'icon-user',
        },
        component: () =>
          import(
            /* webpackChunkName: "userManagement" */ '@/modules/provinceOrg/pages/userManagement/index.vue'
          ),
      },
      {
        path: 'publishCategoryManagement',
        name: 'publishCategoryManagement',
        meta: {
          title: '发布栏目管理',
          icon: 'icon-fenlei',
        },
        component: () =>
          import(
            /* webpackChunkName: "publishCategoryManagement" */ '@/modules/provinceOrg/pages/publishCategoryManagement/index.vue'
          ),
      },
      // {
      //   path: 'publishCategoryDetail',
      //   name: 'publishCategoryDetail',
      //   meta: {
      //     title: '发布栏目编辑',
      //     icon: 'icon-fenlei',
      //     // hideInMenu: true,
      //     activeMenu: 'publishCategoryManagement'
      //   },
      //   component: () =>
      //     import(
      //       /* webpackChunkName: "publishCategoryDetail" */ '@/modules/provinceOrg/pages/publishCategoryDetail/index.vue'
      //     ),
      // },

      // // 可能不需要的页面
      // //附件管理
      // {
      //   path: 'enclosureManagement',
      //   name: `cms-enclosureManagement`,
      //   meta: {
      //     title: '附件管理',
      //     icon: 'icon-attachment',
      //   },
      //   component: () =>
      //     import(
      //                   /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/enclosureManagement/index.vue'
      //     ),
      // },
      // //表单模型
      // {
      //   path: 'formmodelManagement',
      //   name: `cms-formmodelManagement`,
      //   meta: {
      //     title: '表单模型',
      //     icon: 'icon-zhuantixiwenjian',
      //   },
      //   component: () =>
      //     import(
      //                   /* webpackChunkName: "demos-custom-a-custom-modal" */ '@/modules/cms/pages/formmodelManagement/index.vue'
      //     ),
      // },
      // //表单操作页
      // {
      //   path: 'formappearManagement',
      //   name: 'formappearManagement',
      //   meta: {
      //     title: '表单操作页',
      //     icon: 'icon-zhuantixiwenjian',
      //     // hideInMenu: true,
      //     activeMenu: `cms-formmodelManagement`,
      //   },
      //   component: () =>
      //     import(
      //       '@/modules/cms/pages/formmodelManagement/appear/index.vue'
      //     ),
      // },
      // //表单 字段 操作页
      // {
      //   path: 'fieldAppear',
      //   name: 'fieldAppear',
      //   meta: {
      //     title: '表单字段操作',
      //     icon: 'icon-zhuantixiwenjian',
      //     // hideInMenu: true,
      //   },
      //   component: () =>
      //     import(
      //       '@/modules/cms/pages/formmodelManagement/fieldAppear/index.vue'
      //     ),
      // },
      // end
      {
        path: 'filesAndRuleManagement',
        name: 'filesAndRuleManagement',
        meta: {
          title: '安全管理体系文件',
          icon: 'icon-zhuantixiwenjian',
        },
        component: () =>
          import(
            /* webpackChunkName: "filesAndRuleManagement" */ '@/modules/provinceOrg/pages/filesAndRuleManagement/index.vue'
          ),
      },
      {
        path: 'companyProperty',
        name: 'companyProperty',
        meta: {
          title: '单位性质管理',
          icon: 'icon-company',
        },
        component: () =>
          import(
            /* webpackChunkName: "companyProperty" */ '@/modules/provinceOrg/pages/companyProperty/index.vue'
          ),
      },
    ]
  },
];

export default routes;<template>
  <div class="box">
    <img src="@/assets/analysis.svg" />
    <Descriptions title="系统信息" bordered>
      <Descriptions.Item key="IP" label="IP">
        {{ loginIp }}
      </Descriptions.Item>
      <Descriptions.Item v-for="(value, key) in browserInfo" :key="key" :label="key">
        {{ value }}
      </Descriptions.Item>
      <Descriptions.Item label="网络状态">
        <Badge :status="online ? 'processing' : 'default'" :text="online ? '在线' : '离线'" />
      </Descriptions.Item>
    </Descriptions>
  </div>
</template>

<script lang="ts">
  export default {
    name: 'DashboardWelcome',
  };
</script>

<script lang="ts" setup>
  import { ref, watchEffect } from 'vue';
  import { Descriptions, Badge } from 'ant-design-vue';
  import BrowserType from '@/framework/utils/browser-type';
  import { useBattery } from '@/framework/hooks/useBattery';
  import { useOnline } from '@/framework/hooks/useOnline';
  import { useUserStore } from '@/store/modules/user';
  // import performanceMonitor from '@/framework/utils/performanceMonitor'

  const loginIp = useUserStore().userInfo?.loginIp;
  // 是否联网
  const { online } = useOnline();
  // 获取电池信息
  const { battery, batteryStatus, calcDischargingTime } = useBattery();
  // 获取浏览器信息
  const browserInfo = ref(BrowserType('zh-cn'));

  watchEffect(() => {
    Object.assign(browserInfo.value, {
      距离电池充满需要:
        Number.isFinite(battery.value.chargingTime) && battery.value.chargingTime != 0
          ? calcDischargingTime.value
          : '未知',
      剩余可使用时间:
        Number.isFinite(battery.value.dischargingTime) && battery.value.dischargingTime != 0
          ? calcDischargingTime.value
          : '未知',
      电池状态: batteryStatus.value,
      当前电量: battery.value.level + '%',
    });
  });

  // console.log(performanceMonitor.getPerformanceData(), 'performanceMonitor')
</script>

<style lang="less" scoped>
  .box {
    display: flex;
    padding: 12px;
    width: 100%;
    height: calc(100vh - 280px);
    flex-direction: column;
    background-color: white;

    img {
      min-height: 0;
      flex: 1;
    }

    .ant-form {
      flex: 2;
    }
  }
</style>
<template>
  <div class="page-container">
    <div>
      <h1>404</h1>
      <h1>OOPS！你好像走丢了...</h1>
      <RouterLink :to="{ path: backToHomeUrl, replace: true }" class="ant-btn ant-btn-primary"
        >回到首页</RouterLink
      >
    </div>
    <img src="@/assets/404.gif" alt="" />
  </div>
</template>

<script lang="ts">
import { defineComponent, ref } from 'vue';
  export default defineComponent({
    name: 'NotFound',
    setup () {
      let backToHomeUrl = ref('/')
      return {
        backToHomeUrl
      }
    }
  });
</script>

<style lang="less" scoped>
  .page-container {
    display: flex;
    width: 100%;
    height: 100%;
    background-color: white;
    justify-content: center;
    align-items: center;
  }
</style>
<template>
  <div class="item-box">
    <div class="bg">
      <slot name="top-img">
        <img src="@/assets/images/laboratory-icon.png" alt="">
      </slot>
    </div>
    <img src="@/assets/images/laboratory-bg-icon.png" alt="">
    <div class="title-box">
      <h1>{{ type }}</h1>
      <span>{{ num }}</span>
    </div>
    <div class="text-box">
      <p><span>超期<b>0</b></span><span>临期<b>0</b></span></p>
      <div><img src="@/assets/images/right-arrow.svg" alt="" style="cursor: pointer;" @click="clickFullFn"></div>
    </div>
  </div>

</template>
<script lang="ts" setup>
import { isFunction } from '@/framework/utils/is';

const props = defineProps({
  type: {
    type: String,
    required: true,
  },
  num: {
    type: Number,
    default: 0,
  },
  clickFn: {
    type: Function,
    default: () => {
      return () => {}
    }
  }
})

const clickFullFn = () => {
  if (props.clickFn && isFunction(props.clickFn)) {
    props.clickFn()
  }
}
</script>
<style scoped lang="less">
.item-box {
  width: 325px;
  height: 177px;
  background: skyblue;
  border-radius: 6px;
  background-image: linear-gradient(to right, #F1F3F8, #DFE8FB);
  position: relative;
  margin: 30px 0 10px 0;

  .bg {
    position: absolute;
    right: 0;
    bottom: 120px;
  }

  .title-box {
    position: absolute;
    top: 0;
    width: 100%;
    height: 110px;
    padding: 20px;

    h1 {
      font-weight: 600;
      font-size: 20px;
    }

    span {
      font-size: 28px;
      font-weight: 600;
    }
  }

  .text-box {
    display: flex;
    justify-content: space-between;
    padding: 0 25px;
    line-height: 65px;

    img {
      display: inline-block;
    }

    >p {
      span {
        margin-right: 30px;
        color: #8B8B8B;
      }
    }

    b {
      margin: 0 5px;
      color: #000;
    }
  }
}
</style>
<template>
  <div class="home-box-top-left">
    <HeadCard title="实验室备案审核" @updateActiveKey="labRecordActiveKey = $event">
      <template #ImgSolt>
        <img src="@/assets/images/certificate.svg" alt="" class="card-img">
      </template>
    </HeadCard>
    <div class="home-box-top-left-main">
      <FilingCardItem type="待审核" :num="state.wait" :clickFn="() => labInfoRouterPush('TO_BE_APPROVAL')"/>
      <FilingCardItem type="已审核" :num="state.approve" :clickFn="() => labInfoRouterPush('PASSED')"/>
      <FilingCardItem type="已退回" :num="state.refuse" :clickFn="() => labInfoRouterPush('RETURNED')"/>
    </div>
  </div>

</template>
<script setup lang="ts">
import { ref, reactive, watch, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import FilingCardItem from './filing-card-item/index.vue';
import HeadCard from '../../components/head-card/index.vue';
import { getLabInfoStatistic } from '@/api/home/company'

const router = useRouter()
const labRecordActiveKey = ref(1)
const state = reactive({
  wait: 0,
  approve: 0,
  refuse: 0,
})

const getData = async (cycle) => {
  const res = await getLabInfoStatistic({ cycle: Number(cycle) })
  state.wait = res['待审核']
  state.approve = res['已审核']
  state.refuse = res['已退回']
}

let timer: null | NodeJS.Timer
const clearGetDataInterval = () => {
  if (timer) {
    clearInterval(timer)
    timer = null
  }
}
const setGetDataInterval = () => {
  clearGetDataInterval()
  timer = setInterval(() => {
    getData(labRecordActiveKey.value)
  }, 1000 * 60)
}

watch(() => labRecordActiveKey.value, (nval) => {
  getData(nval)
  setGetDataInterval()
}, {
  immediate: true
})
onUnmounted(() => {
  clearGetDataInterval()
})

type CompanyLabInfoApproveActiveKeyType = 'TO_BE_APPROVAL' | 'PASSED' | 'RETURNED'
const labInfoRouterPush = (activeKey: CompanyLabInfoApproveActiveKeyType) => {
  router.push({
    name: 'companyLabInfoApprove',
    params: {
      activeKey
    }
  })
}
</script>
<style scoped lang="less">
.home-box-top-left {
  width: 65%;
  height: auto;
  background: #fff;
  border: solid 1px #E0E3EA;


  &-main {
    display: flex;
    justify-content: space-between;
    margin-left: 30px;
  }

}

.card-img {
  display: inline-block;
}
</style><template>
  <div class="bottom-right-box">
    <div class="card-head">
      <div>
        <span class="span-one"><img src="@/assets/images/xinxi-icon.svg" alt="" class="card-img"></span>
        <span class="update-span"><b>内部通知信息</b></span>
      </div>
      <div>
        <a-range-picker v-model:value="value1" :format="dateFormat" @change="dateChange"></a-range-picker>
      </div>
    </div>
    <div class="main-box">
      <p v-for="(item, index) in state.seqList" :key="item.date"><span class="seq">{{ index + 1}}</span>
        <span class="text-span">
          <span>{{ item.text }}</span>
          <span>{{ item.date }}</span>
        </span>
      </p>
      <div v-if="state.seqList.length === 0" class="no-data">暂无数据</div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, reactive } from 'vue';
import type { Dayjs } from 'dayjs';
import { getArticleList } from '@/modules/cms/api/article';
import dayjs from 'dayjs';

const getData = async () => {
  const res = await getArticleList({
    pageSize: 20,
    pageNum: 1,
    categoryCnName: '内部通知'
  })
  state.seqList = res.data?.map(i => ({
    text: i.title,
    date: dayjs(i.审核时间 || i.createTime).format('YYYY-MM-DD')
  })) || []
}
getData()
type RangeValue = [Dayjs, Dayjs];

const dateFormat = 'YYYY/MM/DD';
let value1: any = ref<RangeValue>();

const dateChange = (date, dateString) => {
  // console.log(date, 'value1')
  console.log(dateString, 'value2')
}

interface seqListType {
  text: string,
  date: string,
}

let state = reactive<{
  seqList: seqListType[]
}>(
  {
    seqList: [
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
      // { text: '开拓病原微生物实验室生物安全事件应急处理演练', date: '2022-10-18' },
    ]
  }
)


</script>
<style scoped lang="less">
.bottom-right-box {
  background-color: #fff;
  height: 100%;
}

.card-head {
  display: flex;
  justify-content: space-between;

  img {
    display: inline-block;
  }

  .span-one {
    margin: 0 5px;
  }

  .update-span {
    img {
      margin: 0 5px 0 10px;
    }

    b {
      font-size: 18px;
    }
  }

}

.main-box {
  margin-left: 40px;
  margin-top: 20px;
  position: relative;
  height: calc(100% - 50px);
  .no-data {
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
  }
  >p {
    width: 100%;
    height: 30px;
    line-height: 30px;
    display: flex;
    margin-top: -8px;
  }

  .span-bg {
    background: #F2F7FF;
    border-radius: 4px;
    display: inline-block;
  }

  .seq {
    color: #5BA6FC;
    width: 30px;
    height: 30px;
    text-align: center;
    line-height: 30px;
    margin-right: 15px;
    .span-bg()
  }

  .text-span {
    width: 95%;
    padding: 0 10px;
    box-sizing: border-box;
    .span-bg();
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    display: flex;
    justify-content: space-between;
  }
}

.card-img {
  display: inline-block;
}
</style><template>
  <div class="bottom-left-box-one">
    <div @click="routerPush(2)">
      <h2><img src="@/assets/images/equipment-icon.svg" alt=""></h2>
      <span>待审核</span>
      <b>{{ state.wait }}</b>
    </div>
    <span></span>
    <div @click="routerPush(3)">
      <h2><img src="@/assets/images/equipment-icon1.svg" alt=""></h2>
      <span>已审核</span>
      <b>{{ state.approve }}</b>
    </div>
    <span></span>
    <div @click="routerPush(4)">
      <h2><img src="@/assets/images/equipment-icon2.svg" alt=""></h2>
      <span>已退回</span>
      <b>{{ state.refuse }}</b>
    </div>
  </div>
</template>
<script setup lang="ts">
import { reactive, watch, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { getDeviceMaintainceStatistic, getActivityStatistic } from '@/api/home/company'

const router = useRouter()
const props = defineProps({
  type: {
    type: [String, Number],
    default: '1' // 1设备维护，2实验室活动
  },
  activeKey: {
    type: [String, Number],
    default: '1' // 1周，2月，3年
  },
  toRouteName: {
    type: String,
    required: true
  }
})
const state = reactive({
  wait: 0,
  approve: 0,
  refuse: 0,
})
const getData = async (cycle) => {
  const res = props.type === '1' ? await getDeviceMaintainceStatistic({cycle: Number(cycle)})
    : await getActivityStatistic({cycle: Number(cycle)})
  state.wait = res[2] || 0
  state.approve = res[3] || 0
  state.refuse = res[4] || 0
}

// 实时更新
let timer:null | NodeJS.Timer = null
const clearGetDataInterval = () => {
  if (timer) {
    clearInterval(timer)
    timer = null
  }
}
const setGetDataInterval = () => {
  clearGetDataInterval()
  timer = setInterval(() => {
    getData(props.activeKey)
  }, 1000 * 60)
}
setGetDataInterval()

watch(() => props.activeKey, (nval) => {
  getData(nval)
  setGetDataInterval()
}, {
  immediate: true
})

onUnmounted(() => {
  clearGetDataInterval()
})

const routerPush = (activeKey: 2 | 3 | 4) => {
  router.push({
    name: props.toRouteName,
    params: {
      activeKey
    }
  })
}
</script>
<style scoped lang="less">
.bottom-left-box-one {
  display: flex;
  justify-content: space-between;
}

.bottom-left-box-one>span {
  width: 1px;
  height: 113px;
  background-color: #DCE0E7;
  display: inline-block;
  margin-top: 10px;
}

.bottom-left-box-one>div {
  width: 220px;
  height: 90px;
  margin: 20px 30px;
  border-radius: 5px;
  padding: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;

  >h2 {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #F6F7FB;
    text-align: center;
    line-height: 50px;

    img {
      display: inline-block;
    }
  }

  >b {
    font-size: 28px;
    color: #000;
  }

  >span {
    font-weight: 600;
  }
}

.bottom-left-box-one>div:hover {
  background-color: #EDF0F7;
  cursor: pointer;

  >h2 {
    background: #fff;
  }

  >b {
    color: #1861DC;
  }
}
</style><template>
  <div class="home-box">
    <div>
      <FilingCard />
      <div class="top-right-box">
        <OperationCard />
      </div>
    </div>
    <div>
      <div class="bottom-left-box">
        <div class="review-box">
          <HeadCard title="设备维护审核" @updateActiveKey="deviceActiveKey = $event">
            <template #ImgSolt>
              <img src="@/assets/images/seal-icon.svg" alt="" class="card-img">
            </template>
          </HeadCard>
          <ReviewCard type="1" :activeKey="deviceActiveKey" toRouteName="deviceMaintainApprove"/>
        </div>
        <div class="review-box">
          <HeadCard title="实验室活动审核" @updateActiveKey="activityActiveKey = $event">
            <template #ImgSolt>
              <img src="@/assets/images/seal-icon.svg" alt="" class="card-img">
            </template>
          </HeadCard>
          <ReviewCard type="2" :activeKey="activityActiveKey" toRouteName="labActivityApprove"/>
        </div>
      </div>
      <div class="home-box-bottom-main">
        <InformationCard />
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { reactive, ref } from 'vue';
import FilingCard from "./companyCard/filing-card/index.vue";
import OperationCard from './laboratoryCard/operation-card/index.vue';
import ReviewCard from './companyCard/review-card/index.vue';
import HeadCard from './components/head-card/index.vue';
import InformationCard from './companyCard/information-card/index.vue';

const deviceActiveKey = ref(1)
const activityActiveKey = ref(1)

</script>
<style scoped lang="less">
.home-box {
  width: 100%;

  &-bottom-main {
    width: 40%;
    background-color: #fff;
    border-radius: 12px;
    padding: 15px;
    border: solid 1px #E0E3EA;
  }

  >div {
    width: 100%;
    height: auto;
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;

    >div {
      border-radius: 10px;
      padding: 15px;
      margin: 0px 6px;
    }

    .top-right-box {
      width: 34%;
      background: #fff;
      border: solid 1px #E0E3EA;
    }
  }

  .bottom-left-box {
    width: 60%;
    height: 410px;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }



  .review-box {
    height: 200px;
    background: #fff;
    border-radius: 8px;
    border: solid 1px #E0E3EA;
    padding: 15px;
  }

  .bottom-right-box {
    background-color: #fff;
  }


}



.card-img {
  display: inline-block;
}
</style><template>
  <div class="card-head">
    <div>
      <slot name="ImgSolt"></slot>
      <span class="span-one">{{ props .title }}</span>
      <span class="update-span"><img src="@/assets/images/suprised-icon.svg" alt="">以下数据实时更新</span>
    </div>
    <div class="date-box">
      <span :class="{ active: activeKey === 1 }" @click="changTabFn(1)">周</span>
      <span :class="{ active: activeKey === 2 }" @click="changTabFn(2)">月</span>
      <span :class="{ active: activeKey === 3 }" @click="changTabFn(3)">年</span>
    </div>
  </div>

</template>
<script setup lang="ts">
import { defineProps, ref } from 'vue';
const props = defineProps({
  title: String
})
const emits = defineEmits(['updateActiveKey'])
const activeKey = ref(1);
const changTabFn = (key: number) => {
  activeKey.value = key;
  emits('updateActiveKey', key)
};
</script>
<style scoped lang="less">
.card-head {
  display: flex;
  justify-content: space-between;

  .span-one {
    margin: 0 5px;
    font-size: 18px;
    font-weight: 600;
    vertical-align: middle;
  }

  .update-span {
    color: #8B8B8B;
    font-size: 14px;
    vertical-align: middle;
  }

  img {
    display: inline-block;
    margin: 0 5px 0 10px;
  }

}

.date-box {
  >span {
    width: 25px;
    height: 25px;
    margin: 0 10px;
    display: inline-block;
    text-align: center;
    line-height: 25px;
    cursor: pointer;
    color: #ccc;
  }

  .active {
    width: 25px;
    height: 25px;
    margin: 0 10px;
    display: inline-block;
    text-align: center;
    line-height: 25px;
    background: #F2F2F2;
    border-radius: 4px;
    color: #000;
  }
}

// 添加到父组件中
// .card-img {
//   display: inline-block;
// }
</style>
<template>
  <!-- 省 -->
  <ProvinceHome v-if="role == '2' || role == '3' || role == '4'"/>
  <!-- 单位 -->
  <CompanyHome v-if="role == '5'" />
  <!-- 实验室 -->
  <LaboratoryHome v-if="role == '6'" />
</template>
<script setup lang="ts">
import LaboratoryHome from './laboratoryHome.vue';
import ProvinceHome from './provinceHome.vue';
import CompanyHome from './companyHome.vue';
import { onMounted } from 'vue';
import { useUserStore } from '@/store/modules/user';

/**
 * 身份判断
*/
const userStore = useUserStore()
let role = userStore.roles[0].id;
onMounted(async () => {
  
})


</script>
<style scoped lang="less">

</style> <template>
  <div class="equipment-box">
    <div class="equipment-box-header">
      <h3><img src="@/assets/images/vertical-tidy-up.svg" alt="">设备维护预警</h3>
      <span style="cursor: pointer;" @click="viewMore">查看更多</span>
    </div>
    <div>
      <a-table class="ant-table-striped" size="middle" :data-source="data" :pagination="false"
        :row-class-name="(_record, index) => (index % 2 === 1 ? null : 'table-striped')" :columns="columns"
        :scroll="{ y: 240 }"
        >
      </a-table>
    </div>
  </div>
</template>
<script setup lang="tsx">
import { ref } from 'vue';
import { useRouter } from 'vue-router'
import { getEquipmentMaintenance } from '@/api/home/lab'
import { TableColumnProps } from 'ant-design-vue'
import dayjs from 'dayjs';

const router = useRouter()
const data = ref([
  // { equName: '生物安全柜', nextDate: '2023-01-14', testCycle: 12, countDown: 8 },
]);
getEquipmentMaintenance().then(res => {
  data.value = res
})
const SeqColorMap = ['#FB083F', '#FF9F2F', '#0052D9', '#CDE1FF']
const getSeqColor = (index) => {
  return SeqColorMap[index % 4]
}
const columns:TableColumnProps[] = [
  {
    title: '序号',
    key: 'key',
    align: 'center',
    customRender: ({ index }) => {
      return <span class="seq-key" style={{ backgroundColor: getSeqColor(index) }}>
        { index + 1 }
      </span>
    }
  },
  {
    title: '设备',
    key: 'equName',
    dataIndex: 'equName',
    align: 'center',
    customRender: ({ text }) => {
      return <span class="seq-name">{ text }</span>
    }
  },
  {
    title: '下次维护日期',
    key: 'nextDate',
    dataIndex: 'nextDate',
    align: 'center',
    customRender: ({ text }) => {
      return <span>{ dayjs(text).format('YYYY-MM-DD') }</span>
    }
  },
  {
    title: '维护周期',
    key: 'testCycle',
    dataIndex: 'testCycle',
    align: 'center',
    customRender: ({ text }) => {
      return <span>{ text + '个月' }</span>
    }
  },
  {
    title: '维护倒计时',
    key: 'countDown',
    dataIndex: 'countDown',
    align: 'center',
    customRender: ({ text }) => {
      return <span class="countDown-span">{text + '天'}</span>
    }
  },
]

const viewMore = () => {
  router.push({
    name: 'labDeviceManagement'
  })
}

</script>
<style scoped lang="less">
.equipment-box {
  width: 35%;
  height: 370px;

  .equipment-box-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    font-weight: 600;

    h3 {
      font-weight: 600;
      font-size: 18px;

      img {
        display: inline-block;
      }
    }

    span {
      color: #0C5ADA;

    }
  }

}

.ant-table-striped :deep(.table-striped) td {
  background-color: #fafafa;
}

.ant-table-striped :deep(.ant-table-thead)>tr>th {
  background-color: #fff;
}
</style>

<style lang="less">
.seq-key {
  width: 28px;
  height: 28px;
  display: inline-block;
  border-radius: 50%;
  color: #fff;
  text-align: center;
  line-height: 28px;
}

.seq-name {
  color: #0C5ADA;
}

.countDown-span {
  display: inline-block;
  width: 75px;
  height: 35px;
  background: #FBEEF1;
  border-radius: 5px;
  line-height: 34px;
  text-align: center;
  color: #FB083F;
}
</style><template>

  <div class="check-card">
    <div v-for="item in props.equipmentData" :key="item">
      <div class="item-img">
        <img :src="getImgSrc(item)" alt="" width="53" height="53" v-if="getImgSrc(item)">
        <span v-else>暂无图片</span>
        <div>
          <h2 style="font-weight:600">{{ item.equipmentName }}</h2>
          <span style="color:#1B85FA;font-size: 12px;">{{ item.code }}</span>
        </div>
        <span v-if="item.workflowState == 3" class="tag-span">通过</span>
        <span v-if="item.workflowState == 4" class="tag-span-back">返回</span>
        <span v-if="item.workflowState == 2" class="tag-span-stay">待审</span>
      </div>
      <div class="item-bottom">
        <template v-if="item.workflowState !== 2">
          <span><img src="@/assets/images/iconPark-alarm-clock.svg" alt=""></span>
          <span>{{ parentName }}</span>
          <span>{{dayjs(item.modifyTime).format('YYYY-MM-DD')}}</span>
          <span>审核</span>
        </template>
      </div>
    </div>
  </div>

</template>
<script setup lang="ts">
import dayjs from 'dayjs';
import { defineProps, inject } from 'vue';

const parentName = inject('parentName')
defineExpose({
  dayjs,

})
const baseApiUrl = import.meta.env.VITE_BASE_API

const getImgSrc = (item) => {
  if (item.extendInfoFile?.md5) {
    return window.location.origin + baseApiUrl + '/file/md5/' + item.extendInfoFile.md5
  }
  return ''
}

const props: any = defineProps({
  equipmentData: Array
});


</script>
<style lang="less" scoped>
.check-card {
  display: flex;
  justify-content: space-between;

  .item-img {
    display: flex;
    justify-content: space-between;
    height: 53px;
    img {
      object-fit: contain;
    }
    >span {
      display: inline-block;
      width: 47px;
      height: 20px;
      text-align: center;
      line-height: 20px;
      border-radius: 4px;
      font-size: 12px;
    }

    >div {
      margin-left: 5px;
    }
  }

  .item-bottom {
    color: #4E5969;
    font-size: 12px;
    text-align: left;

    >span {
      margin: 0 3px;
    }

    img {
      display: inline-block;
      width: 10px;
      height: 10px;
    }
  }

  >div {
    width: 220px;
    height: 95px;
    background: #F4F7F9;
    border-radius: 8px;
    margin: 0 5px;
    padding: 10px;
    box-sizing: border-box;
  }


}

.tag-span {
  background: #E7F6FF;
  color: #7391F7;
}

.tag-span-back {
  background: #FBF8EE;
  color: #FB942E;
}

.tag-span-stay {
  background: #E1E5E8;
  color: #6E7885;
}
</style><template>
  <span class="look-many-span" @click="viewMore">查看更多</span>
  <div class="check-box-topItem">
    <h3>设备维护已审核</h3>
    <div class="check-box-context">
      <span @click="equipmentDataOkleftArrow" class="check-box-context-left-span">&lt;</span>
      <EquipmentRepair :equipmentData="pageObjLeft.equipmentDataOk" />
      <span @click="equipmentDataOkrightArrow" class="check-box-context-right-span">&gt;</span>
    </div>
  </div>
  <div class="line"></div>
  <div class="check-box-topItem">
    <h3>设备维护待审核</h3>
    <div class="check-box-context">
      <span @click="equipmentDataleftArrow" class="check-box-context-left-span">&lt;</span>
      <EquipmentRepair :equipmentData="pageObjRight.equipmentData" />
      <span @click="equipmentDatarightArrow" class="check-box-context-right-span">&gt;</span>
    </div>
  </div>
</template>
<script setup lang="ts">
import EquipmentRepair from '../equipment-repair/index.vue';
import { ref, reactive, onMounted, provide } from 'vue';
import { useRouter } from 'vue-router';
import { useUserStore } from '@/store/modules/user';
import { getUserById } from '@/api/user'
import { getLabDeviceMaintain } from '@/modules/lab/api/labDevice'
const userStore = useUserStore()
const parentId = userStore.getOrganizationInfo.parentId
const parentName = ref('')
const getParentName = async () => {
  const res = await getUserById(parentId)
  parentName.value = res.name
}
getParentName()
provide('parentName', parentName)
const router = useRouter()
let equipmentDataOkAll = ref([
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '生物安全柜', equStatus: 1, codeNum: 1254623548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '生物安全柜', equStatus: 2, codeNum: 25461848, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '生物安全柜', equStatus: 1, codeNum: 3546321548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '生物安全柜', equStatus: 1, codeNum: 4546132548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '生物安全柜', equStatus: 1, codeNum: 5546321548, unitName: 'xxxx', approvalDate: '2023-01-02' },
])

let equipmentDataAll = ref([
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '高压灭菌器', equStatus: 3, codeNum: 1546321548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '高压灭菌器', equStatus: 3, codeNum: 254361548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '高压灭菌器', equStatus: 1, codeNum: 354612548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '高压灭菌器', equStatus: 1, codeNum: 454361548, unitName: 'xxxx', approvalDate: '2023-01-02' },
  // { img: '/src/assets/images/equipment-1.png', equipmentName: '高压灭菌器', equStatus: 1, codeNum: 554261548, unitName: 'xxxx', approvalDate: '2023-01-02' },
])
const getData = async () => {
  const [wait, done] = await Promise.all([
    getLabDeviceMaintain({
      workflowState: 2, // 待审核
      pageNum: 1,
      pageSize: 12,
    }),
    getLabDeviceMaintain({
      workflowState: 3, // 已审核
      pageNum: 1,
      pageSize: 12,
    })
  ])
  equipmentDataOkAll.value = done.data 
  equipmentDataAll.value = wait.data
}

interface pageObjLeftType {
  page: number,
  pageSize: number,
  equipmentDataOk?: any,
  equipmentData?: any,
}

let pageObjLeft: pageObjLeftType = reactive({
  page: 1,
  pageSize: 2,
  equipmentDataOk: []
})
let pageObjRight: pageObjLeftType = reactive({
  page: 1,
  pageSize: 2,
  equipmentData: []
})
onMounted(async () => {
  await getData()
  pageObjLeft.equipmentDataOk = equipmentDataOkAll.value.slice((pageObjLeft.page - 1) * pageObjLeft.pageSize, pageObjLeft.page * pageObjLeft.pageSize);
  pageObjRight.equipmentData = equipmentDataAll.value.slice((pageObjRight.page - 1) * pageObjRight.pageSize, pageObjRight.page * pageObjRight.pageSize);
})

//更新数据
let updataArr = () => {
  pageObjLeft.equipmentDataOk = equipmentDataOkAll.value.slice((pageObjLeft.page - 1) * pageObjLeft.pageSize, pageObjLeft.page * pageObjLeft.pageSize);
  pageObjRight.equipmentData = equipmentDataAll.value.slice((pageObjRight.page - 1) * pageObjRight.pageSize, pageObjRight.page * pageObjRight.pageSize);
}

/**
 * 已审核 左右切换事件
 * **/
//左箭头  
const equipmentDataOkleftArrow = () => {
  pageObjLeft.page--;
  if (pageObjLeft.page <= 1) {
    pageObjLeft.page = 1
  }
  updataArr()
}
//右箭头
const equipmentDataOkrightArrow = () => {
  pageObjLeft.page++;
  if (pageObjLeft.page >= equipmentDataOkAll.value.length / pageObjLeft.pageSize) {
    pageObjLeft.page = equipmentDataOkAll.value.length / pageObjLeft.pageSize
  }
  updataArr()
}

/**
 * 待审核 左右切换事件
 * **/
//左箭头  
const equipmentDataleftArrow = () => {
  pageObjRight.page--;
  if (pageObjRight.page <= 1) {
    pageObjRight.page = 1
  }
  updataArr()
}
//右箭头
const equipmentDatarightArrow = () => {
  pageObjRight.page++;
  if (pageObjRight.page >= equipmentDataAll.value.length / pageObjRight.pageSize) {
    pageObjRight.page = equipmentDataAll.value.length / pageObjRight.pageSize
  }
  updataArr()
}

const viewMore = () => {
  router.push({
    name: 'labDeviceManagement'
  })
}
</script>
<style lang="less" scoped>
.check-box-context {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  >span {
    width: 10px;
    height: 50px;
    background: #D6DCEA;
    line-height: 50px;
    text-align: center;
    display: inline-block;
    border-radius: 3px;
    cursor: pointer;
    margin: 0 5px;
  }
  &-left-span {
    position: absolute;
    left: 0;
    top: 25px;
  }
  &-right-span {
    position: absolute;
    right: 0;
    top: 25px;
  }
}

.look-many-span {
  position: absolute;
  right: 20px;
  top: 20px;
  color: #0354D9;
  cursor: pointer;
  font-weight: 600;
}

.check-box-topItem {
  width: 48%;

  h3 {
    font-weight: 600;
  }
}

.line {
  width: 1px;
  height: 93px;
  background: #E0E3EA;
  margin-top: 25px;
}
</style><template>
  <div class="laboratory-card-item" v-for="item in props.laboratoryActivities" :key="item">
    <div class="status-span status-span-pass" v-if="item.status == 3">通过</div>
    <div class="status-span" v-if="item.status == 2">待审</div>
    <div class="status-span status-span-refuse" v-if="item.status == 4">退回</div>
    <img src="@/assets/images/equipment-2.png" alt="">
    <div>
      <b style="color: #0052D9;">{{ item.summaryTime }}</b>
      <div class="card-text">
        <span>检测样本 <span style="color: #0052D9">{{ item.sampleSum }}</span></span>
        <span>阳性数 <span style="color: #FB9B40">{{ item.samplePositiveSum }}</span> </span>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { defineProps } from 'vue';

const props: any = defineProps({
  laboratoryActivities: Array
});

</script>
<style scoped lang="less">
.laboratory-card-item {
  width: 460px;
  height: 95px;
  border: dashed 1px #ccc;
  border-radius: 8px;
  margin: 0 5px;
  display: flex;
  padding: 15px;
  justify-content: start;
  align-items: center;
  box-sizing: border-box;
  position: relative;

  .card-text {
    margin: 10px 0;

    >span {
      margin-right: 10px;
    }
  }

  .status-span {
    position: absolute;
    right: 0;
    top: 0;
    width: 45px;
    height: 20px;
    background: #E1E5E8;
    border-radius: 0px 8px 0px 8px;
    text-align: center;
    line-height: 20px;
    font-size: 12px;
  }

  .status-span-pass {
    color: #7391F7;
    background: #E7F6FF;
  }
  
  &-refuse {
    color: #FB083F;
    background-color: #E7F6FF;
  }

  >img {
    margin-right: 30px;
  }
}
</style><template>
  <span class="look-many-span" @click="viewMore">查看更多</span>
  <div class="check-box-topItem">
    <h3>实验室活动已审核</h3>
    <div class="bottom-item">
      <span @click="laboratoryActivitiesOkleftArrow" class="bottom-item-left-span">&lt;</span>
      <LaboratoryCard :laboratoryActivities="pageObjLeft.laboratoryActivitiesOk" />
      <span @click="laboratoryActivitiesOkrightArrow" class="bottom-item-right-span">&gt;</span>
    </div>
  </div>
  <div class="line"></div>
  <div class="check-box-topItem">
    <h3>实验室活动待审核</h3>
    <div class="bottom-item">
      <span @click="laboratoryActivitiesleftArrow" class="bottom-item-left-span">&lt;</span>
      <LaboratoryCard :laboratoryActivities="pageObjRight.laboratoryActivities" />
      <span @click="laboratoryActivitiesrightArrow" class="bottom-item-right-span">&gt;</span>
    </div>
  </div>
</template>
<script setup lang="ts">
import LaboratoryCard from '../laboratory-card/index.vue';
import { reactive, onMounted, ref } from 'vue';
import { useRouter } from 'vue-router'
import { getActivityByStatus } from '@/api/home/lab'
const router = useRouter()
let laboratoryActivitiesOkAll = ref([
  // { img: '/src/assets/images/equipment-2.png', status: 1, summaryTime: '2021上半年', sampleSum: 200, samplePositiveSum: 11 },
  // { img: '/src/assets/images/equipment-2.png', status: 2, summaryTime: '2022上半年', sampleSum: 201, samplePositiveSum: 12 },
  // { img: '/src/assets/images/equipment-2.png', status: 1, summaryTime: '2023上半年', sampleSum: 21, samplePositiveSum: 412 },
])

let laboratoryActivitiesAll = ref([
  // { img: '/src/assets/images/equipment-2.png', status: 1, summaryTime: '2021下半年', sampleSum: 301, samplePositiveSum: 13 },
  // { img: '/src/assets/images/equipment-2.png', status: 2, summaryTime: '2022下半年', sampleSum: 302, samplePositiveSum: 12 },
  // { img: '/src/assets/images/equipment-2.png', status: 1, summaryTime: '2023下半年', sampleSum: 300, samplePositiveSum: 182 },
  // { img: '/src/assets/images/equipment-2.png', status: 1, summaryTime: '2024下半年', sampleSum: 500, samplePositiveSum: 12 },
])

const getData = async () => {
  const [wait, done] = await Promise.all([
    getActivityByStatus({
      status: '2',
      pageNum: 1,
      pageSize: 12,
    }),
    getActivityByStatus({
      status: '3,4', // 已审核
      pageNum: 1,
      pageSize: 12,
    })
  ])
  /*
    samplePositiveSum
    sampleSum
    summaryTime
    无status
  */
  laboratoryActivitiesOkAll.value = done.data || []
  laboratoryActivitiesAll.value = wait.data || []
}

interface pageObjLeftType {
  page: number,
  pageSize: number,
  laboratoryActivitiesOk?: any,
  laboratoryActivities?: any,
}

let pageObjLeft: pageObjLeftType = reactive(
  {
    page: 1,
    pageSize: 1,
    laboratoryActivitiesOk: []
  }
)
let pageObjRight: pageObjLeftType = reactive(
  {
    page: 1,
    pageSize: 1,
    laboratoryActivities: []
  }
)

onMounted(async () => {
  await getData()
  pageObjLeft.laboratoryActivitiesOk = laboratoryActivitiesOkAll.value.slice((pageObjLeft.page - 1) * pageObjLeft.pageSize, pageObjLeft.page * pageObjLeft.pageSize);
  pageObjRight.laboratoryActivities = laboratoryActivitiesAll.value.slice((pageObjRight.page - 1) * pageObjRight.pageSize, pageObjRight.page * pageObjRight.pageSize);
})

//更新数据
let updataArr = () => {
  pageObjLeft.laboratoryActivitiesOk = laboratoryActivitiesOkAll.value.slice((pageObjLeft.page - 1) * pageObjLeft.pageSize, pageObjLeft.page * pageObjLeft.pageSize);
  pageObjRight.laboratoryActivities = laboratoryActivitiesAll.value.slice((pageObjRight.page - 1) * pageObjRight.pageSize, pageObjRight.page * pageObjRight.pageSize);
}

/**
 * 已审核 左右切换事件
 * **/
//左箭头
const laboratoryActivitiesOkleftArrow = () => {
  console.log('左')
  pageObjLeft.page--;
  if (pageObjLeft.page <= 1) {
    pageObjLeft.page = 1
  }
  updataArr()
}
//右箭头
const laboratoryActivitiesOkrightArrow = () => {
  pageObjLeft.page++;
  if (pageObjLeft.page >= laboratoryActivitiesOkAll.value.length / pageObjLeft.pageSize) {
    pageObjLeft.page = laboratoryActivitiesOkAll.value.length / pageObjLeft.pageSize
  }
  updataArr()
}

/**
 * 待审核 左右切换事件
 * **/
//左箭头  
const laboratoryActivitiesleftArrow = () => {
  pageObjRight.page--;
  if (pageObjRight.page <= 1) {
    pageObjRight.page = 1
  }
  updataArr()
}
//右箭头
const laboratoryActivitiesrightArrow = () => {
  pageObjRight.page++;
  if (pageObjRight.page >= laboratoryActivitiesAll.value.length / pageObjRight.pageSize) {
    pageObjRight.page = laboratoryActivitiesAll.value.length / pageObjRight.pageSize
  }
  updataArr()
}

const viewMore = () => {
  router.push({
    name: 'labActivityRecord'
  })
}

</script>
<style lang="less" scoped>
.look-many-span {
  position: absolute;
  right: 20px;
  top: 20px;
  color: #0354D9;
  cursor: pointer;
  font-weight: 600;
}

.check-box-topItem {
  width: 48%;

  h3 {
    font-weight: 600;
  }
}

.bottom-item {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  >span {
    width: 10px;
    height: 50px;
    background: #D6DCEA;
    line-height: 50px;
    text-align: center;
    display: inline-block;
    border-radius: 3px;
    cursor: pointer;
    margin: 0 5px;
  }

  &-left-span {
    position: absolute;
    left: 0;
    top: 25px;
  }
  &-right-span {
    position: absolute;
    right: 0;
    top: 25px;
  }
}

.line {
  width: 1px;
  height: 93px;
  background: #E0E3EA;
  margin-top: 25px;
}
</style>
<template>
  <!-- 使用此组件 需在父组件 包裹一层div 宽的百分比 -->
  <div class="operation-box">
    <div class="operation-box-header">
      <div><img src="@/assets/images/operation-manual-icon.svg" alt="">
        <b>操作手册</b>
      </div>
      <div><img src="@/assets/images/weather-icon.svg" alt=""><span>23度</span>|<span>{{ todayDate }}</span>
      </div>
    </div>
    <div class="operation-box-context">
      <div class="operation-img-box">
        <img src="@/assets/images/circular.png" alt="" class="circular-img">
        <img src="@/assets/images/people.png" alt="" class="circular-img">
      </div>
      <div :class="props.type == 'small' ? 'operation-text-box-small' : 'operation-text-box'">
        不知道如何使用？<br />查看病原微生物实验室备案系统 <b>操作手册</b></div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, defineProps } from 'vue';
import dayjs from 'dayjs';

const props: any = defineProps({
  type: String
})

const todayDate = ref(dayjs().format('YYYY/MM/DD'))




</script>
<style scoped lang="less">
.operation-box {
  // width: 29%;
  width: 100%;
  height: 100%;

  .operation-box-header {
    display: flex;
    justify-content: space-between;

    b {
      font-size: 18px;
      vertical-align: middle;
      margin: 0 5px;
    }

    img {
      display: inline-block;
    }

    span {
      margin: 0 5px;
    }
  }

  .operation-box-context {
    display: flex;
    // height: 150px;
    height: calc(100% - 30px);
    justify-content: space-between;
    align-items: center;
    position: relative;


    .operation-text-box {
      font-size: 18px;
      width: 40%;
      height: auto;

      b {
        color: #0C5ADA;
        cursor: pointer;
      }
    }

    .operation-text-box-small {
      font-size: 15px;
      width: 40%;
      height: auto;

      b {
        color: #0C5ADA;
        cursor: pointer;
      }
    }

    .circular-img {
      position: absolute;
      width: 40%;
    }
  }
}

.operation-img-box {
  width: 50%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;

}
</style>
<template>
  <div class="certificate-box">
    <div class="certificate-left">
      <div class="certificate-box-header">
        <h2><img src="@/assets/images/certificate.svg" alt=""> 备案证书下载</h2>
        <span class="code-span" v-if="state.certCode">实验室备案编号
          <b>{{ state.certCode }}</b>
        </span>
        <span class="count-down-span" v-if="state.accDueTime">距离备案到期：
          <b>{{ countDown.d }}</b>天
          <b>{{ countDown.h }}</b>:
          <b>{{ countDown.m }}</b>:
          <b>{{ countDown.s }}</b>
        </span>
        <div class="approval-step-box">
          <span style="font-weight: bold;">当前实验室备案审批流程</span>
          <a-steps :current="getCurrentStep" :status="state.stepStatus" size="small">
            <a-step v-for="item in state.auditProcessList" :title="item.user.name">
              <template #description>
                <div>{{ item.auditTime ? dayjs(item.auditTime).format('YYYY-MM-DD') : '' }}</div>
                <template v-if="item.approveState">
                  <div v-if="item.approveState === 'WAITING'">
                    <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" /> 待审核
                  </div>
                  <div style="color:#5AE6E6" v-if="item.approveState === 'APPROVE'">
                    <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" />审核通过
                  </div>
                  <div style="color:#FDA626" v-if="item.approveState === 'REFUSE'">
                    <SvgIcon prefix="icon" name="fanhui" class="icon-btn" />已退回
                  </div>
                  <div class="approval-step-comments" v-if="item.comments">
                    {{ item.comments }}
                  </div>
                </template>
              </template>
            </a-step>
            <!-- <a-step title="实验室提交备案">
              <template #description>
                <div>2022.11.12</div>
              </template>
            </a-step>
            <a-step title="单位审核">
              <template #description>
                <div>2022.11.12</div>
                <div>
                  <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" /> 待审核
                </div>
                <div style="color:#5AE6E6">
                  <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" />审核通过
                </div>
                <div style="color:#FDA626">
                  <SvgIcon prefix="icon" name="fanhui" class="icon-btn" />已退回
                </div>
              </template>
            </a-step>
            <a-step title="主管部门">
              <template #description>
                <div>2022.11.12</div>
                <div style="color:#646D7C">
                  <img src="@/assets/images/stay-Acceptance-icon.png" alt="">
                  待受理
                </div>
                <div>
                  <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" /> 待审核
                </div>
                <div style="color:#5AE6E6">
                  <SvgIcon prefix="icon" name="tongguo" style="display: inline-block;" />审核通过
                </div>
                <div style="color:#FDA626">
                  <SvgIcon prefix="icon" name="fanhui" class="icon-btn" />已退回
                </div>
              </template>
            </a-step>
            <a-step title="省级主管部门">
              <template #description>
                <div>2022.11.12</div>
              </template>
            </a-step> -->
          </a-steps>
        </div>
      </div>
    </div>
    <div class="certificate-right">
      <!-- <img :src="baseUrl + '/file/md5/' + state.fileMd5" alt="" v-if="state.fileMd5"> -->
      <!-- <object type="application/pdf" :data="baseUrl + '/file/md5/' + state.fileMd5" alt="" v-if="state.fileMd5"></object> -->
      <object type="application/pdf" :data="state.blobURL" alt="" v-if="state.fileMd5" height="217" width="154"></object>
      <!-- <embed :src="state.blobURL" type="application/pdf"> -->
    </div>
    <img src="@/assets/images/background-img1.png" alt="" class="certificate-imgBottom">
    <img src="@/assets/images/background-img2.png" alt="" class="certificate-imgTop">
  </div>
</template>
<script setup lang="ts">
import { reactive, computed, onUnmounted } from 'vue';
import { SvgIcon } from '@/framework/components/basic/svg-icon';
import { useUserStore } from '@/store/modules/user';
import { getCertFile } from '@/api/home/lab'
import dayjs from 'dayjs';
import { printDoc } from './pdf'
import axios from 'axios';

const baseUrl = import.meta.env.VITE_BASE_API
const userStore = useUserStore()
const labName = userStore.getOrganizationInfo.name
const state = reactive({
  accDueTime: '',
  fileMd5: '',
  auditProcessList: [] as any[],
  rawData: {} as any,
  blobURL: null,
  stepStatus: 'process',
  certCode: null,
})
const countDown = reactive({
  d: 0,
  h: 0,
  m: 0,
  s: 0,
})
const getData = async () => {
  const res = await getCertFile()
  state.certCode = res.certCode || null
  state.rawData = res
  state.accDueTime = res.accDueTime
  state.fileMd5 = res.certFileMD5
  state.auditProcessList = res.approveProcess?.auditProcessList || [{
    user: {
      name: '单位审批',
    },
  }, {
    user: {
      name: '主管部门审批',
    },
  }]
  // 如果审批完成，去掉返回体中needless的数据
  if (state.rawData?.approveProcess?.approveState === 'APPROVE') {
    state.auditProcessList = state.auditProcessList.filter(approveUser => approveUser.approveState !== 'NEEDLESS')
  }
  state.auditProcessList.unshift({
    auditTime: res.applyTime,
    user: {
      name: '实验室提交备案', // labName
    }
  })
  if (state.fileMd5) {
    const pdf = await axios.get(baseUrl + '/file/md5/' + state.fileMd5, { responseType: 'blob' })
    state.blobURL = await printDoc(pdf)
  }
}

getData()

const getCurrentStep = computed(() => {
  let step = 0
  if (!state.rawData.applyTime) {
    return step
  } else {
    step += 1
    state.auditProcessList.forEach(item => {
      if (item.approveState === 'APPROVE' || item.approveState === 'REFUSE') {
        step++
      }
      if (item.approveState === 'REFUSE') {
        state.stepStatus = 'error'
      }
    })
  }
  return step
})

const countDownTime = () => {
  const miliSecond = dayjs(state.accDueTime).diff()
  const d = parseInt(miliSecond / (1000 * 60 * 60 * 24))
  const h = parseInt((miliSecond % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
  const m = parseInt((miliSecond % (1000 * 60 * 60)) / (1000 * 60))
  const s = parseInt((miliSecond % (1000 * 60)) / (1000))
  countDown.d = d
  countDown.h = h
  countDown.m = m
  countDown.s = s
}

let timer: null | NodeJS.Timer = null
const setCountDown = () => {
  if (timer) {
    clearInterval(timer)
    timer = null
  }
  timer = setInterval(countDownTime, 1000)
}
setCountDown()
onUnmounted(() => {
  if (timer) {
    clearInterval(timer)
    timer = null
  }
})

</script>
<style scoped lang="less">
.certificate-box {
  .recspan {
    display: inline-block;
    width: auto;
    height: 35px;
    text-align: center;
    line-height: 35px;
    border-radius: 10px;
    padding: 0 10px;
  }

  .count-down-span {
    .recspan();
    background: #F5E6F0;
    color: #FB083F;
    position: absolute;
    right: 20px;
    z-index: 1;
    font-weight: 600;

    b {
      background: red;
      color: #fff;
      padding: 0 5px;
      border-radius: 2px;
      margin: 0 5px;
    }
  }

  width: 70%;
  height: 285px;
  display: flex;
  justify-content: space-between;
  position: relative;

  .certificate-left {
    width: 80%;
    height: auto;
  }

  .certificate-right {
    width: 19%;
    height: auto;
    display: flex;
    justify-content: flex-end;
    padding: 40px 0 0 0;
    z-index: 1;
  }

  .certificate-box-header {

    >div {
      margin-top: 14px;
    }

    h2 {
      display: inline-block;
      font-size: 18px;
      margin-right: 35px;
      font-weight: 600;

      img {
        display: inline-block;
      }
    }



    .code-span {
      .recspan();
      color: #FFA31E;
      background: #FFF5E6;
    }


  }

  .certificate-imgBottom {
    position: absolute;
    right: 310px;
    bottom: 0;
  }

  .certificate-imgTop {
    position: absolute;
    right: 120px;
    top: 0;
  }
}

.ant-steps-item-finish>.ant-steps-item-container>.ant-steps-item-content>.ant-steps-item-title {
  border: dashed 1px red;
}

.approval-step-box {


  div {
    margin: 5px 0;
  }

  img {
    display: inline-block;
    width: 18px;
    height: 18px;
    border: solid 1px;
    border-radius: 50%;
    padding: 1px;
  }
}

.approval-step-comments {
  max-height: 90px;
  padding: 2px 8px;
  overflow: auto;
  background-color: #edf0f7;
  border-radius: 0px 8px 8px;
  color: #101010;
}

.icon-btn {
  display: inline-block;
  width: 18px;
  height: 18px;
  border: solid 1px;
  border-radius: 50%;
  padding: 1px;
}
</style>
const printBlobUrl = (blobURL) => {
  return new Promise((resolve) => {
    const iframe = document.createElement('iframe') // load content in an iframe to print later
    document.body.appendChild(iframe)
    iframe.style.display = 'none'
    iframe.src = blobURL
    iframe.onload = function () {
      setTimeout(function () {
        iframe.focus()
        iframe.contentWindow.print()
        setTimeout(() => {
          // 5分钟之后删除 iframe
          document.body.removeChild(iframe)
        }, 5 * 60 * 1000)
        resolve(true)
      }, 1)
    }
  })
}

export async function printDoc (result) {
  const blob = new Blob([result.data], { type: 'application/pdf' }) // this make the magic
  const blobURL = URL.createObjectURL(blob)
  // await printBlobUrl(blobURL)
  // URL.revokeObjectURL(blobURL)
  // return result
  return blobURL
}<template>
  <div class="home-box">
    <div>
      <RecordLicenseCard />
      <div class="top-right-box">
        <OperationCard />
      </div>
    </div>
    <div>
      <EquipmentCard />
      <div class="check-box">
        <div class="check-box-top">
          <EquipmentMaintenance />
        </div>
        <div class="check-box-top">
          <LaboratoryActivities />
        </div>

      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import RecordLicenseCard from './laboratoryCard/recordLicense-card/index.vue';
import OperationCard from './laboratoryCard/operation-card/index.vue';
import EquipmentCard from './laboratoryCard/equipment-card/index.vue';
import EquipmentMaintenance from './laboratoryCard/equipmentMaintenance/index.vue';
import LaboratoryActivities from './laboratoryCard/laboratoryActivities/index.vue';



</script>
<style scoped lang="less">
.home-box {
  width: 100%;

  >div {
    width: 100%;
    height: auto;
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;

    >div {
      background: #fff;
      border-radius: 8px;
      padding: 20px;
      margin: 0 6px;
    }

    .top-right-box {
      width: 29%;
      height: 285px;
      background: #fff;
    }
  }

  .check-box {
    width: 64%;
    height: 370px;
    padding: 0;
    background: #f0f2f5;

    &-top {
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      position: relative;
    }

    &-bottom {
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      position: relative;

      .check-box-top {
        width: 100%;
      }

    }

    >div {
      width: 100%;
      height: 180px;
      border-radius: 8px;
      background: #fff;
      padding: 20px;
    }

  }
}


.ant-table-striped :deep(.table-striped) td {
  background-color: #fafafa;
}

.seq-span {
  display: inline-block;
  width: 26px;
  height: 26px;
  background: red;
  border-radius: 50%;
  text-align: center;
  line-height: 26px;
  color: #fff;
}

.repairDownDate-span {
  display: inline-block;
  width: 75px;
  height: 35px;
  background: #FBEEF1;
  text-align: center;
  line-height: 35px;
  border-radius: 5px;
  color: #FB083F;
}
</style><template>
  <div class="bottom-left-box-one">
    <div @click="routerPush('TO_BE_APPROVAL')">
      <h2><img src="@/assets/images/home-building1.svg" alt=""></h2>
      <span>待审核</span>
      <b>{{ state.wait }}</b>
    </div>
    <span></span>
    <div @click="routerPush('PASSED')">
      <h2><img src="@/assets/images/home-building2.svg" alt=""></h2>
      <span>审核通过</span>
      <b>{{ state.approve }}</b>
    </div>
    <span></span>
    <div @click="routerPush('RETURNED')">
      <h2><img src="@/assets/images/home-building3.svg" alt=""></h2>
      <span>已退回</span>
      <b>{{ state.refuse }}</b>
    </div>
  </div>
</template>
<script setup lang="ts">
import { reactive, watch, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { getCompanyInfoStatistic } from '@/api/home/org'
import { useUserStore } from '@/store/modules/user'
const userStore = useUserStore()
let role = userStore.roles[0].id;
const router = useRouter()
const props = defineProps({
  activeKey: {
    type: [String, Number],
    default: '1' // 1周，2月，3年
  }
})
const state = reactive({
  wait: 0,
  approve: 0,
  refuse: 0,
})
const getData = async (cycle) => {
  const res = await getCompanyInfoStatistic({cycle: Number(cycle)})
  state.wait = res[2] || 0
  state.approve = res[3] || 0
  state.refuse = res[4] || 0
}

// 实时更新
let timer:null | NodeJS.Timer = null
const clearGetDataInterval = () => {
  if (timer) {
    clearInterval(timer)
    timer = null
  }
}
const setGetDataInterval = () => {
  clearGetDataInterval()
  timer = setInterval(() => {
    getData(props.activeKey)
  }, 1000 * 60)
}
setGetDataInterval()

watch(() => props.activeKey, (nval) => {
  getData(nval)
  setGetDataInterval()
}, {
  immediate: true
})

onUnmounted(() => {
  clearGetDataInterval()
})

const routerPush = (activeKey: 'TO_BE_APPROVAL' | 'PASSED' | 'RETURNED') => {
  let name = 'provinceCompanyInfoApprove'
  if (role == '3' || role == '4') {
    name = 'cityCompanyInfoApprove'
  }
  router.push({
    name,
    params: {
      activeKey
    }
  })
}
</script>
<style scoped lang="less">
.bottom-left-box-one {
  display: flex;
  justify-content: space-between;
}

.bottom-left-box-one>span {
  width: 1px;
  height: 113px;
  background-color: #DCE0E7;
  display: inline-block;
  margin-top: 10px;
}

.bottom-left-box-one>div {
  width: 220px;
  height: 90px;
  margin: 20px 30px;
  border-radius: 5px;
  padding: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;

  >h2 {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #F6F7FB;
    text-align: center;
    line-height: 50px;

    img {
      display: inline-block;
    }
  }

  >b {
    font-size: 28px;
    color: #000;
  }

  >span {
    font-weight: 600;
  }
}

.bottom-left-box-one>div:hover {
  background-color: #EDF0F7;
  cursor: pointer;

  >h2 {
    background: #fff;
  }

  >b {
    color: #1861DC;
  }
}
</style><template>
  <div class="home-box">
    <div>
      <div class="home-box-top-left">
        <div>
          <b>{{ waitAuditCount }}</b>
          <br /><span>单位注册申请</span>
        </div>
      </div>
      <div class="home-box-top-center">
        <div class="review-box">
          <HeadCard title="单位备案审核" @updateActiveKey="companyInfoActiveKey = $event">
            <template #ImgSolt>
              <img src="@/assets/images/seal-icon.svg" alt="" class="card-img">
            </template>
          </HeadCard>
          <!-- <ReviewCard /> -->
          <!-- todo -->
          <company-info-card :activeKey="companyInfoActiveKey"></company-info-card>
        </div>
      </div>
      <div class="home-box-top-right">
        <OperationCard type="small" />
      </div>
    </div>
    <div>
      <div class="home-box-center-main">
        <div class="review-box">
          <HeadCard title="实验室备案审核" @updateActiveKey="labInfoActiveKey = $event">
            <template #ImgSolt>
              <img src="@/assets/images/seal-icon.svg" alt="" class="card-img">
            </template>
          </HeadCard>
        </div>
        <div class="filingCardItem-box">
          <FilingCardItem type="待受理" :num="state.labInfoStatistic.waitingHandle"
            :clickFn="() => routerPush('TO_BE_REVIEWED')">
            <template #top-img>
              <img src="@/assets/images/wait-approve.png" alt="">
            </template>
          </FilingCardItem>
          <FilingCardItem type="待审核" :num="state.labInfoStatistic.waitingApprove"
            :clickFn="() => routerPush('TO_BE_APPROVAL')">
            <template #top-img>
              <img src="@/assets/images/laboratory-icon.png" alt="">
            </template>
          </FilingCardItem>
          <FilingCardItem type="同意备案" :num="state.labInfoStatistic.approve"
            :clickFn="() => routerPush('PASSED')">
            <template #top-img>
              <img src="@/assets/images/approve.png" alt="">
            </template>
          </FilingCardItem>
          <FilingCardItem type="已退回" :num="state.labInfoStatistic.refuse"
            :clickFn="() => routerPush('RETURNED')">
            <template #top-img>
              <img src="@/assets/images/refused.png" alt="">
            </template>
          </FilingCardItem>
          <div class="statistics-box">
            <div v-for="item, index in state.BslList" :key="item.num"><span class="statis-text">
                <b :style="{ backgroundColor: BslListColor[index] }"></b>
                {{ item.key }}:
              </span><span>{{ item.num }}</span></div>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="home-box-bottom-main">
        <InformationCard />
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, reactive, watch, onUnmounted } from 'vue';
import { useRouter } from 'vue-router'
import CompanyInfoCard from './provinceCard/company-info-card.vue'
import HeadCard from './components/head-card/index.vue';
import ReviewCard from './companyCard/review-card/index.vue';
import OperationCard from './laboratoryCard/operation-card/index.vue';
import FilingCardItem from './companyCard/filing-card/filing-card-item/index.vue';
import InformationCard from './companyCard/information-card/index.vue';
import { getWaitAudit } from '@/modules/cityOrg/api/user';
import { getLabInfoStatistic } from '@/api/home/company'
import { getCompanyInfoStatistic, labTypeStatistic } from '@/api/home/org'
import { useUserStore } from '@/store/modules/user'

const userStore = useUserStore()
let role = userStore.roles[0].id;
const router = useRouter()
const waitAuditCount = ref(0)
getWaitAudit({}).then(res => {
  waitAuditCount.value = res.total
})

interface BslListType {
  key: string,
  num: number,
}

let state = reactive<{
  BslList: BslListType[],
  labInfoStatistic: {
    waitingHandle: number,
    waitingApprove: number,
    approve: number,
    refuse: number
  }
}>(
  {
    BslList: [
      { key: 'BSL-1', num: 1024 },
      { key: 'BSL-2', num: 108024 },
      { key: '加强型BSL-2', num: 1024 },
      { key: 'BSL-3', num: 4 },
      { key: 'BSL-4', num: 2 },
    ],
    labInfoStatistic: {
      waitingHandle: 0,
      waitingApprove: 0,
      approve: 0,
      refuse: 0
    }
  }
)

const BslListColor = ['#D6E2FC', '#0052D9', '#FFB140', '#03BA94', '#FB083F']

const companyInfoActiveKey = ref(1)
const labInfoActiveKey = ref(1)

const getLabData = async (cycle) => {
  const [res, typeRes] = await Promise.all([
    getLabInfoStatistic({ cycle: Number(cycle) }),
    labTypeStatistic({ cycle: Number(cycle) })
  ])
  state.BslList.forEach(labType => {
    labType.num = typeRes[labType.key]
  })
  state.labInfoStatistic.waitingHandle = res['待受理']
  state.labInfoStatistic.waitingApprove = res['待审核']
  state.labInfoStatistic.approve = res['已审核']
  state.labInfoStatistic.refuse = res['已退回']
}
let labTimer: null | NodeJS.Timer = null
const clearGetLabDataInterval = () => {
  if (labTimer) {
    clearInterval(labTimer)
    labTimer = null
  }
}

const setGetLabDataInterval = () => {
  clearGetLabDataInterval()
  labTimer = setInterval(() => {
    getLabData(labInfoActiveKey.value)
  }, 1000 * 60)
}
type LabInfoActiveKeyType = 'TO_BE_REVIEWED' | 'TO_BE_APPROVAL' | 'PASSED' | 'RETURNED'

const routerPush = (activeKey: LabInfoActiveKeyType) => {
  let name = 'provinceLabInfoApprove'
  if (role == '3' || role == '4') {
    name = 'cityLabInfoApprove'
  }
  router.push({
    name,
    params: {
      activeKey
    }
  })
}

watch(labInfoActiveKey, () => {
  getLabData(labInfoActiveKey.value)
  setGetLabDataInterval()
}, { immediate: true })

onUnmounted(() => {
  clearGetLabDataInterval()
})
</script>
<style scoped lang="less">
.home-box {
  width: 100%;

  >div {
    width: 100%;
    height: auto;
    display: flex;
    margin-bottom: 12px;
    justify-content: space-between;
  }

  .item-radius-pad {
    border-radius: 12px;
    padding: 15px;
    border: solid 1px #E0E3EA;
    margin: 0 6px;
  }

  &-top-left {
    width: 15%;
    height: 200px;
    background: #3584F5;
    .item-radius-pad();
    display: flex;
    justify-content: center;
    align-items: center;

    >div {
      text-align: center;
      color: #fff;

      >b {
        font-size: 60px;
        color: #fff;
      }
    }
  }

  &-top-center {
    width: 63%;
    height: 200px;
    background-color: #fff;
    .item-radius-pad();
  }

  &-top-right {
    width: 25%;
    height: 200px;
    background: #fff;
    .item-radius-pad();
  }

  &-center-main {
    width: 100%;
    height: 280px;
    background-color: #fff;
    .item-radius-pad();

    .filingCardItem-box {
      display: flex;
      justify-content: space-between;
      margin-left: 30px;

      .statistics-box {
        width: 200px;
        height: 100px;
        padding-top: 25px;
        font-size: 14px;

        .statis-text {
          display: inline-block;
          text-align: right;
          width: 60%;
          margin-right: 5px;
        }

        >div {
          margin-bottom: 10px;

          b {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
          }
        }
      }
    }
  }

  &-bottom-main {
    height: 420px;
    width: 40%;
    background-color: #fff;
    .item-radius-pad();
  }
}

.card-img {
  display: inline-block;
}
</style><template>
  <div>
    单点登录跳转中...
  </div>
</template>
<script setup lang="tsx">
import { useRoute, useRouter } from 'vue-router';
import Storage from '@/framework/utils/Storage'
import { useUserStore } from '@/store/modules/user';
import { message } from 'ant-design-vue'
const route = useRoute()
const router = useRouter()
const userStore = useUserStore()
const token = route.query.token
const redirect = route.query.redirect_path
if (token) {
  Storage.setCookie('token', token)
  userStore.afterLogin().then(res => {
    if (redirect) {
      router.replace({
        path: redirect + ''
      })
    } else {
      router.replace({
        name: 'home'
      })
    }
  })
  .catch(err => {
    message.error('登录失败！')
    window.history.go(-1)
  })
} else {
  router.replace({
    name: 'Login'
  })
}
</script>
<style lang="less" scoped></style><template>
  <div class="login-page">
    <!-- tag 标题 -->
    <div class="page-logo" v-show="activeForm !== 3">
      <img src="@/assets/images/logo-min.png" alt="" />
      <h1 class="logo-text">基于国产操作系统的病原微生物实验室备案系统</h1>
    </div>
    <!-- tag 登录框 -->
    <div class="page-box">
      <!-- tag tabs -->
      <ul class="box-header" v-show="activeForm !== 3">
        <li :class="{ active: activeTab === 1 }" @click="changeTabFn(1)">实验室登录</li>
        <li :class="{ active: activeTab === 2 }" @click="changeTabFn(2)">单位登录</li>
        <li :class="{ active: activeTab === 3 }" @click="changeTabFn(3)">主管部门登录</li>
      </ul>
      <!-- tag 密码登录 -->
      <template v-if="activeForm === 1">
        <div class="box-form">
          <Form :modal="state.loginInfo" @submit.prevent="submitFn">
            <Form.Item>
              <Input
                v-model:value="state.loginInfo.username"
                :placeholder="`${title}/社会统一信用代码`"
                allowClear
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="yonghu" />
                </template>
              </Input>
            </Form.Item>
            <Form.Item>
              <Input.Password
                v-model:value="state.loginInfo.password"
                allowClear
                placeholder="密码"
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="mima" />
                </template>
              </Input.Password>
            </Form.Item>
            <Form.Item>
              <Input
                v-model:value="state.loginInfo.captchaCode"
                placeholder="请输入验证码"
                style="width: 330px"
              >
                <template #prefix>
                  <key-outlined style="margin: 0 15px" />
                </template>
              </Input>
              <img :src="state.captcha" alt="验证码" class="captcha" @click="getCaptchaImg" />
            </Form.Item>
            <Form.Item>
              <Button
                :loading="state.loading"
                type="primary"
                html-type="submit"
                shape="round"
                size="large"
                block
              >
                登录
              </Button>
            </Form.Item>
          </Form>
        </div>
        <div class="box-btn">
          <Checkbox v-model:checked="isRemember">记住密码</Checkbox>
          <Button v-show="activeTab === 2" type="link" @click="changeFormFn(3)">注册账号</Button>
          <Button v-show="activeTab === 2" type="text" @click="changeFormFn(2)">忘记密码</Button>
        </div>
      </template>
      <!-- tag 验证码登录 -->
      <template v-else-if="activeForm === 2">
        <div class="box-form">
          <Form>
            <Form.Item>
              <Input
                v-model:value="state.loginInfo.account"
                size="large"
                :placeholder="`${title}/社会统一信用代码`"
                allowClear
              >
                <template #prefix>
                  <user-outlined style="margin: 0 15px" />
                </template>
              </Input>
            </Form.Item>

            <Form.Item>
              <Input
                style="width: 300px"
                size="large"
                v-model:value="state.loginInfo.captchaCode"
                placeholder="请输入短信验证码"
              >
                <template #prefix>
                  <key-outlined style="margin: 0 15px" />
                </template>
              </Input>
              <Button type="primary" ghost class="captcha-btn">获取验证码</Button>
            </Form.Item>
            <Form.Item>
              <Button
                type="primary"
                html-type="submit"
                shape="round"
                size="large"
                :loading="state.loading"
                block
              >
                登录
              </Button>
            </Form.Item>
          </Form>
        </div>
        <div class="box-btn">
          <Button type="text" @click="changeFormFn(1)">统一社会信用代码登录</Button>
        </div>
      </template>
      <!-- tag 单位注册 -->
      <template v-else>
        <div class="box-form">
          <Form :model="state.loginInfo" @submit.prevent="submitFn">
            <a-form-item required>
              <!--              <Cascader class="cascader-edit" v-model:value="state.loginInfo.localArea"-->
              <!--                        :options="dividesList"-->
              <!--                        :fieldNames="{label:'name',name:'name',value:'id'}"-->
              <!--                        placeholder="请选择行政区划"/>-->
              <TreeSelect
                class="cascader-edit"
                v-model:value="state.loginInfo.localArea"
                :show-search="false"
                style="width: 100%"
                :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"
                placeholder="请选择行政区划"
                allow-clear
                tree-default-expand-all
                :tree-data="dividesList"
                :fieldNames="{ children: 'children', label: 'name', value: 'id' }"
              />
              <SvgIcon class="select-icon" prefix="icon" name="hangzhengquhuaguanli" />
            </a-form-item>
            <Form.Item required>
              <Select
                v-model:value="state.loginInfo.pid"
                allowClear
                size="large"
                placeholder="请选择上级行政主管部门"
                :options="ParentAndChildUnitList"
                :fieldNames="{ label: 'name', name: 'name', value: 'id' }"
                style="display: inline-block;width: 420px;"
              >
              </Select>
                <div style="display: inline-block;position: relative;">
                  <SvgIcon prefix="icon" name="wenhao" style="display: inline-block;width: 24px;height: 24px;
                    position: relative; left: 10px;cursor: pointer;" @click="triggerPopTip"></SvgIcon>
                  <PopTip ref="popTip"></PopTip>
                  <!-- 

                    <div style="width:200px;position: absolute; top: 30px; right: -30px;z-index: 20; padding: 10px 15px;
        border: 1px solid #ddd;border-radius: 6px;
        box-shadow: 0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d;
        background-color: #f0f4f7;">
        <div style="position: absolute; width: 8px; height: 8px;transform: rotate(45deg);top: -4px;right: 27px;
          border-top: 1px solid #ddd;border-left: 1px solid #ddd;z-index: 21;
          background-color: #f0f4f7;"></div>
        <div style="font-weight: bold;">提示</div>
        <div>· 请根据单位级别（乡镇级、区县级、厅局级、省部级、国家级）选择正确的上级行政主管部门。</div>
        <div>· 上级主管部门与所选行政区划相关联，行政区划不等于单位所处地理位置。</div>
      </div>
                   -->
                </div>
              <SvgIcon class="select-icon" prefix="icon" name="beian" />
            </Form.Item>
            <Form.Item required>
              <Input
                v-model:value="state.loginInfo.unitName"
                size="large"
                placeholder="单位名称"
                allowClear
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="company" />
                </template>
              </Input>
            </Form.Item>
            <Form.Item required>
              <Input
                v-model:value="state.loginInfo.socialCreditCode"
                size="large"
                placeholder="社会统一信用代码"
                allowClear
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="tongyishehuixinyongdaima" />
                </template>
              </Input>
            </Form.Item>
            <Form.Item :rules="[{ pattern: reg_tel, trigger: 'blur' }]">
              <Input
                v-model:value="state.loginInfo.phoneNumber"
                size="large"
                placeholder="联系人手机号码"
                allowClear
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="shouji" />
                </template>
              </Input>
            </Form.Item>
            <Form.Item required>
              <Input.Password
                v-model:value="state.loginInfo.password"
                size="large"
                placeholder="密码"
                allowClear
              >
                <template #prefix>
                  <SvgIcon class="icon-size" prefix="icon" name="mima" />
                </template>
              </Input.Password>
            </Form.Item>
            <Form.Item required>
              <Input
                style="width: 300px"
                size="large"
                v-model:value="state.loginInfo.captchaCode"
                placeholder="请输入手机验证码"
              >
                <template #prefix>
                  <key-outlined style="margin: 0 15px" />
                </template>
              </Input>
              <Button type="primary" ghost class="captcha-btn" @click="sendCaptchaMsgFn"
                >获取验证码</Button
              >
            </Form.Item>
            <Form.Item>
              <Button
                type="primary"
                html-type="submit"
                shape="round"
                size="large"
                :loading="state.loading"
                block
              >
                注册
              </Button>
            </Form.Item>
          </Form>
        </div>
        <div class="box-btn">
          <Button type="text" @click="changeFormFn(1)">统一社会信用代码登录</Button>
        </div>
      </template>
    </div>
    <!-- tag 页脚 -->
    <div class="page-footer">
      <div class="footer-container">
        <div class="find-error">
          <img src="@/assets/images/red.png" alt="" @click="dang" style="margin-right: 20px" />
          <img
            src="@/assets/images/jiucuo.png"
            alt=""
            @click="findError"
            style="margin-right: 20px"
          />
        </div>
        <div class="right">
          <p>
            <span>联系方式：{{ config.mobile || '(0571) 8770 8967' }}</span>
            <span style="cursor: pointer" @click="beian"
              >备案序号：{{ config.beianxuhao || '浙ICP备19049905号' }}</span
            >
          </p>
          <p>
            <span>网站标识码：{{ config.websiteCode || 3300000005 }}</span>
            <span>{{ config.org || '浙江省卫生健康中心' }}</span>
            <span>网站技术支持请联系：{{ config.suport || 'webmaster@zjwjw.gov.cn' }}</span>
          </p>
          <p>
            <span>{{ config.copyright || 'Copyright© 2000 浙江省卫生健康委员会主办' }}</span>
            <span style="cursor: pointer" @click="zhegongwanganbei">
              <img src="@/assets/images/footericon.png" alt="" style="display: inline" />
              浙公网安备：{{ config.zhegongwanganbei || '33010302001491' }}号</span
            >
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
  import config from '@/config';
  import {
    Form,
    Input,
    message,
    Button,
    Checkbox,
    Select,
    Modal,
    TreeSelect,
    Cascader,
  } from 'ant-design-vue';
  import { UserOutlined, LockOutlined, KeyOutlined } from '@ant-design/icons-vue';
  import { reactive, ref, watch } from 'vue';
  import { useRoute, useRouter } from 'vue-router';
  import { useUserStore } from '@/store/modules/user';
  import { getImageCaptcha, getQrCode, getQrCodeStatus } from '@/api/login';
  import { getDivides, getOrgByType, getOrgAndParentDivide, OrgParams } from '@/api/divide/index';
  import { register, sendCaptchaMsg } from '@/api/login/index';
  import { JSEncrypt } from 'jsencrypt';
  import { SvgIcon } from '@/framework/components/basic/svg-icon';
  import storage, { Storage } from '@/framework/utils/Storage';
  import PopTip from './PopTip'
  /**
   * 数据
   */
  // 通用值
  const route = useRoute();
  const router = useRouter();
  const userStore = useUserStore();
  const reg_tel = /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/;

  // 显示状态
  const activeTab = ref<1 | 2 | 3>(Storage.get('TABKEY', 2));
  const activeForm = ref<1 | 2 | 3>(1);
  const isRemember = ref<boolean>(false);
  const title = ref('单位名称');
  const popTip = ref<InstanceType<typeof PopTip>>()
  const triggerPopTip = (e: Event) => {
    e.stopPropagation()
    popTip.value?.triggerPopTip();
  }
  // 表单数据
  const state = reactive({
    captcha: '',
    loading: false,
    loginInfo: {
      username: Storage.get('USERNAME', ''),
      password: Storage.get('PASSWORD', ''),
      role: Storage.get('ROLE', 'COM'),
      code: '',
      captchaCode: '',
      unitName: '',
      account: '',
      socialCreditCode: '',
      phoneNumber: '',
      pid: null as null | string,
      localArea: null as null | string,
    },
  });
  console.log(Storage.get('USERNAME', ''));
  console.log(Storage.get('PASSWORD', ''));

  // 行政区划
  const dividesList = ref();
  getDivides()
    .then((res) => {
      dividesList.value = res;
    })
    .catch((err) => console.log(err));

  // 上级单位
  const ParentAndChildUnitList = ref();
  // 单位注册区划修改，父级单位置空
  watch(
    () => state.loginInfo.localArea,
    async () => {
      state.loginInfo.pid = null;
      const params: OrgParams = {
        type: 'ORG',
        divideId: state.loginInfo.localArea,
      };
      ParentAndChildUnitList.value = await getOrgByType(params);
    },
  );

  // 登录tab修改
  const changeTabFn = (key: 1 | 2 | 3) => {
    state.loginInfo.username = '';
    state.loginInfo.password = '';
    activeTab.value = key;
    activeForm.value = 1;
    switch (key) {
      case 1:
        title.value = '实验室名称';
        state.loginInfo.role = 'LAB';
        break;
      case 2:
        title.value = '单位名称';
        state.loginInfo.role = 'COM';
        break;
      case 3:
        title.value = '主管部门名称';
        state.loginInfo.role = 'ORG';
    }
  };
  // 表单修改
  const changeFormFn = (key: 1 | 2 | 3) => {
    if (activeTab.value !== 2 && key === 2) return;
    activeForm.value = key;
  };
  // 获取验证码图片
  const getCaptchaImg = async () => {
    try {
      const res = await getImageCaptcha();
      state.loginInfo.code = res.code;
      state.captcha = res.imgBase64;
    } catch (error) {
      message.error('获取验证码失败，请刷新验证码');
    }
  };
  getCaptchaImg();

  const getFirstRouteName = (list: RouteRecordRaw[]) => {
    for (let item of list) {
      if (item.meta?.hideInMenu) {
        continue;
      }
      if (item.children && item.children.length) {
        return getFirstRouteName(item.children);
      } else {
        return item.name;
      }
    }
  };
  // 提交请求
  const submitFn = async () => {
    const {
      username,
      password,
      role,
      code,
      captchaCode,
      unitName,
      account,
      localArea,
      socialCreditCode,
      phoneNumber,
      pid,
    } = state.loginInfo;
    let params;

    // 密码加密
    const jsencrypt = new JSEncrypt();
    jsencrypt.setPublicKey(config.pubKey);
    let encodedPassword;
    if (Storage.get('PASSWORD') && Storage.get('PASSWORD') === password) {
      encodedPassword = password;
    } else {
      encodedPassword = jsencrypt.encrypt(password);
      if (!encodedPassword) return message.warn('加密失败');
    }

    switch (activeForm.value) {
      // 账号登录
      case 1:
        if (username.trim() === '' && password.trim() === '') {
          return message.warning('用户名或密码不能为空！');
        }
        message.loading('登录中...', 0);
        state.loading = true;
        params = {
          username,
          password: encodedPassword,
          code,
          captchaCode,
          role,
        };
        if (isRemember.value) {
          Storage.set('USERNAME', username);
          Storage.set('PASSWORD', encodedPassword);
        } else {
          Storage.set('USERNAME', '');
          Storage.set('PASSWORD', '');
        }
        Storage.set('ROLE', role);
        Storage.set('TABKEY', activeTab.value);
        try {
          await userStore.login(params, activeTab.value).finally(() => {
            state.loading = false;
            message.destroy();
          });

          const menus = userStore.menus;
          const routeName = getFirstRouteName(menus);
          message.success('登录成功！');
          router.replace({
            name: routeName || 'home',
          });
        } catch (error: any) {
          getCaptchaImg();
          Modal.error({
            title: () => '提示',
            content: () => error.message,
          });
        }
        break;
      // 验证码登录
      case 2:
        break;
      // 单位注册
      case 3:
        if (
          localArea?.trim() === '' ||
          pid?.trim() === '' ||
          unitName.trim() === '' ||
          socialCreditCode.trim() === '' ||
          phoneNumber.trim() === '' ||
          password.trim() === '' ||
          captchaCode.trim() === ''
        ) {
          return message.warning('存在未填项,请输入后重试!');
        }
        message.loading('注册中...', 0);
        state.loading = true;
        params = {
          divideId: localArea,
          orgId: pid,
          companyName: unitName,
          creditCode: socialCreditCode,
          securityTel: phoneNumber,
          password: encodedPassword,
          code: captchaCode,
        };
        try {
          await register(params).finally(() => {
            state.loading = false;
            message.destroy();
          });
          message.success('注册成功！');
          state.loginInfo = {
            username: Storage.get('USERNAME', ''),
            password: Storage.get('PASSWORD', ''),
            role: Storage.get('ROLE', 'COM'),
            code: '',
            captchaCode: '',
            unitName: '',
            account: '',
            socialCreditCode: '',
            phoneNumber: '',
            pid: null as null | string,
            localArea: null as null | string,
          };
          activeForm.value = 1;
        } catch (error: any) {
          Modal.error({
            title: () => '提示',
            content: () => error.message,
          });
        }
        break;
    }
  };
  // 获取手机验证码
  const sendCaptchaMsgFn = async () => {
    if (!reg_tel.test(state.loginInfo.phoneNumber)) return message.warn('请正确填写您的手机号码！');
    const params = {
      phone: state.loginInfo.phoneNumber,
    };
    try {
      // todo:临时用
      const res = await sendCaptchaMsg(params);
      alert(`手机验证码： ${res}`);
      console.log('手机验证码', res);
      state.loginInfo.captchaCode = res;
    } catch (err) {
      console.log(err);
    }
  };
  /**
   * 杂
   */
  // 页脚
  const dang = () => {
    // window.open(config.dang || 'https://bszs.conac.cn/sitename?method=show&id=06C71BD04158417DE053012819AC3CC6')
  };
  const findError = () => {
    window.open(
      config.findError || 'https://zfwzgl.www.gov.cn/exposure/jiucuo.html?site_code=3300000068',
    );
  };
  const beian = () => {
    window.open('https://beian.miit.gov.cn/#/Integrated/index');
  };
  const zhegongwanganbei = () => {
    window.open(
      `http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=${
        config.zhegongwanganbei || '33010302001491'
      }`,
    );
  };
</script>

<style scoped lang="less">
  .cascader-edit {
    :deep(.ant-select-selector) {
      padding-top: 10px !important;
      font-size: 16px;
    }
  }

  .icon-size {
    margin: 0 15px;
  }

  .login-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    height: 100vh;
    padding-top: 90px;
    background: url('@/assets/images/BG02.png') no-repeat 0 -100px/100% 100%;

    .page-logo {
      display: flex;
      align-items: center;
      margin-bottom: 30px;

      img {
        height: 100px;
        width: 100px;
        // border-radius: 50%;
        // background-color: #fff;
      }

      .logo-text {
        margin-left: 16px;
        line-height: 64px;
        font-size: 32px;
        font-weight: normal;
        color: #ffffff;
      }
    }

    .page-box {
      width: 520px;
      padding: 30px;
      border-radius: 8px;
      background-color: #ffffff;

      .box-header {
        display: flex;
        justify-content: space-between;

        li {
          display: inline-block;
          width: 30%;
          height: 30px;
          padding-bottom: 40px;
          font-size: 20px;
          text-align: center;
          cursor: pointer;

          &.active {
            color: #4587ff;
            font-weight: bold;
          }
        }

        li:hover {
          color: #4587ff;
        }
      }

      .box-form {
        margin-top: 30px;

        :deep(.ant-input-affix-wrapper) {
          height: 50px;
          border-radius: 30px;
        }

        :deep(.ant-select-selector) {
          height: 50px;
          border-radius: 30px;
          padding-top: 5px;
          padding-left: 62px;
        }

        .captcha {
          float: right;
          height: 50px;
        }

        .captcha-btn {
          float: right;
          width: 135px;
          vertical-align: middle;
        }

        .select-icon {
          position: absolute;
          left: 27px;
          top: 17px;
        }
      }

      .box-btn {
        display: flex;
        justify-content: space-around;
        align-items: center;
      }

      :deep(.ant-btn) {
        height: 50px;
      }
    }

    .page-footer {
      position: absolute;
      bottom: 0;
      height: 100px;
      width: 100vw;
      background-color: #eee;

      .footer-container {
        margin: 0 auto;
        height: 80px;
        margin-top: 10px;
        width: 90%;
        display: flex;
        justify-content: center;

        .find-error {
          border-right: 1px solid #aaa;

          // width: 220px;
          img {
            display: inline;
          }
        }

        .right {
          padding-left: 20px;

          p {
            line-height: 18px;
            margin: 5px;
            text-align: center;

            span {
              display: inline-block;
              margin-right: 30px;
            }
          }
        }
      }
    }
  }
</style>
<template>
  <div class="login-box">
    <div class="login-logo">
      <img src="@/assets/images/logo-min.png" alt="" height="100" width="100" />
      <h1 class="logo-text">基于国产操作系统的病原微生物实验室备案系统</h1>
    </div>
    <div class="sign-content">
      <ul class="sign-header">
        <li :class="{ active: active === 1 }" @click="show(1)">省主管部门</li>
        <li :class="{ active: active === 2 }" @click="show(2)">市主管部门</li>
        <li :class="{ active: active === 3 }" @click="show(3)">单位</li>
        <li :class="{ active: active === 4 }" @click="show(4)">实验室</li>
      </ul>
      <!-- <div class="sign-form" v-if="active != 4 || isDev"> -->
      <div class="sign-form">
        <a-form layout="horizontal" :model="state.formInline" @submit.prevent="handleSubmit">
          <a-form-item>
            <a-input v-model:value="state.formInline.username" size="large" :placeholder="username" allowClear>
              <template #prefix><user-outlined type="user" /></template>
            </a-input>
          </a-form-item>
          <a-form-item>
            <a-input-password v-model:value="state.formInline.password" size="large" :placeholder="password">
              <template #prefix><lock-outlined type="user" /></template>
            </a-input-password>
          </a-form-item>
          <a-form-item>
            <a-input style="width: 300px" size="large" v-model:value="state.formInline.captchaCode"
              placeholder="请输入验证码">
              <template #prefix>
                <SafetyCertificateOutlined />
              </template>
            </a-input>
            <img :src="state.captcha" alt="验证码" style="display: inline-block; height: 40px; margin-left: 10px"
              height="40" @click="getCaptchaImg" />
          </a-form-item>
          <a-form-item>
            <a-button type="primary" html-type="submit" size="large" :loading="state.loading" block>
              登录
            </a-button>
          </a-form-item>
        </a-form>
      </div>
      <!-- <div class="sign-form" v-if="active == 4 && !isDev">
        <div
          v-loading="qrCodeLoading"
          loading-tip="二维码加载中"
          style="height: 200px; position: relative"
        >
          <img
            :src="qrCode"
            width="200"
            style="margin: 0 auto"
            :class="{ 'img-filter': scanType == 9 }"
          />
          <p v-if="scanType == 9" class="mid-text">扫描成功</p>
        </div>
        <p style="text-align: center; color: #2768a3; margin-top: 15px">微信扫描二维码授权登录</p>
      </div> -->
    </div>
    <div class="login-footer">
      <div class="footer-container">
        <div class="find-error">
          <img src="@/assets/images/red.png" alt="" @click="dang" style="margin-right: 20px" />
          <img src="@/assets/images/jiucuo.png" alt="" @click="findError" style="margin-right: 20px" />
        </div>
        <div class="right">
          <p>
            <span>联系方式：{{ config.mobile || '(0571) 8770 8967' }}</span>
            <span style="cursor: pointer" @click="beian">备案序号：{{ config.beianxuhao || '浙ICP备19049905号' }}</span>
          </p>
          <p>
            <span>网站标识码：{{ config.websiteCode || 3300000005 }}</span>
            <span>{{ config.org || '浙江省卫生健康中心' }}</span>
            <span>网站技术支持请联系：{{ config.suport || 'webmaster@zjwjw.gov.cn' }}</span>
          </p>
          <p>
            <span>{{ config.copyright || 'Copyright© 2000 浙江省卫生健康委员会主办' }}</span>
            <span style="cursor: pointer" @click="zhegongwanganbei">
              <img src="@/assets/images/footericon.png" alt="" style="display: inline" />
              浙公网安备：{{ config.zhegongwanganbei || '33010302001491' }}号</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref } from 'vue';
import { message, Modal } from 'ant-design-vue';
import { UserOutlined, LockOutlined, SafetyCertificateOutlined } from '@ant-design/icons-vue';
import { useUserStore } from '@/store/modules/user';
import { getImageCaptcha, getQrCode, getQrCodeStatus } from '@/api/login';
import { JSEncrypt } from 'jsencrypt';
// import { SvgIcon } from '@/framework/components/basic/svg-icon';
import config from '@/config';
import { useRoute, useRouter } from 'vue-router';
const isDev = process.env.NODE_ENV === 'development';
const state = reactive({
  captcha: '',
  loading: false,
  // captcha: '',
  formInline: {
    username: '',
    password: '',
    // verifyCode: '',
    // captchaId: '',
    role: 'LAB',
    code: '',
    captchaCode: '',
  },
});

const route = useRoute();
const router = useRouter();
const userStore = useUserStore();

const handleSubmit = async () => {
  const { username, password, captchaCode } = state.formInline;
  if (username.trim() == '' || password.trim() == '') {
    return message.warning('用户名或密码不能为空！');
  }
  // if (captchaCode.trim() == '') {
  //   return message.warning('验证码不能为空')
  // }
  message.loading('登录中...', 0);
  state.loading = true;
  console.log(state.formInline);
  const jsencrypt = new JSEncrypt()
  jsencrypt.setPublicKey(config.pubKey)
  const encodedPassword = jsencrypt.encrypt(state.formInline.password)
  // const encodedPassword = state.formInline.password;
  const params = {
    username: state.formInline.username,
    captchaCode: state.formInline.captchaCode,
    code: state.formInline.code,
    password: '',
    role: state.formInline.role,
  };
  if (encodedPassword) {
    params.password = encodedPassword;
  } else {
    return message.warn('加密失败');
  }
  try {
    await userStore.login(params, active.value).finally(() => {
      state.loading = false;
      message.destroy();
    });
    message.success('登录成功！');
    if (active.value == 4) {
      setTimeout(
        () =>
          router.replace({
            name: 'home',
          }),
        500,
      );
    } else {
      setTimeout(() => router.replace((route.query.redirect as string) ?? '/'));
    }
  } catch (error: any) {
    getCaptchaImg();
    Modal.error({
      title: () => '提示',
      content: () => error.message,
    });
  }
};
const getCaptchaImg = async () => {
  try {
    const res = await getImageCaptcha();
    state.formInline.code = res.code;
    state.captcha = res.imgBase64;
  } catch (error) {
    message.error('获取验证码失败，请刷新验证码');
  }
};
getCaptchaImg();
let active = ref(1);
let username = ref('请输入实验室账号');
let password = ref('请输入密码');
const qrCode = ref<null | string>(null);
const qrCodeLoading = ref(false);
const scanType = ref(0); // 0 未扫描 1 已扫描 9 已授权
let qrCodeScene = '';
let timer: null | NodeJS.Timer = null;
let notAllowAlerted = false; // 弹出过未授权
const setTimer = () => {
  if (timer) {
    clearInterval(timer);
  }
  timer = setInterval(() => {
    getQrCodeStatus({ scene: qrCodeScene }).then((res) => {
      console.log(res, 'status');
      if (res.status == 209) {
        scanType.value = 9;
        timer && clearInterval(timer);
        console.log('登录成功', res.token);
        userStore.afterLogin().then((res) => {
          setTimeout(() =>
            router.replace({
              name: 'home',
            }),
          );
        });
      } else if (res.status == 205) {
        message.info('二维码失效');
        expertLoginEvent();
      } else if (res.status == 207) {
        // 未授权
        if (!notAllowAlerted) {
          message.info('未授权');
          notAllowAlerted = true;
        }
      } else if (res.status == 201) {
        // 已扫码
        // 改扫描成功图片
      }
    });
  }, 2000);
};
const expertLoginEvent = async () => {
  qrCodeLoading.value = true;
  try {
    let res = await getQrCode();
    if (res.code == 200) {
      qrCode.value = res.data.imgBase64;
      qrCodeScene = res.data.scene;
      setTimer();
    }
  } catch (error) {
    message.error('请刷新页面重新获取二维码');
  } finally {
    qrCodeLoading.value = false;
  }
};
const show = (value) => {
  state.formInline.username = '';
  state.formInline.password = '';
  active.value = value;
  if (timer) {
    clearInterval(timer);
  }
  qrCode.value = null; // 二维码置空
  scanType.value = 0;
  switch (value) {
    case 1:
      username.value = '请输入实验室账号';
      state.formInline.role = 'LAB';
      break;
    case 2:
      username.value = '请输入单位账号';
      state.formInline.role = 'COM';
      break;
    case 3:
      username.value = '请输入主管部门账号';
      state.formInline.role = 'ORG';
      break;
    case 4:
      username.value = '请输入专家账号';
      state.formInline.role = '';
      // !isDev && expertLoginEvent(); // 开发环境不用二维码登录
      break;
    default:
      break;
  }
};
const dang = () => {
  // window.open(config.dang || 'https://bszs.conac.cn/sitename?method=show&id=06C71BD04158417DE053012819AC3CC6')
};
const findError = () => {
  window.open(
    config.findError || 'https://zfwzgl.www.gov.cn/exposure/jiucuo.html?site_code=3300000068',
  );
};
const beian = () => {
  window.open('https://beian.miit.gov.cn/#/Integrated/index');
};
const zhegongwanganbei = () => {
  window.open(
    `http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=${config.zhegongwanganbei || '33010302001491'
    }`,
  );
};
</script>

<style lang="less" scoped>
.login-box {
  display: flex;
  width: 100vw;
  height: 100vh;
  padding-top: 180px;
  background: url('@/assets/images/BG02.png');
  background-size: 100% 100%;
  background-position: 0 -100px;
  flex-direction: column;
  align-items: center;

  .login-logo {
    display: flex;
    margin-bottom: 30px;
    align-items: center;

    .svg-icon {
      font-size: 48px;
    }
  }

  :deep(.ant-form) {
    width: 400px;
    margin: 0 auto;

    .ant-col {
      width: 100%;
    }

    .ant-form-item-label {
      padding-right: 6px;
    }
  }
}

.logo-text {
  font-size: 32px;
  color: #ffffff;
  line-height: 64px;
  margin-left: 16px;
  font-weight: normal;
}

.sign-content {
  width: 480px;
  padding: 0 40px;
  margin: 0 auto;
  background: #ffffff;
  border-radius: 8px;
}

.sign-header {
  padding: 20px 0;

  li {
    display: inline-block;
    width: 25%;
    height: 40px;
    font-size: 20px;
    text-align: center;
    line-height: 20px;
    cursor: pointer;
  }

  li:hover {
    color: #4587ff;
  }
}

.sign-form {
  margin: 0 auto;
  margin-bottom: 40px;
}

.active {
  color: #4587ff;
  font-weight: bold;
}

.mid-text {
  font-size: 18px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

.img-filter {
  filter: blur(3px);
}

.login-footer {
  position: absolute;
  bottom: 0;
  height: 100px;
  width: 100vw;
  background-color: #eee;
}

.footer-container {
  margin: 0 auto;
  height: 80px;
  margin-top: 10px;
  width: 90%;
  display: flex;
  justify-content: center;

  .find-error {
    border-right: 1px solid #aaa;

    // width: 220px;
    img {
      display: inline;
    }
  }

  .right {
    padding-left: 20px;

    p {
      line-height: 18px;
      margin: 5px;
      text-align: center;

      span {
        display: inline-block;
        margin-right: 30px;
      }
    }
  }
}
</style>
<template>
  <LoginNew></LoginNew>
</template>
<script setup lang="tsx">
import LoginNew from './index-new.vue'
</script>
<style lang="less" scoped>

</style>window._AMapSecurityConfig = {
    securityJsCode: '8d207ebfabe1f39e026609fd03ec1f39',
}
import {App} from 'vue';

import VueAMap, {initAMapApiLoader} from '@vuemap/vue-amap';
import '@vuemap/vue-amap/dist/style.css'

initAMapApiLoader({
    // key: '3764a11b28b71df809bdb998a9bb6278'
    key: '4de8621cf96dbe69b9b16be70c1cfa4f'
})

/**
 * 注册全局自定义指令
 * @param app
 */
export function setupAmap(app: App<Element>) {
    app.use(VueAMap)
}
import type {App} from 'vue';

import {AButton} from '@/framework/components/basic/button/index';

import {
    Tabs,
    Modal,
    Table,
    Menu,
    Input,
    Form,
    Card,
    Checkbox,
    Radio,
    Col,
    Row,
    Select,
    Space as ASpace,
    Steps as ASteps,
    Cascader as ACascader,
    Switch as ASwitch,
    DatePicker,
    Tree,
    Dropdown,
} from 'ant-design-vue';

import 'ant-design-vue/dist/antd.css';
import 'dayjs/locale/zh-cn';


export function setupAntd(app: App<Element>) {
    app.component('AButton', AButton);

    app
        .use(ASwitch)
        .use(ACascader)
        .use(ASteps)
        .use(ASpace)
        .use(Tabs)
        .use(Form)
        .use(Input)
        .use(Modal)
        .use(Table)
        .use(Menu)
        .use(Card)
        .use(Checkbox)
        .use(Radio)
        .use(Col)
        .use(Row)
        .use(Select)
        .use(DatePicker)
        .use(Tree)
        .use(Dropdown)
}
import 'virtual:windi.css';
import 'virtual:windi-devtools';
import 'virtual:svg-icons-register';
import '@/styles/index.less';

// 引入静态资源
export function setupAssets() {}

import type { App } from 'vue';
import CKEditor from '@ckeditor/ckeditor5-vue'
 
export function setupCKEditor(app: App<Element>) {
  app.use(CKEditor)
}import { App } from 'vue';

import { SvgIcon } from '@/framework/components/basic/svg-icon';
import { IconFont } from '@/framework/components/basic/iconfont';

/**
 * 全局注册自定义组件
 * @param app
 */
export function setupCustomComponents(app: App) {
  app.component(SvgIcon.name, SvgIcon);
  app.component(IconFont.name, IconFont);
}
import { App } from 'vue';

import { setupPermissionDirective } from "@/framework/directives/permission";
import { setupLoadingDirective } from "@/framework/directives/loading";

/**
 * 注册全局自定义指令
 * @param app
 */
export function setupDirectives(app: App) {
  // 权限控制指令（演示）
  setupPermissionDirective(app)
  // 加载中指令
  setupLoadingDirective(app)
}
import { App } from 'vue';

import hasPermission from '@/framework/utils/permission/hasPermission';
import useModal from '@/framework/components/core/draggable-modal';
import useCustomModal from '@/components/custom-modal/useCustomModal';
import permission from '@/framework/core/permission/';
import useDict, { dict } from '@/framework/core/dict/index';
import useDrawer from '@/framework/components/core/drawer';

/**
 * 注册全局方法
 * @param app
 */
export function setupGlobalMethods(app: App) {
  app.use(hasPermission);
  app.use(permission);
  // app.use(useFormModal)
  app.use(useModal);
  app.use(useCustomModal);
  app.use(useDrawer);
  app.use(useDict);
  // 全局挂载Reflect反射对象,以便在vue模板中使用
  app.config.globalProperties.Reflect = Reflect;
}
export {setupAntd} from '@/plugins/antd';
export {setupAssets} from '@/plugins/assets';
export {setupDirectives} from '@/plugins/directives';
export {setupCustomComponents} from '@/plugins/customComponents';
export {setupGlobalMethods} from '@/plugins/globalMethods';
export {setupVxeTable} from '@/plugins/vxe-table';
export {setupCKEditor} from '@/plugins/ckeditor';

export {setupAmap} from '@/plugins/amap'import type { App } from 'vue';
import 'xe-utils'
import VXETable from 'vxe-table'
import 'vxe-table/lib/style.css'
import VXETablePluginAntd from 'vxe-table-plugin-antd'
import 'vxe-table-plugin-antd/dist/style.css'
import { i18n } from "@/locales";

VXETable.setup({
  // @ts-ignore
  i18n: (key,args) => i18n.global.t(key,args)
})

VXETable.use(VXETablePluginAntd)

export function setupVxeTable(app: App<Element>) {
  app.use(VXETable)
}
// 动态设置资源路径（目的是给后端人员做服务端渲染，例如JSP动态资源路由）
// __webpack_public_path__ = import.meta.env.NODE_ENV == 'development' ? '' : window.baseUrl
// generate components map
export const constantRouterComponents = {};

// auto load
const modulesFiles = import.meta.globEager('./**/*.ts');

Object.keys(modulesFiles).forEach((path) => {
  if (path.startsWith('./index.')) return;
  const value = modulesFiles[path].default;

  // mouted
  Object.keys(value).forEach((ele) => {
    constantRouterComponents[ele] = value[ele];
  });
});

console.log("constantRouterComponents", constantRouterComponents);
export default {
  // 'views/demos/form/rule-form.vue': () => import('@/pages/demos/form/rule-form/index.vue'), // 验证表单
  // 'views/demos/icons/Iconfont.vue': () => import('@/pages/demos/icons/Iconfont.vue'), // 自定义图标
  // 'views/demos/tables/lol-table/index.vue': () =>
  //   import('@/pages/demos/tables/lol-table/index.vue'), // lol
  // 'views/demos/tables/wzry-table/index.vue': () =>
  //   import('@/pages/demos/tables/wzry-table/index.vue'), // wzry
  // 'views/demos/tables/search-table/index.vue': () =>
  //   import('@/pages/demos/tables/search-table/index.vue'), // search-table
  // 'views/demos/button.vue': () => import('@/pages/demos/button.vue'), // 自定义按钮
  // 'views/demos/custom-modal.vue': () => import('@/pages/demos/custom-modal.vue'), // 自定义模态框
};
export const LOGIN_NAME = 'Login';

export const REDIRECT_NAME = 'Redirect';

export const PARENT_LAYOUT_NAME = 'ParentLayout';

export const PAGE_NOT_FOUND_NAME = 'PageNotFound';

// 路由白名单
export const whiteNameList = [LOGIN_NAME, 'icons', 'error', 'error-404', 'sso'] as const; // no redirect whitelist

export type WhiteNameList = typeof whiteNameList;

export type WhiteName = typeof whiteNameList[number];
import 'nprogress/css/nprogress.css'; // 进度条样式
import type { App } from 'vue';
import { createRouter, createWebHashHistory, RouteRecordRaw } from 'vue-router';

import { createRouterGuards } from './router-guards';

import staticModules from './staticModules/';
import outsideLayout from './outsideLayout';
import { whiteNameList } from './constant';

export const routes: Array<RouteRecordRaw> = [
  {
    path: '/',
    name: 'Layout',
    redirect: '/home', // TODO 首页地址
    component: () => import(/* webpackChunkName: "layout" */ '@/layout/layout-module/index.vue'),
    meta: {
      title: '首页',
    },
    children: [...staticModules],
  },
  // Layout之外的路由
  ...outsideLayout,
];

export const router = createRouter({
  // process.env.BASE_URL
  history: createWebHashHistory(''),
  routes,
});

// reset router
export function resetRouter() {
  router.getRoutes().forEach((route) => {
    const { name } = route;
    if (name && !whiteNameList.some((n) => n === name)) {
      router.hasRoute(name) && router.removeRoute(name);
    }
  });
}

export async function setupRouter(app: App) {
  // 创建路由守卫
  createRouterGuards(router, whiteNameList);

  app.use(router);

  // 路由准备就绪后挂载APP实例
  await router.isReady();
}
export default router;
import { RouteRecordRaw } from "vue-router";
export let modulesRoutes: Array<RouteRecordRaw> = [];
const modulesFiles = import.meta.globEager("/src/modules/**/router/*.ts");
const getModuleName = (path: string) => {
  return path.split('/')[3]
};
Object.keys(modulesFiles).forEach((path) => {
  const routes = modulesFiles[path].default;
  const tree = (node) => {
    if (node.children) {
      node.children.forEach(child => tree(child));
    }
    node.meta.moduleName = getModuleName(path);
  };
  routes.forEach(route => {
    tree(route);
    modulesRoutes.push(route);
  });
});
import type { RouteRecordRaw } from 'vue-router';
import { LOGIN_NAME } from '@/router/constant';

/**
 * layout布局之外的路由
 */
export const LoginRoute: RouteRecordRaw = {
  path: '/login',
  name: LOGIN_NAME,
  component: () => import(/* webpackChunkName: "login" */ '@/pages/login/index.vue'),
  meta: {
    title: '登录',
  },
};

export default [LoginRoute];
import { isNavigationFailure, Router } from 'vue-router';
import { useUserStore } from '@/store/modules/user';
import { useKeepAliveStore } from '@/store/modules/keepAlive';
import NProgress from 'nprogress'; // progress bar
import { ACCESS_TOKEN_KEY } from '@/framework/enums/cacheEnum';
import { Storage } from '@/framework/utils/Storage';
import type { WhiteNameList } from './constant';
import { LOGIN_NAME, REDIRECT_NAME } from './constant';

NProgress.configure({ showSpinner: false }); // NProgress Configuration

const defaultRoutePath = '/home';
// const defaultRoutePath = '/dashboard/welcome';

export function createRouterGuards(router: Router, whiteNameList: WhiteNameList) {
  router.beforeEach(async (to, from, next) => {
    const userStore = useUserStore();
    NProgress.start(); // start progress bar
    // const token = Storage.get(ACCESS_TOKEN_KEY, null);
    const token = Storage.getCookie('token')
    if (token) {
      if (to.name === LOGIN_NAME) {
        next({ path: defaultRoutePath });
        NProgress.done();
      } else {
        const hasRoute = router.hasRoute(to.name!);
        // 如果不需要每次切换路由获取最新的动态路由，可把下面注释放开
        if (userStore.menus.length === 0) {
          // 从后台获取菜单
          await userStore.afterLogin();
          if (!hasRoute) {
            // 请求带有 redirect 重定向时，登录自动重定向到该地址
            const redirect = decodeURIComponent((from.query.redirect || '') as string);
            if (to.path === redirect) {
              next({ ...to, replace: true });
            } else {
              // 跳转到目的路由
              next({ ...to, replace: true });
            }
          }

          if (whiteNameList.some((n) => n === to.name) || hasRoute) {
            // 在免登录名单，直接进入
            next();
          }
        } else {
          next();
        }
      }
    } else {
      // not login
      if (whiteNameList.some((n) => n === to.name)) {
        // 在免登录名单，直接进入
        next();
      } else {
        // next({ name: LOGIN_NAME, query: { redirect: to.fullPath }, replace: true });
        next({ name: LOGIN_NAME, replace: true });
        NProgress.done(); // if current page is login will not trigger afterEach hook, so manually handle it
      }
    }
  });

  router.afterEach((to, _, failure) => {
    const keepAliveStore = useKeepAliveStore();

    if (isNavigationFailure(failure)) {
      console.error('failed navigation', failure);
    }
    // 在这里设置需要缓存的组件名称
    const componentName = to.matched.find((item) => item.name == to.name)?.components?.default.name;
    // 判断当前页面是否开启缓存，如果开启，则将当前页面的 componentName 信息存入 keep-alive 全局状态
    if (to.meta?.keepAlive) {
      // 需要缓存的组件
      if (componentName) {
        keepAliveStore.add(componentName);
      } else {
        console.warn(
          `${to.fullPath}页面组件的keepAlive为true但未设置组件名，会导致缓存失效，请检查`,
        );
      }
    } else {
      // 不需要缓存的组件
      if (componentName) {
        keepAliveStore.remove(componentName);
      }
    }
    // 如果进入的是 Redirect 页面，则也将离开页面的缓存清空
    if (to.name == REDIRECT_NAME) {
      componentName && keepAliveStore.remove(componentName);
    }
    NProgress.done(); // finish progress bar
  });

  router.onError((error) => {
    console.log(error, '路由错误');
  });
}
import RouterView from '@/layout/routerView/index.vue';
import type { RouteRecordRaw } from 'vue-router';
import { REDIRECT_NAME } from '@/router/constant';
import router from '@/router';

/**
 * 主要用于刷新当前页面
 */
export const REDIRECT_ROUTE: RouteRecordRaw = {
  path: '/redirect',
  component: RouterView,
  name: 'RedirectTo',
  meta: {
    title: REDIRECT_NAME,
    hideInBreadcrumb: true,
    hideInMenu: true,
  },
  children: [
    {
      path: '/redirect/:path(.*)',
      name: REDIRECT_NAME,
      component: RouterView,
      meta: {
        title: REDIRECT_NAME,
        hideInMenu: true,
      },
      beforeEnter: (to) => {
        const { params, query } = to;
        const { path, _redirect_type = 'path' } = params;

        Reflect.deleteProperty(params, '_redirect_type');
        Reflect.deleteProperty(params, 'path');

        const _path = Array.isArray(path) ? path.join('/') : path;
        setTimeout(() => {
          if (_redirect_type === 'name') {
            router.replace({
              name: _path,
              query,
              params,
            });
          } else {
            router.replace({
              path: _path.startsWith('/') ? _path : '/' + _path,
              query,
            });
          }
        });
        return true;
      },
    },
  ],
};
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
import { t } from '@/framework/hooks/useI18n';

const moduleName = 'dashboard';

const routes: Array<RouteRecordRaw> = [
  {
    path: '/dashboard',
    name: moduleName,
    redirect: '/dashboard/welcome',
    component: RouterView,
    meta: {
      title: t('routes.dashboard.dashboard'),
      icon: 'icon-yibiaopan',
    },
    children: [
      {
        path: 'welcome',
        name: `${moduleName}-welcome`,
        meta: {
          title: t('routes.dashboard.workbench'),
          icon: 'icon-home',
        },
        component: () =>
          import(/* webpackChunkName: "dashboard-welcome" */ '@/pages/dashboard/welcome/index.vue'),
      },
    ],
  },
];

export default routes;
import type { RouteRecordRaw } from 'vue-router';
import { PAGE_NOT_FOUND_NAME } from '@/router/constant';
import RouterView from '@/layout/routerView/index.vue';

const moduleName = 'error';

export const notFound: RouteRecordRaw = {
  path: '/:pathMatch(.*)*',
  name: 'NotFound',
  redirect: '/error/404',
  component: () => import(/* webpackChunkName: "404" */ '@/pages/error/404.vue'),
  meta: {
    title: '',
    hideInMenu: true
  }
};

export const errorRoute: RouteRecordRaw = {
  path: '/error',
  name: moduleName,
  redirect: '/error/404',
  component: RouterView,
  meta: {
    title: '错误页',
    icon: 'EditOutlined',
    hideInMenu: true,
    hideInTabs: true,
  },
  children: [
    {
      path: '404',
      name: PAGE_NOT_FOUND_NAME,
      meta: {
        title: '404',
        icon: 'UserOutlined',
        hideInMenu: true,
      },
      component: () => import(/* webpackChunkName: "404" */ '@/pages/error/404.vue'),
    },
  ],
};

export default [errorRoute, notFound];
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';

const routes: Array<RouteRecordRaw> = [
  {
    path: 'http://buqiyuan.gitee.io/vite-vue3-lowcode/',
    name: 'http://buqiyuan.gitee.io/vite-vue3-lowcode/',
    component: RouterView,
    meta: {
      title: 'H5低代码平台',
      icon: 'icon-externa-link',
    },
  },
];

export default routes;
import type { RouteRecordRaw } from 'vue-router';
import RouterView from '@/layout/routerView/index.vue';
import { t } from '@/framework/hooks/useI18n';

const moduleName = 'home';

const routes: Array<RouteRecordRaw> = [
  {
    path: '/home',
    name: moduleName,
    component: () => import('../../pages/home/index.vue'),
    meta: {
      title: t('routes.home.home'),
      icon: 'icon-home'
    }
  },
  {
    path: '/sso',
    name: 'sso',
    component: () => import('../../pages/home/sso.vue'),
    meta: {
      title: '单点登录',
      icon: 'icon-home',
      hideInMenu: true
    }
  }
];
export default routes;
// import dashboard from './dashboard';
import home from './home';
// import externaLink from './externa-link';

export default [ ...home];
import type { App } from 'vue';
import { createPinia } from 'pinia';

const store = createPinia();

export function setupStore(app: App<Element>) {
  app.use(store);
}

export { store };
import { defineStore } from 'pinia'

export const useCms = defineStore('cms', {
  state: () => {
    return {
      codeSon: '9d897d4o',
      dynamicField: {}
    }
  },

  getters: {
    getCodeSon(): string {
      return this.codeSon
    }
  },
  actions: {
    setCodeSon(val: string) {
      this.codeSon = val
    },
    setDynamicField(val) {
      this.dynamicField = val;
      console.log(this.dynamicField, '仓库pinia')
    }
  },
})const lab = [
  'home',
  'labInfo',
  'labInfoDetail',
  'labActivityRecord',
  'labActivityRecordAdd',
  'labPersonManagement',
  'labDeviceManagement',
];
export const labFuncs = lab.map((i) => ({ name: i }));
const company = [
  'home',
  'companyInfo',
  'companyInfoDetail',
  'companyLabInfoApprove',
  'companyLabManagement',
  'deviceMaintainApprove',
  'labActivityApprove',
  'labActivityApproveDetail',
  'companyLabInfoApproveDetail',
  'companyRecordLicense',
  'companyRecordLicenseDetail',
  'companySecurityManagementFiles',
  'companyInfoPublish',
  'companyInfoPublishDetail',
  'labManagement',
];
export const companyFuncs = company.map((i) => ({ name: i }));

const cityOrg = [
  'home',
  'infoApprove',
  'cityCompanyInfoApprove',
  'cityCompanyInfoApproveDetail',
  'cityLabInfoApprove',
  'cityLabInfoApproveDetail',
  'cityRecordLicense',
  'cityRecordLicenseDetail',
  'cityInfoPublish',
  'cityInfoPublishDetail',
  'cityLabActivity',
  'cityLabActivityDetail',
  'cityStatistics',
  'cityCompanyStatistics',
  'cityLabStatistics',
  'cityDeviceStatistics',
  'cityPersonStatistics',
  'cityUserManagement',
];
export const cityOrgFuncs = cityOrg.map((i) => ({ name: i }));

const provinceOrg = [
  'home',
  'infoApprove',
  'provinceCompanyInfoApprove',
  'provinceCompanyInfoApproveDetail',
  'provinceLabInfoApprove',
  'provinceLabInfoApproveDetail',
  'provinceInfoPublishApprove',
  'provinceInfoPublishApproveDetail',

  'provinceRecordLicense',
  'provinceRecordLicenseDetail',
  'provinceInfoPublish',
  'provinceInfoPublishDetail',
  'provinceLabActivity',
  'provinceLabActivityDetail',

  'provinceStatistics',
  'provinceCompanyStatistics',
  'provinceLabStatistics',
  'provinceDeviceStatistics',
  'provincePersonStatistics',
  'provinceMedicalCommunityStatistics',

  'systemManagement',
  'userManagement',
  'publishCategoryManagement',
  'publishCategoryDetail',
  'cms-enclosureManagement', // 可能不需要的页面
  'cms-formmodelManagement',
  'formappearManagement',
  'fieldAppear', // end
  'filesAndRuleManagement',
  'companyProperty',
  'bioSafeLicense',
];
export const provinceOrgFuncs = provinceOrg.map((i) => ({ name: i }));
import { defineStore } from 'pinia';
import { store } from '@/store';
interface KeepAliveState {
  /** 需要缓存的路由组件名称列表 */
  list: string[];
}

export const useKeepAliveStore = defineStore({
  id: 'keep-alive',
  state: (): KeepAliveState => ({
    list: [],
  }),
  actions: {
    add(name: string | string[]) {
      if (typeof name === 'string') {
        !this.list.includes(name) && this.list.push(name);
      } else {
        name.map((v) => {
          v && !this.list.includes(v) && this.list.push(v);
        });
      }
    },
    remove(name: string | string[]) {
      if (typeof name === 'string') {
        this.list = this.list.filter((v) => {
          return v !== name;
        });
      } else {
        this.list = this.list.filter((v) => {
          return !name.includes(v);
        });
      }
    },
    clear() {
      this.list = [];
    },
  },
});

// 在组件setup函数外使用
export function useKeepAliveStoreWithOut() {
  return useKeepAliveStore(store);
}
import type { LocaleType } from '@/locales/config';
import { defineStore } from 'pinia';
import { store } from '@/store';
import { LOCALE_KEY } from '@/framework/enums/cacheEnum';
import { Storage } from '@/framework/utils/Storage';

interface LocaleState {
  locale: LocaleType;
}

export const useLocaleStore = defineStore({
  id: 'locale',
  state: (): LocaleState => ({
    locale: Storage.get(LOCALE_KEY, 'zh_CN'),
  }),
  getters: {
    getLocale(): LocaleType {
      return this.locale ?? 'zh_CN';
    },
  },
  actions: {
    setLocale(locale: LocaleType) {
      this.locale = locale;
      Storage.set(LOCALE_KEY, locale);
    },
  },
});

// Need to be used outside the setup
export function useLocaleStoreWithOut() {
  return useLocaleStore(store);
}
import { IS_LOCKSCREEN } from '@/framework/enums/cacheEnum';
import { defineStore } from 'pinia';
import { store } from '@/store';
import { Storage } from '@/framework/utils/Storage';

// 长时间不操作默认锁屏时间
const initTime = 60 * 60;

const isLock = Storage.get(IS_LOCKSCREEN, false);

export type LockscreenState = {
  isLock: boolean; // 是否锁屏
  lockTime: number;
};

export const useLockscreenStore = defineStore({
  id: 'lockscreen',
  state: (): LockscreenState => ({
    isLock: isLock === true, // 是否锁屏
    lockTime: isLock == 'true' ? initTime : 0,
  }),
  actions: {
    setLock(isLock) {
      this.isLock = isLock;
      Storage.set(IS_LOCKSCREEN, this.isLock);
    },
    setLockTime(lockTime = initTime) {
      this.lockTime = lockTime;
    },
  },
});
// 在组件setup函数外使用
export function useLockscreenStoreWithOut() {
  return useLockscreenStore(store);
}
import { defineStore } from "pinia";
export type SystemInfo = {
  id: string;
  type: "Local" | "SSO";
  name: string;
  redirect?: string;
  icon?: string;
  modules?: string[];
}

interface ModulesViewState {
  curModuleName: string;
  curModule: SystemInfo | null;
}

export const useModulesViewStore = defineStore({
  id: 'modules-view',
  state: (): ModulesViewState => ({
    curModuleName: 'default',
    curModule:null
  }),
  getters:{},
  actions:{
    setCurModule(module:SystemInfo){
      this.curModule = module;
      this.curModuleName = module.name
    }
  },
})
import type { RouteLocationNormalized } from 'vue-router';
import { defineStore } from 'pinia';
import { store } from '@/store';
import { TABS_ROUTES } from '@/framework/enums/cacheEnum';
import router from '@/router';
import { useKeepAliveStore } from './keepAlive';
import { LOGIN_NAME, REDIRECT_NAME, PAGE_NOT_FOUND_NAME } from '@/router/constant';

interface TabsViewState {
  /** 标签页 */
  tabsList: RouteLocationNormalized[];
}

// 不需要出现在标签页中的路由
export const blackList = [REDIRECT_NAME, LOGIN_NAME, PAGE_NOT_FOUND_NAME] as const;

export const useTabsViewStore = defineStore({
  id: 'tabs-view',
  state: (): TabsViewState => ({
    tabsList: [],
  }),
  getters: {
    getTabsList: (state) => {
      return state.tabsList.filter((item) => {
        return !item.meta?.hideInTabs && router.hasRoute(item.name!);
      });
    },
  },
  actions: {
    /** 将已关闭的标签页的组件从keep-alive中移除 */
    delCompFormClosedTabs(closedTabs: RouteLocationNormalized[]) {
      const keepAliveStore = useKeepAliveStore();
      const routes = router.getRoutes();
      const compNames = closedTabs.reduce<string[]>((prev, curr) => {
        if (curr.name && router.hasRoute(curr.name)) {
          const componentName = routes.find((n) => n.name === curr.name)?.components?.default?.name;
          componentName && prev.push(componentName);
        }
        return prev;
      }, []);
      keepAliveStore.remove(compNames);
    },
    /** 初始化标签页 */
    initTabs(routes) {
      this.tabsList = routes;
    },
    /** 添加标签页 */
    addTabs(route): boolean {
      if (blackList.includes(route.name)) return false;
      const isExists = this.tabsList.some((item) => item.fullPath == route.fullPath);
      if (!isExists) {
        this.tabsList.push(route);
      }
      return true;
    },
    /** 关闭左侧 */
    closeLeftTabs(route) {
      const index = this.tabsList.findIndex((item) => item.fullPath == route.fullPath);
      this.delCompFormClosedTabs(this.tabsList.splice(0, index));
    },
    /** 关闭右侧 */
    closeRightTabs(route) {
      const index = this.tabsList.findIndex((item) => item.fullPath == route.fullPath);
      this.delCompFormClosedTabs(this.tabsList.splice(index + 1));
    },
    /** 关闭其他 */
    closeOtherTabs(route) {
      const targetIndex = this.tabsList.findIndex((item) => item.fullPath === route.fullPath);
      if (targetIndex !== -1) {
        const current = this.tabsList.splice(targetIndex, 1);
        this.delCompFormClosedTabs(this.tabsList);
        this.tabsList = current;
      }
    },
    /** 关闭当前页 */
    closeCurrentTab(route) {
      const index = this.tabsList.findIndex((item) => item.fullPath == route.fullPath);
      this.delCompFormClosedTabs(this.tabsList.splice(index, 1));
    },
    /** 关闭全部 */
    closeAllTabs() {
      this.delCompFormClosedTabs(this.tabsList);
      this.tabsList = [];
      localStorage.removeItem(TABS_ROUTES);
    },
    // 更新tab标题
    updateTabTitle(title: string) {
      const currentRoute = router.currentRoute.value;
      const upTarget = this.tabsList.find((item) => item.fullPath === currentRoute.fullPath);
      if (upTarget) {
        upTarget.meta.title = title;
      }
    },
  },
});

// 在组件setup函数外使用
export function useTabsViewStoreWithOut() {
  return useTabsViewStore(store);
}
import type {RouteRecordRaw} from 'vue-router';
import {defineStore} from 'pinia';
import {store} from '@/store';
import {login, expertLogin} from '@/api/login';
import {ACCESS_TOKEN_KEY} from '@/framework/enums/cacheEnum';
import {Storage} from '@/framework/utils/Storage';
import {logout, getInfo} from '@/api/account';
import {generateMenu} from '@/router/generator-router';
import {useWsStore} from '@/framework/store/ws';
import {resetRouter} from '@/router';
import FuncInfo = API.FuncInfo;
import {labFuncs, companyFuncs, cityOrgFuncs, provinceOrgFuncs} from './fakeFuncs';

enum LOGIN_TYPE {
    LOCAL,
    SSO,
}

interface UserState {
    token: string;
    name: string;
    avatar: string;
    organizationid: string;
    roles: Array<API.RoleInfo>;
    // like [ 'sys:user:add', 'sys:user:update' ]
    perms: string[];
    menus: RouteRecordRaw[];
    userInfo: Partial<API.AdminUserInfo>;
    loginType: LOGIN_TYPE;
    // 外部系统，应用于单点模式下，子系统间跳转
    outerSystems: SSO.SystemInfo[];
    funcs: FuncInfo[];
    organization: any;
    type: number | string; // 方便开发配合fakeFuncs
}

export const useUserStore = defineStore({
    id: 'user',
    state: (): UserState => ({
        token: Storage.get(ACCESS_TOKEN_KEY, null),
        name: 'amdin',
        avatar: '',
        organizationid: '',
        perms: [],
        menus: [],
        userInfo: {},
        loginType: LOGIN_TYPE.LOCAL,
        outerSystems: [],
        funcs: [],
        organization: {},
        roles: [],
        type: localStorage.getItem('type') || 3,
    }),
    getters: {
        getToken(): string {
            return this.token;
        },
        getAvatar(): string {
            return this.avatar;
        },
        getName(): string {
            return this.name;
        },
        getPerms(): string[] {
            return this.perms;
        },
        getOrganizationId(): string {
            return this.organizationid;
        },
        getOrganizationInfo(): API.OrganizationInfo {
            return this.organization;
        },
        getRoles(): Array<API.RoleInfo> {
            return this.roles;
        },
    },
    actions: {
        // 清空token及用户信息
        resetToken() {
            this.avatar = this.token = this.name = '';
            this.perms = [];
            this.menus = [];
            this.userInfo = {};
            // Storage.clear();
            Storage.remove('TABS_ROUTES')
            Storage.remove('ACCESS_TOKEN')
            Storage.remove('type')
            Storage.removeCookie('token');
        },
        // 登录成功保存token
        setToken(token: string) {
            this.token = token ?? '';
            const ex = 7 * 24 * 60 * 60 * 1000;
            Storage.set(ACCESS_TOKEN_KEY, this.token, ex);
        },
        // 登录
        async login(params: API.LoginParams, type) {
            localStorage.setItem('type', type);
            this.type = type;
            try {
                // const { data } = type !== 4 ? await login(params) : await expertLogin(params);
                const {data} = await login(params);
                this.setToken(data.token);
                return this.afterLogin();
            } catch (error) {
                return Promise.reject(error);
            }
        },
        // 登录成功之后, 获取用户信息以及生成权限路由
        async afterLogin() {
            try {
                const wsStore = useWsStore();
                const [{user, funcs, organization, roles}] = await Promise.all([getInfo()]);
                // this.perms = perms;
                this.name = user.username;
                this.avatar = user.headImg;
                this.organizationid = organization?.id || '';
                this.userInfo = user;
                // this.funcs = funcs;
                this.organization = organization;
                this.roles = roles;
                // 生成路由∂
                // const funcsMap = {
                //   1: provinceOrgFuncs,
                //   2: cityOrgFuncs,
                //   3: companyFuncs,
                //   4: labFuncs,
                // };
                let funcsList = []
                if (roles && roles.length) {
                    if (roles[0].id === '1') {
                        funcsList = [] // 超级管理员
                    } else {
                        funcsList = roles[0].funcList || []
                    }
                }
                this.funcs = funcsList
                // const fakeFuncs = funcsMap[Number(this.type)];
                // this.funcs = fakeFuncs;
                const generatorResult = generateMenu(
                    // this.funcs[0]?.children || (fakeFuncs as API.FuncInfo[]),
                    // (fakeFuncs as API.FuncInfo[])
                    funcsList
                ); // this.funcs[0].children!
                this.menus = generatorResult.menus;
                // wsStore.initSocket();
                return {userInfo: user};
            } catch (error) {
                // return this.logout();
            }
        },
        // 登出
        async logout() {
            await logout();
            const wsStore = useWsStore();
            wsStore.closeSocket();
            this.resetToken();
            resetRouter();
        },
    },
});

// 在组件setup函数外使用
export function useUserStoreWithOut() {
    return useUserStore(store);
}
import config from '@/config'
const baseUrl =
  process.env.NODE_ENV === 'development'
    ? config.baseUrl.dev
    : config.baseUrl.pro
export const previewFile = (file: { name: string, md5: string }) => {
  console.log('preview', file)
}

export const downloadFile = (file: { name: string, md5: string }) => {
  window.open(`${location.origin}${baseUrl}/file/md5/${file.md5}`)
}import { message } from "ant-design-vue"
import axios from "axios"

function printBlobUrl(blobURL) {
  return new Promise((resolve) => {
    const iframe = document.createElement('iframe') // load content in an iframe to print later
    document.body.appendChild(iframe)
    iframe.style.display = 'none'
    iframe.src = blobURL
    iframe.onload = function () {
      setTimeout(function () {
        iframe.focus()
        iframe.contentWindow?.print()
        setTimeout(() => {
          // 5分钟之后删除 iframe
          document.body.removeChild(iframe)
        }, 5 * 60 * 1000)
        resolve(true)
      }, 1)
    }
  })
}

export async function printDoc(url) {
  const result = await axios.get(url, {
    responseType: 'blob'
  })
  if (result) {
    var blob = new Blob([result.data], { type: 'application/pdf' }) // this make the magic
    if (blob.size <= 0) {
      message.error('打印数据不存在')
    }
    var blobURL = URL.createObjectURL(blob)
    await printBlobUrl(blobURL)
    URL.revokeObjectURL(blobURL)
  }
  return result
}
